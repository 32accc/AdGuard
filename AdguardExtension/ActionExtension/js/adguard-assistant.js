(function() {
var Resources = function () {
var _resources = {
"button.css": "",

"selector.css": "I2FkZ3VhcmQtYXNzaXN0YW50LWRpYWxvZyB7CiAgICBvdmVyZmxvdzogaGlkZGVuICFpbXBvcnRhbnQ7CiAgICB6LWluZGV4OiAyMTQ3NDgzNjQ3ICFpbXBvcnRhbnQ7CiAgICB2aXNpYmlsaXR5OiB2aXNpYmxlICFpbXBvcnRhbnQ7Cn0KCi5zZ19zZWxlY3RlZCB7Cn0KCi5zZ19zdWdnZXN0ZWQgewogICAgYmFja2dyb3VuZC1jb2xvcjogI0ZGNSAhaW1wb3J0YW50OwogICAgYmFja2dyb3VuZC1pbWFnZTogbm9uZSAhaW1wb3J0YW50Owp9Cgouc2dfYm9yZGVyIHsKICAgIHBvc2l0aW9uOiBhYnNvbHV0ZSAhaW1wb3J0YW50OwogICAgei1pbmRleDogMjE0NzQ4MzY0NiAhaW1wb3J0YW50OwogICAgYmFja2dyb3VuZDogd2hpdGUgIWltcG9ydGFudDsKICAgIGJhY2tncm91bmQtY29sb3I6ICMxM2EzNWUgIWltcG9ydGFudDsKICAgIG1hcmdpbjogMHB4ICFpbXBvcnRhbnQ7CiAgICBwYWRkaW5nOiAwcHggIWltcG9ydGFudDsKICAgIGRpc3BsYXk6IGJsb2NrOwogICAgZmxvYXQ6IG5vbmUgIWltcG9ydGFudDsKICAgIGJvcmRlcjogMCAhaW1wb3J0YW50OwogICAgZm9udC1zdHlsZTogbm9ybWFsICFpbXBvcnRhbnQ7CiAgICBvdXRsaW5lOiAwICFpbXBvcnRhbnQ7CiAgICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmUgIWltcG9ydGFudDsKICAgIHRleHQtYWxpZ246IGxlZnQgIWltcG9ydGFudDsKICAgIGxpbmUtaGVpZ2h0OiAxMnB4OwogICAgYm94LXNpemluZzogY29udGVudC1ib3ggIWltcG9ydGFudDsKfQoKLnNnX2JvdHRvbV9ib3JkZXIgewogICAgZm9udC1zaXplOiAxMHB4ICFpbXBvcnRhbnQ7CiAgICBmb250LXdlaWdodDogYm9sZDsKICAgIGNvbG9yOiB3aGl0ZSAhaW1wb3J0YW50OwogICAgcGFkZGluZzogMnB4IDBweCAycHggNXB4ICFpbXBvcnRhbnQ7CiAgICBvdmVyZmxvdzogaGlkZGVuICFpbXBvcnRhbnQ7Cn0KCi5zZ19ib3JkZXJfcmVkIHsKICAgIGJhY2tncm91bmQtY29sb3I6ICNGMDAgIWltcG9ydGFudDsKfQoKLnNnX2hpZ2hsaWdodGVkIHsKfQoKLnNnX3JlamVjdGVkIHsKICAgIGJhY2tncm91bmQtY29sb3I6ICNGQTgwNzIgIWltcG9ydGFudDsKICAgIGJhY2tncm91bmQtaW1hZ2U6IG5vbmUgIWltcG9ydGFudDsKfQoKaW1nLnNnX3JlamVjdGVkIHsKICAgIGJvcmRlcjogNXB4IHNvbGlkICNGMDAgIWltcG9ydGFudDsKfQoKaW1nLnNnX3N1Z2dlc3RlZCB7CiAgICBib3JkZXI6IDVweCBzb2xpZCAjRkY1ICFpbXBvcnRhbnQ7Cn0KCmltZy5zZ19zZWxlY3RlZCB7CiAgICBib3JkZXI6IDVweCBzb2xpZCAjMEYwICFpbXBvcnRhbnQ7Cn0KCiNfc2dfZGl2LnNnX3RvcCB7CiAgICB0b3A6IDVweCAhaW1wb3J0YW50Owp9CgojX3NnX2Rpdi5zZ19ib3R0b20gewogICAgYm90dG9tOiA1cHggIWltcG9ydGFudDsKfQoKI19zZ19kaXYgaW5wdXQgewogICAgbWFyZ2luLXJpZ2h0OiAxMHB4ICFpbXBvcnRhbnQ7CiAgICBmb250LXNpemU6IDE1cHggIWltcG9ydGFudDsKfQoKI19zZ19wYXRoX2ZpZWxkIHsKICAgIHdpZHRoOiA0MDBweCAhaW1wb3J0YW50Owp9CgojX3NnX2RpdiAuc2dfbmV3X2xpbmUgewogICAgY2xlYXI6IGJvdGggIWltcG9ydGFudDsKfQoKI19zZ19kaXYgLnNnX29wdGlvbiB7CiAgICBmbG9hdDogbGVmdCAhaW1wb3J0YW50Owp9CgojX3NnX2RpdiAuc2dfc2VsZWN0ZWRfb3B0aW9uIHsKICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lOwp9CgouYWRndWFyZC1wbGFjZWhvbGRlciB7CiAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoZGF0YTppbWFnZS9wbmc7YmFzZTY0LGlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFBOEFBQUFQQ0FNQUFBQU1DR1Y0QUFBQUdYUkZXSFJUYjJaMGQyRnlaUUJCWkc5aVpTQkpiV0ZuWlZKbFlXUjVjY2xsUEFBQUF5RnBWRmgwV0UxTU9tTnZiUzVoWkc5aVpTNTRiWEFBQUFBQUFEdy9lSEJoWTJ0bGRDQmlaV2RwYmowaTc3dS9JaUJwWkQwaVZ6Vk5NRTF3UTJWb2FVaDZjbVZUZWs1VVkzcHJZemxrSWo4K0lEeDRPbmh0Y0cxbGRHRWdlRzFzYm5NNmVEMGlZV1J2WW1VNmJuTTZiV1YwWVM4aUlIZzZlRzF3ZEdzOUlrRmtiMkpsSUZoTlVDQkRiM0psSURVdU5TMWpNREUwSURjNUxqRTFNVFE0TVN3Z01qQXhNeTh3TXk4eE15MHhNam93T1RveE5TQWdJQ0FnSUNBZ0lqNGdQSEprWmpwU1JFWWdlRzFzYm5NNmNtUm1QU0pvZEhSd09pOHZkM2QzTG5jekxtOXlaeTh4T1RrNUx6QXlMekl5TFhKa1ppMXplVzUwWVhndGJuTWpJajRnUEhKa1pqcEVaWE5qY21sd2RHbHZiaUJ5WkdZNllXSnZkWFE5SWlJZ2VHMXNibk02ZUcxd1BTSm9kSFJ3T2k4dmJuTXVZV1J2WW1VdVkyOXRMM2hoY0M4eExqQXZJaUI0Yld4dWN6cDRiWEJOVFQwaWFIUjBjRG92TDI1ekxtRmtiMkpsTG1OdmJTOTRZWEF2TVM0d0wyMXRMeUlnZUcxc2JuTTZjM1JTWldZOUltaDBkSEE2THk5dWN5NWhaRzlpWlM1amIyMHZlR0Z3THpFdU1DOXpWSGx3WlM5U1pYTnZkWEpqWlZKbFppTWlJSGh0Y0RwRGNtVmhkRzl5Vkc5dmJEMGlRV1J2WW1VZ1VHaHZkRzl6YUc5d0lFTkRJQ2hYYVc1a2IzZHpLU0lnZUcxd1RVMDZTVzV6ZEdGdVkyVkpSRDBpZUcxd0xtbHBaRG8xT1VNNU9VRTRNRVpFUXpVeE1VVXlPVEF6TTBFeU9EUXlSamM1UWpJMlF5SWdlRzF3VFUwNlJHOWpkVzFsYm5SSlJEMGllRzF3TG1ScFpEbzFPVU01T1VFNE1VWkVRelV4TVVVeU9UQXpNMEV5T0RReVJqYzVRakkyUXlJK0lEeDRiWEJOVFRwRVpYSnBkbVZrUm5KdmJTQnpkRkpsWmpwcGJuTjBZVzVqWlVsRVBTSjRiWEF1YVdsa09qVTVRems1UVRkRlJrUkROVEV4UlRJNU1ETXpRVEk0TkRKR056bENNalpESWlCemRGSmxaanBrYjJOMWJXVnVkRWxFUFNKNGJYQXVaR2xrT2pVNVF6azVRVGRHUmtSRE5URXhSVEk1TURNelFUSTROREpHTnpsQ01qWkRJaTgrSUR3dmNtUm1Pa1JsYzJOeWFYQjBhVzl1UGlBOEwzSmtaanBTUkVZK0lEd3ZlRHA0YlhCdFpYUmhQaUE4UDNod1lXTnJaWFFnWlc1a1BTSnlJajgrOXJKbTl3QUFBQVpRVEZSRjIrN2cxT2ZaK0xYL0VnQUFBQ3RKUkVGVWVOcGlZSVFBQmhoQTVUSXlvSEloZkNTMURLaGNFQi9GSkFaRzdBWXpvTmxMTHk1QWdBRUFNaWdBYXI2VGNxa0FBQUFBU1VWT1JLNUNZSUk9KTsKfQouYWRndWFyZC1wbGFjZWhvbGRlci1pY29uIHsKICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUNZQUFBQXdDQVlBQUFCOXNnZ29BQUFBR1hSRldIUlRiMlowZDJGeVpRQkJaRzlpWlNCSmJXRm5aVkpsWVdSNWNjbGxQQUFBQXlGcFZGaDBXRTFNT21OdmJTNWhaRzlpWlM1NGJYQUFBQUFBQUR3L2VIQmhZMnRsZENCaVpXZHBiajBpNzd1L0lpQnBaRDBpVnpWTk1FMXdRMlZvYVVoNmNtVlRlazVVWTNwcll6bGtJajgrSUR4NE9uaHRjRzFsZEdFZ2VHMXNibk02ZUQwaVlXUnZZbVU2Ym5NNmJXVjBZUzhpSUhnNmVHMXdkR3M5SWtGa2IySmxJRmhOVUNCRGIzSmxJRFV1TlMxak1ERTBJRGM1TGpFMU1UUTRNU3dnTWpBeE15OHdNeTh4TXkweE1qb3dPVG94TlNBZ0lDQWdJQ0FnSWo0Z1BISmtaanBTUkVZZ2VHMXNibk02Y21SbVBTSm9kSFJ3T2k4dmQzZDNMbmN6TG05eVp5OHhPVGs1THpBeUx6SXlMWEprWmkxemVXNTBZWGd0Ym5NaklqNGdQSEprWmpwRVpYTmpjbWx3ZEdsdmJpQnlaR1k2WVdKdmRYUTlJaUlnZUcxc2JuTTZlRzF3UFNKb2RIUndPaTh2Ym5NdVlXUnZZbVV1WTI5dEwzaGhjQzh4TGpBdklpQjRiV3h1Y3pwNGJYQk5UVDBpYUhSMGNEb3ZMMjV6TG1Ga2IySmxMbU52YlM5NFlYQXZNUzR3TDIxdEx5SWdlRzFzYm5NNmMzUlNaV1k5SW1oMGRIQTZMeTl1Y3k1aFpHOWlaUzVqYjIwdmVHRndMekV1TUM5elZIbHdaUzlTWlhOdmRYSmpaVkpsWmlNaUlIaHRjRHBEY21WaGRHOXlWRzl2YkQwaVFXUnZZbVVnVUdodmRHOXphRzl3SUVORElDaFhhVzVrYjNkektTSWdlRzF3VFUwNlNXNXpkR0Z1WTJWSlJEMGllRzF3TG1scFpEcEVOa05CUVROR01rWkVRelV4TVVVeVFqVkZNa1pFTVVGRlJqbEdPRVF5TXlJZ2VHMXdUVTA2Ukc5amRXMWxiblJKUkQwaWVHMXdMbVJwWkRwRU5rTkJRVE5HTTBaRVF6VXhNVVV5UWpWRk1rWkVNVUZGUmpsR09FUXlNeUkrSUR4NGJYQk5UVHBFWlhKcGRtVmtSbkp2YlNCemRGSmxaanBwYm5OMFlXNWpaVWxFUFNKNGJYQXVhV2xrT2tRMlEwRkJNMFl3UmtSRE5URXhSVEpDTlVVeVJrUXhRVVZHT1VZNFJESXpJaUJ6ZEZKbFpqcGtiMk4xYldWdWRFbEVQU0o0YlhBdVpHbGtPa1EyUTBGQk0wWXhSa1JETlRFeFJUSkNOVVV5UmtReFFVVkdPVVk0UkRJeklpOCtJRHd2Y21SbU9rUmxjMk55YVhCMGFXOXVQaUE4TDNKa1pqcFNSRVkrSUR3dmVEcDRiWEJ0WlhSaFBpQThQM2h3WVdOclpYUWdaVzVrUFNKeUlqOCs0OXNiRHdBQUFsOUpSRUZVZU5yTW1FMG81VkVZeHE5dkptcEkyU0JaakNTTktLR3drREUwbThtZzJRd3pFdGtOQ2VVakd5VmhZVGJUVUlaRU1XbWtiQ1ZsdzlRa0c0bWFtbWJLNXpBV3VMcWVrM2NoM1c3ditaOFAvN2QrdS9jY3p6M25lTTd6UDBIdGcxMmVSNndVa0ErZWcyeVFET0xBWWVnamlJa0VyMEFqeUFQUmZucDh0b1c5QmUyMFFvSEthMHRZRWhnQ1Zkd0JOb1FWZ0NtUUtqUEl0TEFLTUF0aVpBZWFGRllNNXNBVEo0T0REWWw2QnVhZGlqSWxMQUpNZ0hpRk9XSk1iR1VmbWFac0hZTjk4QnZzNmhhV0Exb2x4MnlDTWZBZC9ERjErUHNsNXJ3R1BXQVlYSm44cjN3TlhqQjdMMEVOclpMUnd5L202WkRvcnc4a1NxZXdVcERMN1AwRXBtM1lSUkJvWWZidWdXNWJQcFpESzhhcFRuQnFTOWg3V2pXT0xYeXo1ZnhQUVNXanowZFdjbVByRWhkSk5JRXBySWxXMTk4WjdhVVYxU2FzUVdKbkFwM0R6dytGcVd4bE9tVjJIZVhWZWNiZWdIQlRZUzVZWVZ5MXllanJWSmhJcHhsdUZQYUI2VjFXaFNXUVRYamNKcXlLakZWbmhhZ2FiQmhGRms3dGduUG1scCtvQ2hOYm1NWE03MFhnTDNOZW42cXdqOHkreGZ2NTNmUVpLd2VGek41eFc0Yy9DZ3d3ZTlmQXVpMWhJdUJsTW50SFpPS05pckF5aVErTkxiQmt3OGZFRTlJTTJRU25CdjE5SStvV1ZndVdRU3h6cm5YNkVWcnFvVjJJMTVrUzBBeGVTc3pqbyszMjZoUW0zaG9TUVJxUjZtQ2VMMkJWNXgwVlNqWVFvakRITm1nemNZbi9VeGovSDlTQk03ZmtNUTk1MVR1dzRhYWdlRU1wWThGVUhuUHkrWFpFQ1hiUlRVRnhoZXpFcUNpWkZmc0ZSblhkZzF4aGdjVDlCRi9CSkcyaHRSS2lEangzNzZFWDlNZDM2SG9SL05EcDVqSjFLOEFBY1FCbW9vWmhUZ1FBQUFBQVNVVk9SSzVDWUlJPSk7CiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXIgY2VudGVyOwogICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDsKICAgIGhlaWdodDogMTAwJTsKfQouYWRndWFyZC1wbGFjZWhvbGRlci1kb21haW4gewogICAgYmFja2dyb3VuZDogIzc3OGI3YzsKICAgIGNvbG9yOiAjZmZmZmZmOwogICAgbGVmdDogMDsKICAgIHRvcDogMDsKICAgIHBhZGRpbmc6IDJweCA0cHg7CiAgICBwb3NpdGlvbjogcmVsYXRpdmU7Cn0K",

"mobile-style.css": "Lm1haW4gewogICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNjY2M7CiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2NjYzsKICAgIG1hcmdpbjogMDsKICAgIGJveC1zaGFkb3c6IG5vbmU7CiAgICBoZWlnaHQ6IDEwMCU7Cn0KCiNhZGctcHJldmlldyB7CiAgICBkaXNwbGF5OiBibG9jazsKfQoKLmVsZW1lbnQtcnVsZS0tc2xpZGVyLCAuZm9vdCB7CiAgICBkaXNwbGF5OiBub25lOwp9CgouYWRnLXNsaWRlLWJ0bnMgewogICAgZGlzcGxheTogZmxleDsKfQoKLmVsZW1lbnQtcnVsZV9tb3JlIC5idG4gewogICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7CiAgICB3aGl0ZS1zcGFjZTogbm93cmFwOwogICAgb3ZlcmZsb3c6IGhpZGRlbjsKfQoKCi5hZGctc2xpZGUtYnRuc3sKICAgIGRpc3BsYXk6IGZsZXg7CiAgICBwYWRkaW5nLXJpZ2h0OiAyNXB4Owp9CgouaGVhZF9pbi0tc2xpZGVyIHsKICAgIGRpc3BsYXk6IC13ZWJraXQtYm94OwogICAgZGlzcGxheTogLW1zLWZsZXhib3g7CiAgICBkaXNwbGF5OiBmbGV4OwogICAgLXdlYmtpdC1ib3gtcGFjazoganVzdGlmeTsKICAgIC1tcy1mbGV4LXBhY2s6IGp1c3RpZnk7CiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47CiAgICBjdXJzb3I6IGRlZmF1bHQ7Cn0KCi5oZWFkX3RpdGxlLS1zbGlkZXIgewogICAgZGlzcGxheTogbm9uZTsKfQoKI2FkZy1hY2NlcHQgewogICAgcGFkZGluZzogMTBweCA2cHg7Cn0KCiNhZGctY2FuY2VsIHsKICAgIHdpZHRoOiAxMDZweDsKICAgIHBhZGRpbmc6IDEwcHggN3B4Owp9CgoKQG1lZGlhIChtaW4td2lkdGg6IDUwMHB4KSB7CiAgICAjYWRnLWNhbmNlbCB7CiAgICAgICAgd2lkdGg6IGF1dG87CiAgICB9Cn0KCi5oZWFkIHsKICAgIHBhZGRpbmc6IDEwcHg7CiAgICBkaXNwbGF5OiBmbGV4OwogICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuOwogICAgY3Vyc29yOiBkZWZhdWx0Owp9CgouaGVhZF90ZXh0IHsKICAgIGRpc3BsYXk6IG5vbmU7Cn0KCi5lbGVtZW50LXJ1bGVfbW9yZSB7CiAgICBkaXNwbGF5OiBmbGV4Owp9CgouY29udGVudCB7CiAgICBkaXNwbGF5OiBub25lOwp9Cg==",

"button.html": "PGRpdiBjbGFzcz0iYWRndWFyZC1hbGVydCBhZGd1YXJkLWFzc2lzdGFudC1idXR0b24tZml4ZWQiPgogIDxzcGFuIGNsYXNzPSJhZGd1YXJkLWEtbG9nbyI+CiAgICAgIDxzcGFuIGNsYXNzPSJhZGd1YXJkLWxvZ28iPjwvc3Bhbj4KICA8L3NwYW4+CjwvZGl2Pg==",

"style.css": "",

"selectorMenu.html": "PGRpdiBjbGFzcz0ibWFpbiBzZ19pZ25vcmUiPgogICAgPGRpdiBjbGFzcz0iY2xvc2UgYWRnLWNsb3NlIiBpZD0iY2xvc2UtYnV0dG9uIj48L2Rpdj4KICAgIDxkaXYgY2xhc3M9ImhlYWQiIGlkPSJkcmFnLWhhbmRsZSI+CiAgICAgICAgPGRpdiBpMThuPSJhc3Npc3RhbnRfc2VsZWN0X2VsZW1lbnQiIGNsYXNzPSJoZWFkX3RpdGxlIj48L2Rpdj4KICAgICAgICA8ZGl2IGkxOG49ImFzc2lzdGFudF9zZWxlY3RfZWxlbWVudF9leHQiIGNsYXNzPSJoZWFkX3RleHQiPjwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0iZm9vdCI+CiAgICAgICAgPGJ1dHRvbiBpMThuPSJhc3Npc3RhbnRfc2VsZWN0X2VsZW1lbnRfY2FuY2VsIiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQiIGlkPSJjYW5jZWwtc2VsZWN0LW1vZGUiPjwvYnV0dG9uPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+",

"sliderMenu.html": "PGRpdiBjbGFzcz0ibWFpbiI+CiAgICA8ZGl2IGNsYXNzPSJjbG9zZSBhZGctY2xvc2UiPjwvZGl2PgogICAgPGRpdiBjbGFzcz0iaGVhZCBoZWFkLS1zbGlkZXIiPgogICAgICAgIDxkaXYgY2xhc3M9ImhlYWRfaW4gaGVhZF9pbi0tc2xpZGVyIj4KICAgICAgICAgICAgPGRpdiBpMThuPSJhc3Npc3RhbnRfYmxvY2tfZWxlbWVudCIgY2xhc3M9ImhlYWRfdGl0bGUgaGVhZF90aXRsZS0tc2xpZGVyIiBpZD0iaGVhZF90aXRsZSI+PC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImVsZW1lbnQtcnVsZV9tb3JlIGVsZW1lbnQtcnVsZV9tb3JlLS1tb2JpbGUiPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImVsZW1lbnQtcnVsZV9leHBhbmQtbGluayIgaWQ9IkV4dGVuZGVkU2V0dGluZ3NUZXh0Ij48L3NwYW4+CiAgICAgICAgICAgICAgICA8YnV0dG9uIGkxOG49ImFzc2lzdGFudF9ibG9jayIgdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1jYW5jZWwiIGlkPSJhZGctYWNjZXB0Ij48L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxidXR0b24gaTE4bj0iYXNzaXN0YW50X2Fub3RoZXJfZWxlbWVudCIgdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IiBpZD0iYWRnLWNhbmNlbCI+PC9idXR0b24+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImFkZy1zbGlkZS1idG5zIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWRnLXNsaWRlLWJ0biBhZGctc2xpZGUtYnRuLS1taW51cyI+PC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFkZy1zbGlkZS1idG4gYWRnLXNsaWRlLWJ0bi0tcGx1cyI+PC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBpMThuPSJhc3Npc3RhbnRfYmxvY2tfZWxlbWVudF9leHBsYWluIiBjbGFzcz0iaGVhZF90ZXh0IGhlYWRfdGV4dC0tbW9iaWxlLWgiIGlkPSJoZWFkX3RleHQiPjwvZGl2PgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJjb250ZW50IiBpZD0ic2xpZGVyLWFyZWEiPgogICAgICAgIDxkaXYgY2xhc3M9ImVsZW1lbnQtcnVsZSBlbGVtZW50LXJ1bGUtLXNsaWRlciI+CiAgICAgICAgICAgIDxkaXYgaTE4bj0iYXNzaXN0YW50X3NsaWRlcl9leHBsYWluIiBjbGFzcz0iZWxlbWVudC1ydWxlX3RleHQgZWxlbWVudC1ydWxlX3RleHQtLXNsaWRlciI+PC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImVsZW1lbnQtcnVsZV9zbGlkZXIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWRnLXNsaWRlIiBpZD0ic2xpZGVyIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGkxOG49ImFzc2lzdGFudF9zbGlkZXJfbWF4IiBjbGFzcz0iYWRnLXNsaWRlLWNsdWUtbWF4Ij48L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGkxOG49ImFzc2lzdGFudF9zbGlkZXJfbWluIiBjbGFzcz0iYWRnLXNsaWRlLWNsdWUtbWluIj48L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZWxlbWVudC1ydWxlX21vcmUiPgogICAgICAgICAgICAgICAgCQkJPHNwYW4gY2xhc3M9ImVsZW1lbnQtcnVsZV9leHBhbmQtbGluayIgaWQ9IkV4dGVuZGVkU2V0dGluZ3NUZXh0Ij4KCQkJCQkJCTxzcGFuIGkxOG49ImFzc2lzdGFudF9leHRlbmRlZF9zZXR0aW5ncyIgY2xhc3M9ImVsZW1lbnQtcnVsZV9leHBhbmQtbGlua190eHQiPjwvc3Bhbj4KCQkJCQkJPHNwYW4gY2xhc3M9ImVsZW1lbnQtcnVsZV9leHBhbmQtbGlua19hcnIiPjwvc3Bhbj4KCQkJCQkJPC9zcGFuPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZWxlbWVudC1ydWxlX2Zvcm0iIGlkPSJhZHYtc2V0dGluZ3MiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZWxlbWVudC1ydWxlX2Zvcm0tY29udCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZWxlbWVudC1ydWxlX2ZpZWxkc2V0IiBpZD0ib25lLWRvbWFpbi1jaGVja2JveC1ibG9jayI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iZm9ybS11aS1jb250cm9sIiBpZD0ib25lLWRvbWFpbi1jaGVja2JveCIgdHlwZT0iY2hlY2tib3giLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0ib25lLWRvbWFpbi1jaGVja2JveCIgY2xhc3M9ImZvcm0tdWkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaTE4bj0iYXNzaXN0YW50X2FwcGx5X3J1bGVfdG9fYWxsX3NpdGVzIiBjbGFzcz0iZm9ybS11aS10eHQiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJkaXNwbGF5OiBub25lOyIgY2xhc3M9ImVsZW1lbnQtcnVsZV9maWVsZHNldCIgaWQ9ImJsb2NrLWJ5LXVybC1jaGVja2JveC1ibG9jayI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iZm9ybS11aS1jb250cm9sIiBpZD0iYmxvY2stYnktdXJsLWNoZWNrYm94IiB0eXBlPSJjaGVja2JveCIvPgogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJibG9jay1ieS11cmwtY2hlY2tib3giIGNsYXNzPSJmb3JtLXVpIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGkxOG49ImFzc2lzdGFudF9ibG9ja19ieV9yZWZlcmVuY2UiIGNsYXNzPSJmb3JtLXVpLXR4dCI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9ImRpc3BsYXk6IG5vbmU7IiBjbGFzcz0iZWxlbWVudC1ydWxlX2ZpZWxkc2V0IiBpZD0iYmxvY2stc2ltaWxhci1jaGVja2JveC1ibG9jayI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iZm9ybS11aS1jb250cm9sIiBpZD0iYmxvY2stc2ltaWxhci1jaGVja2JveCIgdHlwZT0iY2hlY2tib3giLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iYmxvY2stc2ltaWxhci1jaGVja2JveCIgY2xhc3M9ImZvcm0tdWkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaTE4bj0iYXNzaXN0YW50X2Jsb2NrX3NpbWlsYXIiIGNsYXNzPSJmb3JtLXVpLXR4dCI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImVsZW1lbnQtcnVsZV9maWVsZHNldCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iZm9ybS1jb250cm9sIiBpZD0iZmlsdGVyLXJ1bGUiIHR5cGU9InRleHQiLz4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0iZm9vdCBmb290LS1zbGlkZXIiPgogICAgICAgIDxidXR0b24gaTE4bj0iYXNzaXN0YW50X2Fub3RoZXJfZWxlbWVudCIgdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IGJ0bi1hbm90aGVyLWVsIiBpZD0iYWRnLWNhbmNlbCI+PC9idXR0b24+CiAgICAgICAgPGRpdiBjbGFzcz0iZm9vdF9hY3Rpb24iPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb290X2FjdGlvbl9idG4iPgogICAgICAgICAgICAgICAgPGJ1dHRvbiBpMThuPSJhc3Npc3RhbnRfcHJldmlldyIgdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiBpZD0iYWRnLXByZXZpZXciPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGJ1dHRvbiBpMThuPSJhc3Npc3RhbnRfYmxvY2siIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tY2FuY2VsIiBpZD0iYWRnLWFjY2VwdCI+PC9idXR0b24+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2Pgo=",

"blockPreview.html": "PGRpdiBjbGFzcz0ibWFpbiI+CjxkaXYgY2xhc3M9ImNsb3NlIj48L2Rpdj4KCjxkaXYgY2xhc3M9ImhlYWQiPgogICAgPGRpdiBpMThuPSJhc3Npc3RhbnRfcHJldmlld19oZWFkZXIiIGNsYXNzPSJoZWFkX3RpdGxlIj4KICAgIDwvZGl2PgogICAgPGRpdiBpMThuPSJhc3Npc3RhbnRfcHJldmlld19oZWFkZXJfaW5mbyIgY2xhc3M9ImhlYWRfdGV4dCI+CiAgICA8L2Rpdj4KPC9kaXY+Cgo8ZGl2IGNsYXNzPSJmb290Ij4KICAgIDxidXR0b24gaTE4bj0iYXNzaXN0YW50X2Fub3RoZXJfZWxlbWVudCIgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCIgaWQ9InNlbGVjdC1hbm90aGVyLWVsZW1lbnQiIHR5cGU9ImJ1dHRvbiI+PC9idXR0b24+CgogICAgPGRpdiBjbGFzcz0iZm9vdF9hY3Rpb24iPgogICAgICAgIDxkaXYgY2xhc3M9ImZvb3RfYWN0aW9uX2J0biI+CiAgICAgICAgICAgIDxidXR0b24gaTE4bj0iYXNzaXN0YW50X3ByZXZpZXdfZW5kIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiBpZD0iZW5kLXByZXZpZXciIHR5cGU9ImJ1dHRvbiI+PC9idXR0b24+CiAgICAgICAgICAgIDxidXR0b24gaTE4bj0iYXNzaXN0YW50X2Jsb2NrIiBjbGFzcz0iYnRuIGJ0bi1jYW5jZWwiIGlkPSJibG9jay1lbGVtZW50IiB0eXBlPSJidXR0b24iPjwvYnV0dG9uPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2Pgo8L2Rpdj4=",

"settingsMenu.html": "PGRpdiBjbGFzcz0ibWFpbiI+CiAgICA8ZGl2IGNsYXNzPSJjbG9zZSI+PC9kaXY+CgogICAgPGRpdiBjbGFzcz0iaGVhZCI+CiAgICAgICAgPGRpdiBpMThuPSJhc3Npc3RhbnRfc2V0dGluZ3MiIGNsYXNzPSJoZWFkX3RpdGxlIj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGkxOG49InNldHRpbmdzX2Nob29zZV9zaXplX2FuZF9wb3NpdGlvbiIgY2xhc3M9ImhlYWRfdGV4dCBoZWFkX3RleHQtLW1vYmlsZS1oIj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKICAgIDxkaXYgY2xhc3M9ImNvbnRlbnQiPgogICAgICAgIDxkaXYgY2xhc3M9InNldHRpbmdzIHNldHRpbmdzX19ob3Jpem9udGFsIj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InNldHRpbmdzX2ZpZWxkc2V0Ij4KICAgICAgICAgICAgICAgIDxkaXYgaTE4bj0ic2V0dGluZ3NfaWNvbl9zaXplIiBjbGFzcz0ic2V0dGluZ3NfZmllbGRzZXRfbGJsIj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2V0dGluZ3NfZmllbGRzZXRfdmFsIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjaG9pY2Utc2l6ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNob2ljZS1zaXplX2dyb3VwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNob2ljZS1zaXplX2ZpZWxkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9ImNob2ljZS1zaXplX2lucHV0IGZvcm0tdWktY29udHJvbCIgaWQ9InNpemUtc21hbGwiIHR5cGU9InJhZGlvIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPSJyYWRpbyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJmb3JtLXVpIiBmb3I9InNpemUtc21hbGwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGkxOG49InNldHRpbmdzX3NtYWxsIiBjbGFzcz0iZm9ybS11aS10eHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNob2ljZS1zaXplX2xvZ28iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJhLWxvZ28gYS1sb2dvX19zbWFsbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2dvIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjaG9pY2Utc2l6ZV9maWVsZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJjaG9pY2Utc2l6ZV9pbnB1dCBmb3JtLXVpLWNvbnRyb2wiIGlkPSJzaXplLWJpZyIgdHlwZT0icmFkaW8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9InJhZGlvIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImZvcm0tdWkiIGZvcj0ic2l6ZS1iaWciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGkxOG49InNldHRpbmdzX2JpZyIgY2xhc3M9ImZvcm0tdWktdHh0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjaG9pY2Utc2l6ZV9sb2dvIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iYS1sb2dvIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvZ28iPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2V0dGluZ3NfZmllbGRzZXQiPgogICAgICAgICAgICAgICAgPGRpdiBpMThuPSJzZXR0aW5nc19wb3NpdGlvbiIgY2xhc3M9InNldHRpbmdzX2ZpZWxkc2V0X2xibCBzZXR0aW5nc19maWVsZHNldF9sYmxfX3BvcyI+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNldHRpbmdzX2ZpZWxkc2V0X3ZhbCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2hhbmdlLXBvc2l0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2hhbmdlLXBvc2l0aW9uX2kiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InJhZGlvIiBuYW1lPSJwb3NpdGlvbiIgY2xhc3M9ImNoYW5nZS1wb3NpdGlvbl9pbnB1dCIgaWQ9InBvc2l0aW9uLXRvcC1sZWZ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iY2hhbmdlLXBvc2l0aW9uX2xhYmVsIiBmb3I9InBvc2l0aW9uLXRvcC1sZWZ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icy1wb3NpdGlvbi1hcnItdG9wLWxlZnQiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpMThuPSJzZXR0aW5nc19sZWZ0X3RvcCIgY2xhc3M9ImNoYW5nZS1wb3NpdGlvbl92YWwiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2hhbmdlLXBvc2l0aW9uX2kiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InJhZGlvIiBuYW1lPSJwb3NpdGlvbiIgY2xhc3M9ImNoYW5nZS1wb3NpdGlvbl9pbnB1dCIgaWQ9InBvc2l0aW9uLXRvcC1yaWdodCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImNoYW5nZS1wb3NpdGlvbl9sYWJlbCIgZm9yPSJwb3NpdGlvbi10b3AtcmlnaHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzLXBvc2l0aW9uLWFyci10b3AtcmlnaHQiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpMThuPSJzZXR0aW5nc19yaWdodF90b3AiIGNsYXNzPSJjaGFuZ2UtcG9zaXRpb25fdmFsIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNoYW5nZS1wb3NpdGlvbl9pIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJyYWRpbyIgbmFtZT0icG9zaXRpb24iIGNsYXNzPSJjaGFuZ2UtcG9zaXRpb25faW5wdXQiIGlkPSJwb3NpdGlvbi1ib3R0b20tbGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImNoYW5nZS1wb3NpdGlvbl9sYWJlbCIgZm9yPSJwb3NpdGlvbi1ib3R0b20tbGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InMtcG9zaXRpb24tYXJyLWJvdHRvbS1sZWZ0Ij48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaTE4bj0ic2V0dGluZ3NfbGVmdF9ib3R0b20iIGNsYXNzPSJjaGFuZ2UtcG9zaXRpb25fdmFsIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNoYW5nZS1wb3NpdGlvbl9pIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJyYWRpbyIgbmFtZT0icG9zaXRpb24iIGNsYXNzPSJjaGFuZ2UtcG9zaXRpb25faW5wdXQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9InBvc2l0aW9uLWJvdHRvbS1yaWdodCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImNoYW5nZS1wb3NpdGlvbl9sYWJlbCIgZm9yPSJwb3NpdGlvbi1ib3R0b20tcmlnaHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzLXBvc2l0aW9uLWFyci1ib3R0b20tcmlnaHQiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpMThuPSJzZXR0aW5nc19yaWdodF9ib3R0b20iIGNsYXNzPSJjaGFuZ2UtcG9zaXRpb25fdmFsIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgoKICAgIDxkaXYgY2xhc3M9ImZvb3QiPgogICAgICAgIDxkaXYgY2xhc3M9ImZvb3RfYWN0aW9uIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9vdF9hY3Rpb25fYnRuIj4KICAgICAgICAgICAgICAgIDxidXR0b24gaTE4bj0ic2V0dGluZ3NfY2FuY2VsIiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IiB0eXBlPSJidXR0b24iIGlkPSJjYW5jZWwiPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGJ1dHRvbiBpMThuPSJzZXR0aW5nc19zYXZlIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiB0eXBlPSJidXR0b24iIGlkPSJzYXZlLXNldHRpbmdzIj48L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+Cg=="

};
var _getResource = function (name) {
                return Base64.decode(_resources[name]);
            }
return {getResource: _getResource};
};
/*! https://mths.be/cssescape v1.5.1 by @mathias | MIT license */
var cssEscape = (function(root, factory) { // jshint ignore:line
    // https://github.com/umdjs/umd/blob/master/returnExports.js
    // if (typeof exports == 'object') {
    //     // For Node.js.
    //     module.exports = factory(root);
    // } else if (typeof define == 'function' && define.amd) {
    //     // For AMD. Register as an anonymous module.
    //     define([], factory.bind(root, root));
    // } else {
    //     // For browser globals (not exposing the function separately).
    //     factory(root);
    // }
    return factory(root); //We use local variable because we don't want to spoil global scope
}(this, function(root) {

    if (root.CSS && root.CSS.escape) {
        return root.CSS.escape;
    }

    // https://drafts.csswg.org/cssom/#serialize-an-identifier
    var cssEscape = function(value) {
        if (arguments.length === 0) {
            throw new TypeError('`CSS.escape` requires an argument.');
        }
        var string = String(value);
        var length = string.length;
        var index = -1;
        var codeUnit;
        var result = '';
        var firstCodeUnit = string.charCodeAt(0);
        while (++index < length) {
            codeUnit = string.charCodeAt(index);
            // Note: there’s no need to special-case astral symbols, surrogate
            // pairs, or lone surrogates.

            // If the character is NULL (U+0000), then the REPLACEMENT CHARACTER
            // (U+FFFD).
            if (codeUnit === 0x0000) {
                result += '\uFFFD';
                continue;
            }

            if (
                // If the character is in the range [\1-\1F] (U+0001 to U+001F) or is
            // U+007F, […]
            (codeUnit >= 0x0001 && codeUnit <= 0x001F) || codeUnit == 0x007F ||
            // If the character is the first character and is in the range [0-9]
            // (U+0030 to U+0039), […]
            (index === 0 && codeUnit >= 0x0030 && codeUnit <= 0x0039) ||
            // If the character is the second character and is in the range [0-9]
            // (U+0030 to U+0039) and the first character is a `-` (U+002D), […]
            (
                index == 1 &&
                codeUnit >= 0x0030 && codeUnit <= 0x0039 &&
                firstCodeUnit == 0x002D
            )
            ) {
                // https://drafts.csswg.org/cssom/#escape-a-character-as-code-point
                result += '\\' + codeUnit.toString(16) + ' ';
                continue;
            }

            if (
                // If the character is the first character and is a `-` (U+002D), and
            // there is no second character, […]
            index === 0 &&
            length == 1 &&
            codeUnit == 0x002D
            ) {
                result += '\\' + string.charAt(index);
                continue;
            }

            // If the character is not handled by one of the above rules and is
            // greater than or equal to U+0080, is `-` (U+002D) or `_` (U+005F), or
            // is in one of the ranges [0-9] (U+0030 to U+0039), [A-Z] (U+0041 to
            // U+005A), or [a-z] (U+0061 to U+007A), […]
            if (
                codeUnit >= 0x0080 ||
                codeUnit == 0x002D ||
                codeUnit == 0x005F ||
                codeUnit >= 0x0030 && codeUnit <= 0x0039 ||
                codeUnit >= 0x0041 && codeUnit <= 0x005A ||
                codeUnit >= 0x0061 && codeUnit <= 0x007A
            ) {
                // the character itself
                result += string.charAt(index);
                continue;
            }

            // Otherwise, the escaped character.
            // https://drafts.csswg.org/cssom/#escape-a-character
            result += '\\' + string.charAt(index);

        }
        return result;
    };

    if (!root.CSS) {
        root.CSS = {};
    }

    root.CSS.escape = cssEscape;
    return cssEscape;

}));
/**
 * Simple ioc implementation
 * @type {{add, get}}
 */
var Ioc = (function () { // jshint ignore:line
    var dependencies = {};

    var register = function (qualifier, obj) {
        dependencies[qualifier] = obj;
    };

    var get = function (func) {
        if (typeof func === 'string') {
            var resolved = dependencies[func];
            if (!resolved) {
                throw "Can't resolve " + func;
            }
            return resolved;
        }
        var resolvedDependencies = resolveDependencies(func);

        function FuncWrapper() {
            return func.apply(func, resolvedDependencies);
        }

        FuncWrapper.prototype = func.prototype;
        return new FuncWrapper();
    };

    var resolveDependencies = function (func) {
        var args = getArguments(func);
        var resolved = [];
        for (var i = 0; i < args.length; i++) {
            var depName = args[i].trim();
            var dep = dependencies[depName];
            if (!dep) {
                throw  "Can't find dependency: " + depName;
            }
            resolved.push(dependencies[depName]);
        }
        return resolved;
    };

    var getArguments = function (func) {
        //This regex is from require.js
        var FN_ARGS = /^function\s*[^\(]*\(\s*([^\)]*)\)/m;
        var args = func.toString().match(FN_ARGS)[1].split(',');
        if (args[0] === "") {
            return [];
        }
        return args;
    };

    return {
        register: register,
        get: get
    };

})();

/**
 * Simple logger with log levels
 * @returns {{warn: warn, info: info, debug: debug, error: error}}
 * @constructor
 */
var Log = function () { // jshint ignore:line

    var currentLevel = "INFO";

    var LogLevels = {
        ERROR: 1,
        WARN: 2,
        INFO: 3,
        DEBUG: 4
    };

    var print = function (level, method, args) {
        // gulp preprocess condition
        // @if DEBUG

        //check log level
        if (LogLevels[currentLevel] < LogLevels[level]) {
            return;
        }
        if (!args || args.length === 0 || !args[0]) {
            return;
        }
        var str = args[0] + "";
        args = Array.prototype.slice.call(args, 1);
        var formatted = str.replace(/{(\d+)}/g, function (match, number) {
            return typeof  args[number] !== "undefined" ? args[number] : match;
        });
        if (LogLevels[level] >= LogLevels[currentLevel]) {
            var now = new Date();
            formatted = now.toISOString() + ": " + formatted;
        }
        console[method](formatted);
        // @endif

        // @if !DEBUG
        return false;
        // @endif
    };

    var debug = function () {
        print("DEBUG", "log", arguments);
    };

    var info = function () {
        print("INFO", "info", arguments);
    };

    var warn = function () {
        print("WARN", "info", arguments);
    };

    var error = function () {
        print("ERROR", "error", arguments);
    };

    return {
        warn: warn,
        info: info,
        debug: debug,
        error: error
    };
};

/**
 * Balalaika library
 *
 * https://github.com/finom/balalaika/blob/master/balalaika.js
 *
 * The patch includes methods `addClass`, `removeClass`, `hasClass`, `get`, `css`, `hide`, `show`, `remove`, `text`, `attr`, `trigger`.
 * Also, for registration in the Ioc, the library is used through the variable `balalaika`
 */
var balalaika = (function (window, document, fn, nsRegAndEvents, id, s_EventListener, s_MatchesSelector, i, j, k, l, $) {
    $ = function (s, context) {
        return new $.i(s, context);
    };

    $.i = function (s, context) {
        var st;
        if (!s) {
            st = fn;
        } else {
            if (s.nodeType || s == window) {
                st = [s];
            } else {
                if (typeof(s) === 'string') {
                    if (/</.test(s)) {
                        st = ((i = document.createElement(context || 'q')).innerHTML = s, i.children);
                    } else {
                        st = (context && $(context)[0] || document).querySelectorAll(s);
                    }
                } else {
                    if (/f/.test(typeof s)) {
                        if (/c/.test(document.readyState)) {
                            st = s();
                        } else {
                            st = $(document).on('DOMContentLoaded', s);
                        }
                    } else {
                        st = s;
                    }
                }
            }
        }
        st = [].slice.call(st);
        fn.push.apply(this, st);
    };

    $.i[l = 'prototype'] = ( $.extend = function (obj) {
        k = arguments;
        for (i = 1; i < k.length; i++) {
            if (l = k[i]) {
                for (j in l) {
                    obj[j] = l[j];
                }
            }
        }

        return obj;
    })($.fn = $[l] = fn, { // $.fn = $.prototype = fn
        on: function (n, f) {
            // n = [ eventName, nameSpace ]
            n = n.split(nsRegAndEvents);
            this.map(function (item) {
                n.map(function (ev) {
                    item['add' + s_EventListener](ev, f);
                });
            });
            return this;
        },
        off: function (n, f) {
            // n = [ eventName, nameSpace ]
            n = n.split(nsRegAndEvents);
            // l = 'removeEventListener'
            l = 'remove' + s_EventListener;
            this.map(function (item) {
                n.map(function (ev) {
                    item[l](ev, f);
                });
            });
            return this;
        },
        is: function (s) {
            i = this[0];
            return (i.matches
            || i['webkit' + s_MatchesSelector]
            || i['moz' + s_MatchesSelector]
            || i['ms' + s_MatchesSelector]
            || i['o' + s_MatchesSelector]).call(i, s);
        }
    });
    return $;
})(window, window.document, [], /\.| /, 0, 'EventListener', 'MatchesSelector');

/**
 * Add some more functions to balalaika
 */
balalaika.fn.hasClass = function (className) {
    return !!this[0] && (this[0].classList != undefined) && this[0].classList.contains(className);
};

balalaika.fn.addClass = function (className) {
    this.forEach(function (item) {
        var classList = item.classList;
        classList.add.apply(classList, className.split(/\s/));
    });
    return this;
};

balalaika.fn.removeClass = function (className) {
    this.forEach(function (item) {
        var classList = item.classList;
        classList.remove.apply(classList, className.split(/\s/));
    });
    return this;
};

balalaika.fn.get = function (index) {
    return this.length > index ? this[index] : null;
};

balalaika.fn.css = function (attr, value) {
    this.forEach(function (item) {
        item.style[attr] = value;
    });
    return this;
};

balalaika.fn.hide = function () {
    this.forEach(function (item) {
        item.style['display'] = 'none';
    });
    return this;
};

balalaika.fn.show = function () {
    this.forEach(function (item) {
        item.style['display'] = 'block';
    });
    return this;
};

balalaika.fn.remove = function () {
    this.forEach(function (item) {
        item.parentNode.removeChild(item);
    });
    return this;
};

balalaika.fn.text = function (v) {
    this.forEach(function (item) {
        item.textContent = v;
    });
    return this;
};

balalaika.fn.attr = function (k, v) {
    this.forEach(function (item) {
        item.setAttribute(k, v);
    });
    return this;
};

balalaika.fn.trigger = function (eventName, options) {
    this.forEach(function (item) {
        if (window.CustomEvent) {
            var event = new CustomEvent(eventName, {detail: options});
        } else {
            var event = document.createEvent('CustomEvent');
            event.initCustomEvent(eventName, true, true, options);
        }

        item.dispatchEvent(event);
    });
    return this;
};

/**
 * UI utils
 * @param $
 * @returns {{makeElementDraggable: Function, makeIframeDraggable: Function, tryFullScreenPrefix: Function}}
 * @constructor
 */
var UIUtils = function($) { // jshint ignore:line
    var elWidth, elHeight, windowWidth, windowHeight;

    /**
     * Make element draggable
     * @param element
     * @param onDragEnd
     * @param onClick
     */
    var makeElementDraggable = function(element, onDragEnd, onClick) {
        var coords, shiftX, shiftY;

        var moveAt = function(e) {
            var position = {
                x: getOriginalEvent(e).pageX - shiftX,
                y: getOriginalEvent(e).pageY - shiftY
            };

            // disable mousemove if button element outside the screen
            var out = outsidePosition.top(position) ||
                outsidePosition.left(position) ||
                outsidePosition.bottom(position) ||
                outsidePosition.right(position);

            if (out) {
                onMouseUp(e, true);
            } else {
                moveElementTo(element, position.x, position.y);
            }
        };

        var onMouseMove = function(e) {
            pauseEvent(e);
            moveAt(e);
        };

        var getCoords = function(elem) {
            var box = elem.getBoundingClientRect();
            return {
                top: box.top,
                left: box.left,
                bottom: box.bottom,
                right: box.right
            };
        };

        coords = getCoords(element);

        /**
         * Prevent text selection
         * With cursor drag
         */
        var pauseEvent = function(e) {
            e.stopPropagation();
            e.preventDefault();
            e.cancelBubble = true;
            e.returnValue = false;

            return false;
        };

        var preventedEvent = function(e) {
            e.preventDefault();
        };

        var mouseDown = function(e) {
            pauseEvent(e);

            // prevent browser scroll
            $(document).on('wheel mousewheel', preventedEvent);

            // prevent right button mousedown
            if (e.button > 0) return;

            elWidth = element.clientWidth;
            elHeight = element.clientWidth;

            windowWidth = getWindowSize().width;
            windowHeight = getWindowSize().height;

            coords = getCoords(element);

            if (storedAnchor.top) {
                shiftY = getOriginalEvent(e).pageY - coords.top;
            } else {
                shiftY = windowHeight - (coords.bottom - getOriginalEvent(e).pageY);
            }

            if (storedAnchor.left) {
                shiftX = getOriginalEvent(e).pageX - coords.left;
            } else {
                shiftX = windowWidth - (coords.right - getOriginalEvent(e).pageX);
            }

            document.body.appendChild(element);

            /**
             * binding both mouse and touch/pointer events simultaneously
             * see: http://www.html5rocks.com/en/mobile/touchandmouse/
             */
            $(document).on('mouseup touchend pointerup', onMouseUp);
            $(document).on('mousemove touchmove pointermove', onMouseMove);
        };

        /**
         * On mouse up event
         * @param {Object} e  event object
         * @param {Boolean|undefined} doNotOpenIframe  do not open the iframe if true. This is necessary when the cursor is out of bounds
         */
        var onMouseUp = function(e, doNotOpenIframe) {
            e.stopPropagation();

            // make scroll availalbe
            $(document).off('wheel mousewheel', preventedEvent);

            // When a user finishes dragging icon, we set icon anchor
            // depending on the icon position, i.e. which quarter
            // of the screen it belongs.
            var lastX, lastY, lastCoords = getCoords(element);

            var topHalf = lastCoords.top < windowHeight / 2;
            var leftHalf = lastCoords.left < windowWidth / 2;

            setAnchorPosition.positionY(element, topHalf);
            setAnchorPosition.positionX(element, leftHalf);

            if (topHalf) {
                lastY = lastCoords.top;
            } else {
                lastY = lastCoords.bottom - windowHeight;
            }

            if (leftHalf) {
                lastX = lastCoords.left;
            } else {
                lastX = lastCoords.right - windowWidth;
            }

            moveElementTo(element, lastX, lastY);

            // Open the frame if the button has been shifted by no more than 20 pixels
            if (Math.abs(coords.left - lastCoords.left) > 20 || Math.abs(coords.top - lastCoords.top) > 20) {
                if (onDragEnd) {
                    var store = {
                        "x": lastX,
                        "y": lastY,
                        "storedAnchor": storedAnchor
                    };
                    onDragEnd(store);
                }
            } else {
                if (onClick && !doNotOpenIframe) {
                    onClick(e);
                }
            }

            $(document).off('mouseup touchend pointerup', onMouseUp);

            $(document).off('mousemove touchmove pointermove', onMouseMove);
        };

        $(element).on('mousedown touchstart', mouseDown.bind(this));
        $(element).on('dragstart', function() {return;});
        $(element).on('click', function(e) {
            onClick();
        });
    };

    var outsidePosition = {
        top: function(pos) {
            return storedAnchor.top && (pos.y + elHeight > windowHeight || pos.y < 0);
        },
        bottom: function(pos) {
            return !storedAnchor.top && (Math.abs(pos.y) + elHeight > windowHeight || pos.y > 0);
        },
        left: function(pos) {
            return storedAnchor.left && (pos.x + elWidth > windowWidth || pos.x < 0);
        },
        right: function(pos) {
            return !storedAnchor.left && (Math.abs(pos.x) + elWidth > windowWidth || pos.x > 0);
        }
    };

    /**
     * Makes iframe draggable
     *
     * @param iframe
     * @param handleElement
     */
    var makeIframeDraggable = function(iframe, handleElement) {
        var iframeJ = iframe;
        var dragHandle = handleElement;
        var $iframeDocument = $(iframe[0].contentDocument);

        var offset = Object.create(null);

        /**
         * Function that does actual "dragging"
         *
         * @param x
         * @param y
         */
        var drag = function(x, y) {
            iframeJ.css('left', x + 'px');
            iframeJ.css('top', y + 'px');
        };

        var cancelIFrameSelection = function(e) {
            e.preventDefault();
            e.stopPropagation();
        };

        var onMouseMove = function(e) {
            var eventPosition = getOriginalEvent(e);
            drag(eventPosition.screenX + offset.x, eventPosition.screenY + offset.y);
        };

        var onMouseDown = function(e) {
            var eventPosition = getOriginalEvent(e);
            var dragHandleEl = dragHandle.get(0);
            var rect = iframeJ.get(0).getBoundingClientRect();

            offset.x = rect.left + dragHandleEl.offsetLeft - eventPosition.screenX;
            offset.y = rect.top + dragHandleEl.offsetTop - eventPosition.screenY;

            $iframeDocument.on('mousemove touchmove pointermove', onMouseMove);
            $iframeDocument.on('selectstart', cancelIFrameSelection);
        };

        var onMouseUp = function() {
            $iframeDocument.off('mousemove touchmove pointermove', onMouseMove);
            $iframeDocument.off('selectstart', cancelIFrameSelection);
        };

        // prevent iframe dragging while browser tabs is switching
        document.addEventListener('visibilitychange', onMouseUp);

        dragHandle.on('mousedown touchstart', onMouseDown);
        $iframeDocument.on('mouseup touchend pointerup', onMouseUp);
        $iframeDocument.on('contextmenu', function(e) {
            e.preventDefault();
            return false;
        });
    };

    var browserPrefixes = ["webkit", "moz", "ms", "o", ""];

    /*
     Checks prefixes for full screen mode.
     */
    var tryFullScreenPrefix = function(obj, method) {
        var i = 0,
            currentMethod = null,
            type;
        while (i < browserPrefixes.length && !obj[currentMethod]) {
            currentMethod = method;
            if (browserPrefixes[i] === "") {
                currentMethod = currentMethod.substr(0, 1).toLowerCase() + currentMethod.substr(1);
            }
            currentMethod = browserPrefixes[i] + currentMethod;
            type = typeof obj[currentMethod];
            if (type !== "undefined") {
                browserPrefixes = [browserPrefixes[i]];
                return (type === "function" ? obj[currentMethod]() : obj[currentMethod]);
            }
            i++;
        }
    };

    /**
     * Set transition css property for drag
     * translate3d is for better rendering performance
     * see: https://www.html5rocks.com/en/tutorials/speed/layers/
     */
    var moveElementTo = function(el, x, y) {
        var transform = 'translate3d(' + x + 'px,' + y + 'px, 0px)';
        el.style.webkitTransform = transform;
        el.style.mozTransform = transform;
        el.style.msTransform = transform;
        el.style.oTransform = transform;
        el.style.transform = transform;
    };

    /**
     * Get original event object for touch
     * devices to getting current coordinates
     * @param {Object}
     * @return {Object}
     */
    var getOriginalEvent = function(e) {
        return e.targetTouches ? e.targetTouches[0] : e;
    };

    /**
     * Functions for saving left/top anchors and setting class position
     *
     * @param {Object} element  button element
     * @param {Boolean} anchor  anchors positions `true` for top/left or `false` for bottom/right
     */
    var setAnchorPosition = {
        positionY: function(element, anchor) {
            storedAnchor.top = anchor;

            if (storedAnchor.top) {
                $(element).addClass('adguard-assistant-button-top');
                $(element).removeClass('adguard-assistant-button-bottom');
            } else {
                $(element).addClass('adguard-assistant-button-bottom');
                $(element).removeClass('adguard-assistant-button-top');
            }
        },
        positionX: function(element, anchor) {
            storedAnchor.left = anchor;

            if (storedAnchor.left) {
                $(element).addClass('adguard-assistant-button-left');
                $(element).removeClass('adguard-assistant-button-right');
            } else {
                $(element).addClass('adguard-assistant-button-right');
                $(element).removeClass('adguard-assistant-button-left');
            }
        }
    };

    // getting screen width and height without scroll bars
    var getWindowSize = function() {
        return {
            width: Math.min(document.documentElement.clientWidth, window.innerWidth || screen.width),
            height: Math.min(document.documentElement.clientHeight, window.innerHeight || screen.height)
        };
    };

    var checkElementPosition = function(element, pos) {
        windowWidth = getWindowSize().width;
        windowHeight = getWindowSize().height;

        elWidth = element.clientWidth;
        elHeight = element.clientHeight;

        if(outsidePosition.top(pos)) pos.y = windowHeight - 60;
        if(outsidePosition.bottom(pos)) pos.y = - windowHeight + 60;
        if(outsidePosition.left(pos)) pos.x = windowWidth - 60;
        if(outsidePosition.right(pos)) pos.x = - windowWidth + 60;

        moveElementTo(element, pos.x, pos.y);
    };

    var storedAnchor = {
        top: false,
        left: false
    };

    return {
        makeElementDraggable: makeElementDraggable,
        makeIframeDraggable: makeIframeDraggable,
        tryFullScreenPrefix: tryFullScreenPrefix,
        moveElementTo: moveElementTo,
        setAnchorPosition: setAnchorPosition,
        checkElementPosition: checkElementPosition
    };
};

/**
 * Utils that checks environment for compatibility with assistant
 * @param settings
 * @param log
 * @returns {{checkVisibleAreaSize: checkVisibleAreaSize, validateBrowser: validateBrowser, validatePage: validatePage}}
 * @constructor
 */
var UIValidationUtils = function(settings, log) { // jshint ignore:line
    var document = window.document;
    /**
     * Check if visible area are enough to show menu.
     * @returns boolean. True if area enough
     */
    var checkVisibleAreaSize = function() {
        var viewPort = getViewPort();
        var visibleAreaSize = viewPort.height > settings.Constants.MINIMUM_VISIBLE_HEIGHT_TO_SHOW_BUTTON;

        if (!visibleAreaSize) {
            log.error('Viewport height is too small: ' + viewPort.height);
        }

        return visibleAreaSize;
    };

    var getViewPort = function() {
        var viewPortWidth;
        var viewPortHeight;

        viewPortWidth = window.innerWidth;
        viewPortHeight = window.innerHeight;

        return {
            width: viewPortWidth,
            height: viewPortHeight
        };
    };

    /**
     * Checks if browser is valid for Adguard assistant
     * @returns boolean. True if browser valid
     */
    var validateBrowser = function() {
        var valid = !document.documentMode || (document.documentMode > settings.Constants.MINIMUM_IE_SUPPORTED_VERSION);

        if (!valid) {
            log.error('IE version is ' + document.documentMode);
        }

        return valid;
    };

    /**
     * Checks if page is valid for Adguard assistant to work here.
     */
    var validatePage = function() {
        // Assistant do not work in iframes
        if (window.window !== window.top) {
            log.error('Page is iframe: ' + window.location.href);
            return false;
        }

        // Check for necessary html elements existence
        var head = !!document.getElementsByTagName('head').length;
        var body = !!document.getElementsByTagName('body').length;

        if (!head) {
            log.error('head is missing');
        }

        if (!body) {
            log.error('body is missing');
        }

        return head && body;
    };

    return {
        checkVisibleAreaSize: checkVisibleAreaSize,
        validateBrowser: validateBrowser,
        validatePage: validatePage,
        getViewPort: getViewPort
    };
};

/**
 * String utils
 */
var StringUtils = { // jshint ignore:line
    /**
     * Replaces the format items in a specified String with the text equivalents of the values of corresponding object instances.
     * @param format
     */
    format: function (format) {
        for (var i = 1; i < arguments.length; i++) {
            format = format.replace('{' + (i - 1) + '}', arguments[i]);
        }
        return format;
    }
};

/**
 * Common utils
 * @type {{getParentsLevel: Function, getNodeName: Function, getAllChilds: Function, getSingleChildren: Function, cropDomain: Function}}
 */
var CommonUtils = { // jshint ignore:line

    getParentsLevel: function (element) {
        var parent = element;
        var parentArr = [];
        while ((parent = parent.parentNode) && this.getNodeName(parent) !== "BODY") {
            parentArr.push(parent);
        }
        return parentArr;
    },

    getNodeName: function (element) {
        return element && element.nodeName ? element.nodeName.toUpperCase() : "";
    },

    getAllChildren: function (element) {
        var childArray = [];
        var child = element;
        while ((child = this.getSingleChildren(child))) {
            childArray.push(child);
        }
        return childArray;
    },

    getSingleChildren: function (element) {
        var children = element.childNodes;
        if (children) {
            var count = 0;
            var child;
            var i;
            for (i = 0; i < children.length; i++) {
                if (children[i].nodeType === 1) {
                    child = children[i];
                    count++;
                }
            }
            return count === 1 ? child : null;
        }
    },

    cropDomain: function (domain) {
        return domain.replace("www.", "").replace(/:\d+/, '');
    },

    /**
     * Force clear page cache
     * see: https://stackoverflow.com/questions/10719505/force-a-reload-of-page-in-chrome-using-javascript-no-cache/27058362#27058362
     */
    reloadPageBypassCache: function() {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', window.location.href, true);

        xhr.setRequestHeader('Pragma', 'no-cache');
        xhr.setRequestHeader('Expires', -1);
        xhr.setRequestHeader('Cache-Control', 'no-cache');

        xhr.onreadystatechange = function() {
            if (xhr.readyState === 4) {
                window.location.reload(true);
            }
        };

        xhr.send();
    }
};

/**
 * Base64 implementation
 * @type {{_keyStr: string, encode: Base64.encode, decode: Base64.decode, _utf8_encode: Base64._utf8_encode, _utf8_decode: Base64._utf8_decode}}
 */
var Base64 = {
    // private property
    _keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",

    // public method for encoding
    encode: function (input) {
        var output = "";
        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
        var i = 0;

        input = Base64._utf8_encode(input);

        while (i < input.length) {

            chr1 = input.charCodeAt(i++);
            chr2 = input.charCodeAt(i++);
            chr3 = input.charCodeAt(i++);

            // jshint ignore:start
            enc1 = chr1 >> 2;
            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
            enc4 = chr3 & 63;
            // jshint ignore:end

            if (isNaN(chr2)) {
                enc3 = enc4 = 64;
            } else if (isNaN(chr3)) {
                enc4 = 64;
            }

            output = output +
                Base64._keyStr.charAt(enc1) + Base64._keyStr.charAt(enc2) +
                Base64._keyStr.charAt(enc3) + Base64._keyStr.charAt(enc4);

        }

        return output;
    },

    // public method for decoding
    decode: function (input) {
        var output = "";
        var chr1, chr2, chr3;
        var enc1, enc2, enc3, enc4;
        var i = 0;

        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

        while (i < input.length) {

            enc1 = Base64._keyStr.indexOf(input.charAt(i++));
            enc2 = Base64._keyStr.indexOf(input.charAt(i++));
            enc3 = Base64._keyStr.indexOf(input.charAt(i++));
            enc4 = Base64._keyStr.indexOf(input.charAt(i++));

            // jshint ignore:start
            chr1 = (enc1 << 2) | (enc2 >> 4);
            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
            chr3 = ((enc3 & 3) << 6) | enc4;
            // jshint ignore:end

            output = output + String.fromCharCode(chr1);

            if (enc3 !== 64) {
                output = output + String.fromCharCode(chr2);
            }
            if (enc4 !== 64) {
                output = output + String.fromCharCode(chr3);
            }

        }

        output = Base64._utf8_decode(output);

        return output;

    },

    // private method for UTF-8 encoding
    _utf8_encode: function (string) {
        string = string.replace(/\r\n/g, "\n");
        var utftext = "";

        // jshint ignore:start
        for (var n = 0; n < string.length; n++) {

            var c = string.charCodeAt(n);

            if (c < 128) {
                utftext += String.fromCharCode(c);
            } else if ((c > 127) && (c < 2048)) {
                utftext += String.fromCharCode((c >> 6) | 192);
                utftext += String.fromCharCode((c & 63) | 128);
            } else {
                utftext += String.fromCharCode((c >> 12) | 224);
                utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                utftext += String.fromCharCode((c & 63) | 128);
            }
        }
        // jshint ignore:end

        return utftext;
    },

    // private method for UTF-8 decoding
    _utf8_decode: function (utftext) {
        var string = "";
        var i = 0;
        var c = 0;
        var c2 = 0;
        var c3 = 0;

        while (i < utftext.length) {

            c = utftext.charCodeAt(i);

            if (c < 128) {
                string += String.fromCharCode(c);
                i++;
            } else if ((c > 191) && (c < 224)) {
                c2 = utftext.charCodeAt(i + 1);
                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63)); // jshint ignore:line
                i += 2;
            } else {
                c2 = utftext.charCodeAt(i + 1);
                c3 = utftext.charCodeAt(i + 2);
                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63)); // jshint ignore:line
                i += 3;
            }

        }
        return string;
    }
};

/*! http://mths.be/punycode v1.3.0 by @mathias */
var punycode = (function (root) { //We use local variable because we don't want to spoil global scope

    /** Detect free variables */
    var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
    var freeModule = typeof module == 'object' && module && !module.nodeType && module;
    var freeGlobal = typeof global == 'object' && global;
    if (
        freeGlobal.global === freeGlobal ||
        freeGlobal.window === freeGlobal ||
        freeGlobal.self === freeGlobal
    ) {
        root = freeGlobal;
    }

    /**
     * The `punycode` object.
     * @name punycode
     * @type Object
     */
    var punycode,

        /** Highest positive signed 32-bit float value */
        maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

        /** Bootstring parameters */
        base = 36,
        tMin = 1,
        tMax = 26,
        skew = 38,
        damp = 700,
        initialBias = 72,
        initialN = 128, // 0x80
        delimiter = '-', // '\x2D'

        /** Regular expressions */
        regexPunycode = /^xn--/,
        regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
        regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

        /** Error messages */
        errors = {
            'overflow': 'Overflow: input needs wider integers to process',
            'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
            'invalid-input': 'Invalid input'
        },

        /** Convenience shortcuts */
        baseMinusTMin = base - tMin,
        floor = Math.floor,
        stringFromCharCode = String.fromCharCode,

        /** Temporary variable */
        key;

    /*--------------------------------------------------------------------------*/

    /**
     * A generic error utility function.
     * @private
     * @param {String} type The error type.
     * @returns {Error} Throws a `RangeError` with the applicable error message.
     */
    function error(type) {
        throw RangeError(errors[type]);
    }

    /**
     * A generic `Array#map` utility function.
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} callback The function that gets called for every array
     * item.
     * @returns {Array} A new array of values returned by the callback function.
     */
    function map(array, fn) {
        var length = array.length;
        var result = [];
        while (length--) {
            result[length] = fn(array[length]);
        }
        return result;
    }

    /**
     * A simple `Array#map`-like wrapper to work with domain name strings or email
     * addresses.
     * @private
     * @param {String} domain The domain name or email address.
     * @param {Function} callback The function that gets called for every
     * character.
     * @returns {Array} A new string of characters returned by the callback
     * function.
     */
    function mapDomain(string, fn) {
        var labels = string.split(regexSeparators);
        // Note: each label could still contain `@` in the case of an email address.
        return map(labels, function (label) {
            var parts = label.split('@');
            return map(parts, fn).join('@');
        }).join('.');
    }

    /**
     * Creates an array containing the numeric code points of each Unicode
     * character in the string. While JavaScript uses UCS-2 internally,
     * this function will convert a pair of surrogate halves (each of which
     * UCS-2 exposes as separate characters) into a single code point,
     * matching UTF-16.
     * @see `punycode.ucs2.encode`
     * @see <http://mathiasbynens.be/notes/javascript-encoding>
     * @memberOf punycode.ucs2
     * @name decode
     * @param {String} string The Unicode input string (UCS-2).
     * @returns {Array} The new array of code points.
     */
    function ucs2decode(string) {
        var output = [],
            counter = 0,
            length = string.length,
            value,
            extra;
        while (counter < length) {
            value = string.charCodeAt(counter++);
            if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
                // high surrogate, and there is a next character
                extra = string.charCodeAt(counter++);
                if ((extra & 0xFC00) == 0xDC00) { // low surrogate
                    output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
                } else {
                    // unmatched surrogate; only append this code unit, in case the next
                    // code unit is the high surrogate of a surrogate pair
                    output.push(value);
                    counter--;
                }
            } else {
                output.push(value);
            }
        }
        return output;
    }

    /**
     * Creates a string based on an array of numeric code points.
     * @see `punycode.ucs2.decode`
     * @memberOf punycode.ucs2
     * @name encode
     * @param {Array} codePoints The array of numeric code points.
     * @returns {String} The new Unicode string (UCS-2).
     */
    function ucs2encode(array) {
        return map(array, function (value) {
            var output = '';
            if (value > 0xFFFF) {
                value -= 0x10000;
                output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
                value = 0xDC00 | value & 0x3FF;
            }
            output += stringFromCharCode(value);
            return output;
        }).join('');
    }

    /**
     * Converts a basic code point into a digit/integer.
     * @see `digitToBasic()`
     * @private
     * @param {Number} codePoint The basic numeric code point value.
     * @returns {Number} The numeric value of a basic code point (for use in
     * representing integers) in the range `0` to `base - 1`, or `base` if
     * the code point does not represent a value.
     */
    function basicToDigit(codePoint) {
        if (codePoint - 48 < 10) {
            return codePoint - 22;
        }
        if (codePoint - 65 < 26) {
            return codePoint - 65;
        }
        if (codePoint - 97 < 26) {
            return codePoint - 97;
        }
        return base;
    }

    /**
     * Converts a digit/integer into a basic code point.
     * @see `basicToDigit()`
     * @private
     * @param {Number} digit The numeric value of a basic code point.
     * @returns {Number} The basic code point whose value (when used for
     * representing integers) is `digit`, which needs to be in the range
     * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
     * used; else, the lowercase form is used. The behavior is undefined
     * if `flag` is non-zero and `digit` has no uppercase form.
     */
    function digitToBasic(digit, flag) {
        //  0..25 map to ASCII a..z or A..Z
        // 26..35 map to ASCII 0..9
        return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
    }

    /**
     * Bias adaptation function as per section 3.4 of RFC 3492.
     * http://tools.ietf.org/html/rfc3492#section-3.4
     * @private
     */
    function adapt(delta, numPoints, firstTime) {
        var k = 0;
        delta = firstTime ? floor(delta / damp) : delta >> 1;
        delta += floor(delta / numPoints);
        for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
            delta = floor(delta / baseMinusTMin);
        }
        return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
    }

    /**
     * Converts a Punycode string of ASCII-only symbols to a string of Unicode
     * symbols.
     * @memberOf punycode
     * @param {String} input The Punycode string of ASCII-only symbols.
     * @returns {String} The resulting string of Unicode symbols.
     */
    function decode(input) {
        // Don't use UCS-2
        var output = [],
            inputLength = input.length,
            out,
            i = 0,
            n = initialN,
            bias = initialBias,
            basic,
            j,
            index,
            oldi,
            w,
            k,
            digit,
            t,
            /** Cached calculation results */
            baseMinusT;

        // Handle the basic code points: let `basic` be the number of input code
        // points before the last delimiter, or `0` if there is none, then copy
        // the first basic code points to the output.

        basic = input.lastIndexOf(delimiter);
        if (basic < 0) {
            basic = 0;
        }

        for (j = 0; j < basic; ++j) {
            // if it's not a basic code point
            if (input.charCodeAt(j) >= 0x80) {
                error('not-basic');
            }
            output.push(input.charCodeAt(j));
        }

        // Main decoding loop: start just after the last delimiter if any basic code
        // points were copied; start at the beginning otherwise.

        for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

            // `index` is the index of the next character to be consumed.
            // Decode a generalized variable-length integer into `delta`,
            // which gets added to `i`. The overflow checking is easier
            // if we increase `i` as we go, then subtract off its starting
            // value at the end to obtain `delta`.
            for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

                if (index >= inputLength) {
                    error('invalid-input');
                }

                digit = basicToDigit(input.charCodeAt(index++));

                if (digit >= base || digit > floor((maxInt - i) / w)) {
                    error('overflow');
                }

                i += digit * w;
                t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

                if (digit < t) {
                    break;
                }

                baseMinusT = base - t;
                if (w > floor(maxInt / baseMinusT)) {
                    error('overflow');
                }

                w *= baseMinusT;

            }

            out = output.length + 1;
            bias = adapt(i - oldi, out, oldi == 0);

            // `i` was supposed to wrap around from `out` to `0`,
            // incrementing `n` each time, so we'll fix that now:
            if (floor(i / out) > maxInt - n) {
                error('overflow');
            }

            n += floor(i / out);
            i %= out;

            // Insert `n` at position `i` of the output
            output.splice(i++, 0, n);

        }

        return ucs2encode(output);
    }

    /**
     * Converts a string of Unicode symbols (e.g. a domain name label) to a
     * Punycode string of ASCII-only symbols.
     * @memberOf punycode
     * @param {String} input The string of Unicode symbols.
     * @returns {String} The resulting Punycode string of ASCII-only symbols.
     */
    function encode(input) {
        var n,
            delta,
            handledCPCount,
            basicLength,
            bias,
            j,
            m,
            q,
            k,
            t,
            currentValue,
            output = [],
            /** `inputLength` will hold the number of code points in `input`. */
            inputLength,
            /** Cached calculation results */
            handledCPCountPlusOne,
            baseMinusT,
            qMinusT;

        // Convert the input in UCS-2 to Unicode
        input = ucs2decode(input);

        // Cache the length
        inputLength = input.length;

        // Initialize the state
        n = initialN;
        delta = 0;
        bias = initialBias;

        // Handle the basic code points
        for (j = 0; j < inputLength; ++j) {
            currentValue = input[j];
            if (currentValue < 0x80) {
                output.push(stringFromCharCode(currentValue));
            }
        }

        handledCPCount = basicLength = output.length;

        // `handledCPCount` is the number of code points that have been handled;
        // `basicLength` is the number of basic code points.

        // Finish the basic string - if it is not empty - with a delimiter
        if (basicLength) {
            output.push(delimiter);
        }

        // Main encoding loop:
        while (handledCPCount < inputLength) {

            // All non-basic code points < n have been handled already. Find the next
            // larger one:
            for (m = maxInt, j = 0; j < inputLength; ++j) {
                currentValue = input[j];
                if (currentValue >= n && currentValue < m) {
                    m = currentValue;
                }
            }

            // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
            // but guard against overflow
            handledCPCountPlusOne = handledCPCount + 1;
            if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
                error('overflow');
            }

            delta += (m - n) * handledCPCountPlusOne;
            n = m;

            for (j = 0; j < inputLength; ++j) {
                currentValue = input[j];

                if (currentValue < n && ++delta > maxInt) {
                    error('overflow');
                }

                if (currentValue == n) {
                    // Represent delta as a generalized variable-length integer
                    for (q = delta, k = base; /* no condition */; k += base) {
                        t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
                        if (q < t) {
                            break;
                        }
                        qMinusT = q - t;
                        baseMinusT = base - t;
                        output.push(
                            stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
                        );
                        q = floor(qMinusT / baseMinusT);
                    }

                    output.push(stringFromCharCode(digitToBasic(q, 0)));
                    bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                    delta = 0;
                    ++handledCPCount;
                }
            }

            ++delta;
            ++n;

        }
        return output.join('');
    }

    /**
     * Converts a Punycode string representing a domain name or an email address
     * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
     * it doesn't matter if you call it on a string that has already been
     * converted to Unicode.
     * @memberOf punycode
     * @param {String} input The Punycoded domain name or email address to
     * convert to Unicode.
     * @returns {String} The Unicode representation of the given Punycode
     * string.
     */
    function toUnicode(input) {
        return mapDomain(input, function (string) {
            return regexPunycode.test(string)
                ? decode(string.slice(4).toLowerCase())
                : string;
        });
    }

    /**
     * Converts a Unicode string representing a domain name or an email address to
     * Punycode. Only the non-ASCII parts of the domain name will be converted,
     * i.e. it doesn't matter if you call it with a domain that's already in
     * ASCII.
     * @memberOf punycode
     * @param {String} input The domain name or email address to convert, as a
     * Unicode string.
     * @returns {String} The Punycode representation of the given domain name or
     * email address.
     */
    function toASCII(input) {
        return mapDomain(input, function (string) {
            return regexNonASCII.test(string)
                ? 'xn--' + encode(string)
                : string;
        });
    }

    /*--------------------------------------------------------------------------*/

    /** Define the public API */
    punycode = {
        /**
         * A string representing the current Punycode.js version number.
         * @memberOf punycode
         * @type String
         */
        'version': '1.3.0',
        /**
         * An object of methods to convert from JavaScript's internal character
         * representation (UCS-2) to Unicode code points, and back.
         * @see <http://mathiasbynens.be/notes/javascript-encoding>
         * @memberOf punycode
         * @type Object
         */
        'ucs2': {
            'decode': ucs2decode,
            'encode': ucs2encode
        },
        'decode': decode,
        'encode': encode,
        'toASCII': toASCII,
        'toUnicode': toUnicode
    };

    /** Expose `punycode` */
    // Some AMD build optimizers, like r.js, check for specific condition patterns
    // like the following:
    // if (typeof exports !== 'undefined') {
    //     exports.punycode = punycode;
    // } else if (
    //     typeof define == 'function' &&
    //     typeof define.amd == 'object' &&
    //     define.amd
    // ) {
    //     define('punycode', function () {
    //         return punycode;
    //     });
    // } else if (freeExports && freeModule) {
    //     if (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+
    //         freeModule.exports = punycode;
    //     } else { // in Narwhal or RingoJS v0.7.0-
    //         for (key in punycode) {
    //             punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
    //         }
    //     }
    // } else { // in Rhino or a web browser
    //     root.punycode = punycode;
    // }
    return punycode;

}(this));
/**
 * Custom event
 * @returns {{attach: attach, notify: notify}}
 * @constructor
 */
var CustomEvent = function () { // jshint ignore:line
    var listeners = [];

    var attach = function (listener) {
        listeners.push(listener);
    };

    var notify = function (args) {
        for (var i = 0; i < listeners.length; i++) {
            listeners[i](args);
        }
    };

    return {
        attach: attach,
        notify: notify
    };
};

/**
 * Diff Match and Patch
 *
 * Copyright 2006 Google Inc.
 * http://code.google.com/p/google-diff-match-patch/
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @fileoverview Computes the difference between two texts to create a patch.
 * Applies the patch onto another text, allowing for errors.
 * @author fraser@google.com (Neil Fraser)
 */

/**
 * Class containing the diff, match and patch methods.
 * @constructor
 */
function diff_match_patch() {

    // Defaults.
    // Redefine these in your program to override the defaults.

    // Number of seconds to map a diff before giving up (0 for infinity).
    this.Diff_Timeout = 1.0;
    // Cost of an empty edit operation in terms of edit characters.
    this.Diff_EditCost = 4;
    // At what point is no match declared (0.0 = perfection, 1.0 = very loose).
    this.Match_Threshold = 0.5;
    // How far to search for a match (0 = exact location, 1000+ = broad match).
    // A match this many characters away from the expected location will add
    // 1.0 to the score (0.0 is a perfect match).
    this.Match_Distance = 1000;
    // When deleting a large block of text (over ~64 characters), how close do
    // the contents have to be to match the expected contents. (0.0 = perfection,
    // 1.0 = very loose).  Note that Match_Threshold controls how closely the
    // end points of a delete need to match.
    this.Patch_DeleteThreshold = 0.5;
    // Chunk size for context length.
    this.Patch_Margin = 4;

    // The number of bits in an int.
    this.Match_MaxBits = 32;
}


//  DIFF FUNCTIONS


/**
 * The data structure representing a diff is an array of tuples:
 * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]
 * which means: delete 'Hello', add 'Goodbye' and keep ' world.'
 */
var DIFF_DELETE = -1;
var DIFF_INSERT = 1;
var DIFF_EQUAL = 0;

/** @typedef {{0: number, 1: string}} */
diff_match_patch.Diff;


/**
 * Find the differences between two texts.  Simplifies the problem by stripping
 * any common prefix or suffix off the texts before diffing.
 * @param {string} text1 Old string to be diffed.
 * @param {string} text2 New string to be diffed.
 * @param {boolean=} opt_checklines Optional speedup flag. If present and false,
 *     then don't run a line-level diff first to identify the changed areas.
 *     Defaults to true, which does a faster, slightly less optimal diff.
 * @param {number} opt_deadline Optional time when the diff should be complete
 *     by.  Used internally for recursive calls.  Users should set DiffTimeout
 *     instead.
 * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.
 */
diff_match_patch.prototype.diff_main = function(text1, text2, opt_checklines,
                                                opt_deadline) {
    // Set a deadline by which time the diff must be complete.
    if (typeof opt_deadline == 'undefined') {
        if (this.Diff_Timeout <= 0) {
            opt_deadline = Number.MAX_VALUE;
        } else {
            opt_deadline = (new Date).getTime() + this.Diff_Timeout * 1000;
        }
    }
    var deadline = opt_deadline;

    // Check for null inputs.
    if (text1 == null || text2 == null) {
        throw new Error('Null input. (diff_main)');
    }

    // Check for equality (speedup).
    if (text1 == text2) {
        if (text1) {
            return [[DIFF_EQUAL, text1]];
        }
        return [];
    }

    if (typeof opt_checklines == 'undefined') {
        opt_checklines = true;
    }
    var checklines = opt_checklines;

    // Trim off common prefix (speedup).
    var commonlength = this.diff_commonPrefix(text1, text2);
    var commonprefix = text1.substring(0, commonlength);
    text1 = text1.substring(commonlength);
    text2 = text2.substring(commonlength);

    // Trim off common suffix (speedup).
    commonlength = this.diff_commonSuffix(text1, text2);
    var commonsuffix = text1.substring(text1.length - commonlength);
    text1 = text1.substring(0, text1.length - commonlength);
    text2 = text2.substring(0, text2.length - commonlength);

    // Compute the diff on the middle block.
    var diffs = this.diff_compute_(text1, text2, checklines, deadline);

    // Restore the prefix and suffix.
    if (commonprefix) {
        diffs.unshift([DIFF_EQUAL, commonprefix]);
    }
    if (commonsuffix) {
        diffs.push([DIFF_EQUAL, commonsuffix]);
    }
    this.diff_cleanupMerge(diffs);
    return diffs;
};


/**
 * Find the differences between two texts.  Assumes that the texts do not
 * have any common prefix or suffix.
 * @param {string} text1 Old string to be diffed.
 * @param {string} text2 New string to be diffed.
 * @param {boolean} checklines Speedup flag.  If false, then don't run a
 *     line-level diff first to identify the changed areas.
 *     If true, then run a faster, slightly less optimal diff.
 * @param {number} deadline Time when the diff should be complete by.
 * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.
 * @private
 */
diff_match_patch.prototype.diff_compute_ = function(text1, text2, checklines,
                                                    deadline) {
    var diffs;

    if (!text1) {
        // Just add some text (speedup).
        return [[DIFF_INSERT, text2]];
    }

    if (!text2) {
        // Just delete some text (speedup).
        return [[DIFF_DELETE, text1]];
    }

    var longtext = text1.length > text2.length ? text1 : text2;
    var shorttext = text1.length > text2.length ? text2 : text1;
    var i = longtext.indexOf(shorttext);
    if (i != -1) {
        // Shorter text is inside the longer text (speedup).
        diffs = [[DIFF_INSERT, longtext.substring(0, i)],
            [DIFF_EQUAL, shorttext],
            [DIFF_INSERT, longtext.substring(i + shorttext.length)]];
        // Swap insertions for deletions if diff is reversed.
        if (text1.length > text2.length) {
            diffs[0][0] = diffs[2][0] = DIFF_DELETE;
        }
        return diffs;
    }

    if (shorttext.length == 1) {
        // Single character string.
        // After the previous speedup, the character can't be an equality.
        return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
    }

    // Check to see if the problem can be split in two.
    var hm = this.diff_halfMatch_(text1, text2);
    if (hm) {
        // A half-match was found, sort out the return data.
        var text1_a = hm[0];
        var text1_b = hm[1];
        var text2_a = hm[2];
        var text2_b = hm[3];
        var mid_common = hm[4];
        // Send both pairs off for separate processing.
        var diffs_a = this.diff_main(text1_a, text2_a, checklines, deadline);
        var diffs_b = this.diff_main(text1_b, text2_b, checklines, deadline);
        // Merge the results.
        return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);
    }

    if (checklines && text1.length > 100 && text2.length > 100) {
        return this.diff_lineMode_(text1, text2, deadline);
    }

    return this.diff_bisect_(text1, text2, deadline);
};


/**
 * Do a quick line-level diff on both strings, then rediff the parts for
 * greater accuracy.
 * This speedup can produce non-minimal diffs.
 * @param {string} text1 Old string to be diffed.
 * @param {string} text2 New string to be diffed.
 * @param {number} deadline Time when the diff should be complete by.
 * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.
 * @private
 */
diff_match_patch.prototype.diff_lineMode_ = function(text1, text2, deadline) {
    // Scan the text on a line-by-line basis first.
    var a = this.diff_linesToChars_(text1, text2);
    text1 = a.chars1;
    text2 = a.chars2;
    var linearray = a.lineArray;

    var diffs = this.diff_main(text1, text2, false, deadline);

    // Convert the diff back to original text.
    this.diff_charsToLines_(diffs, linearray);
    // Eliminate freak matches (e.g. blank lines)
    this.diff_cleanupSemantic(diffs);

    // Rediff any replacement blocks, this time character-by-character.
    // Add a dummy entry at the end.
    diffs.push([DIFF_EQUAL, '']);
    var pointer = 0;
    var count_delete = 0;
    var count_insert = 0;
    var text_delete = '';
    var text_insert = '';
    while (pointer < diffs.length) {
        switch (diffs[pointer][0]) {
            case DIFF_INSERT:
                count_insert++;
                text_insert += diffs[pointer][1];
                break;
            case DIFF_DELETE:
                count_delete++;
                text_delete += diffs[pointer][1];
                break;
            case DIFF_EQUAL:
                // Upon reaching an equality, check for prior redundancies.
                if (count_delete >= 1 && count_insert >= 1) {
                    // Delete the offending records and add the merged ones.
                    diffs.splice(pointer - count_delete - count_insert,
                        count_delete + count_insert);
                    pointer = pointer - count_delete - count_insert;
                    var a = this.diff_main(text_delete, text_insert, false, deadline);
                    for (var j = a.length - 1; j >= 0; j--) {
                        diffs.splice(pointer, 0, a[j]);
                    }
                    pointer = pointer + a.length;
                }
                count_insert = 0;
                count_delete = 0;
                text_delete = '';
                text_insert = '';
                break;
        }
        pointer++;
    }
    diffs.pop();  // Remove the dummy entry at the end.

    return diffs;
};


/**
 * Find the 'middle snake' of a diff, split the problem in two
 * and return the recursively constructed diff.
 * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.
 * @param {string} text1 Old string to be diffed.
 * @param {string} text2 New string to be diffed.
 * @param {number} deadline Time at which to bail if not yet complete.
 * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.
 * @private
 */
diff_match_patch.prototype.diff_bisect_ = function(text1, text2, deadline) {
    // Cache the text lengths to prevent multiple calls.
    var text1_length = text1.length;
    var text2_length = text2.length;
    var max_d = Math.ceil((text1_length + text2_length) / 2);
    var v_offset = max_d;
    var v_length = 2 * max_d;
    var v1 = new Array(v_length);
    var v2 = new Array(v_length);
    // Setting all elements to -1 is faster in Chrome & Firefox than mixing
    // integers and undefined.
    for (var x = 0; x < v_length; x++) {
        v1[x] = -1;
        v2[x] = -1;
    }
    v1[v_offset + 1] = 0;
    v2[v_offset + 1] = 0;
    var delta = text1_length - text2_length;
    // If the total number of characters is odd, then the front path will collide
    // with the reverse path.
    var front = (delta % 2 != 0);
    // Offsets for start and end of k loop.
    // Prevents mapping of space beyond the grid.
    var k1start = 0;
    var k1end = 0;
    var k2start = 0;
    var k2end = 0;
    for (var d = 0; d < max_d; d++) {
        // Bail out if deadline is reached.
        if ((new Date()).getTime() > deadline) {
            break;
        }

        // Walk the front path one step.
        for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {
            var k1_offset = v_offset + k1;
            var x1;
            if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {
                x1 = v1[k1_offset + 1];
            } else {
                x1 = v1[k1_offset - 1] + 1;
            }
            var y1 = x1 - k1;
            while (x1 < text1_length && y1 < text2_length &&
            text1.charAt(x1) == text2.charAt(y1)) {
                x1++;
                y1++;
            }
            v1[k1_offset] = x1;
            if (x1 > text1_length) {
                // Ran off the right of the graph.
                k1end += 2;
            } else if (y1 > text2_length) {
                // Ran off the bottom of the graph.
                k1start += 2;
            } else if (front) {
                var k2_offset = v_offset + delta - k1;
                if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {
                    // Mirror x2 onto top-left coordinate system.
                    var x2 = text1_length - v2[k2_offset];
                    if (x1 >= x2) {
                        // Overlap detected.
                        return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);
                    }
                }
            }
        }

        // Walk the reverse path one step.
        for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {
            var k2_offset = v_offset + k2;
            var x2;
            if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {
                x2 = v2[k2_offset + 1];
            } else {
                x2 = v2[k2_offset - 1] + 1;
            }
            var y2 = x2 - k2;
            while (x2 < text1_length && y2 < text2_length &&
            text1.charAt(text1_length - x2 - 1) ==
            text2.charAt(text2_length - y2 - 1)) {
                x2++;
                y2++;
            }
            v2[k2_offset] = x2;
            if (x2 > text1_length) {
                // Ran off the left of the graph.
                k2end += 2;
            } else if (y2 > text2_length) {
                // Ran off the top of the graph.
                k2start += 2;
            } else if (!front) {
                var k1_offset = v_offset + delta - k2;
                if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {
                    var x1 = v1[k1_offset];
                    var y1 = v_offset + x1 - k1_offset;
                    // Mirror x2 onto top-left coordinate system.
                    x2 = text1_length - x2;
                    if (x1 >= x2) {
                        // Overlap detected.
                        return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);
                    }
                }
            }
        }
    }
    // Diff took too long and hit the deadline or
    // number of diffs equals number of characters, no commonality at all.
    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
};


/**
 * Given the location of the 'middle snake', split the diff in two parts
 * and recurse.
 * @param {string} text1 Old string to be diffed.
 * @param {string} text2 New string to be diffed.
 * @param {number} x Index of split point in text1.
 * @param {number} y Index of split point in text2.
 * @param {number} deadline Time at which to bail if not yet complete.
 * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.
 * @private
 */
diff_match_patch.prototype.diff_bisectSplit_ = function(text1, text2, x, y,
                                                        deadline) {
    var text1a = text1.substring(0, x);
    var text2a = text2.substring(0, y);
    var text1b = text1.substring(x);
    var text2b = text2.substring(y);

    // Compute both diffs serially.
    var diffs = this.diff_main(text1a, text2a, false, deadline);
    var diffsb = this.diff_main(text1b, text2b, false, deadline);

    return diffs.concat(diffsb);
};


/**
 * Split two texts into an array of strings.  Reduce the texts to a string of
 * hashes where each Unicode character represents one line.
 * @param {string} text1 First string.
 * @param {string} text2 Second string.
 * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}
 *     An object containing the encoded text1, the encoded text2 and
 *     the array of unique strings.
 *     The zeroth element of the array of unique strings is intentionally blank.
 * @private
 */
diff_match_patch.prototype.diff_linesToChars_ = function(text1, text2) {
    var lineArray = [];  // e.g. lineArray[4] == 'Hello\n'
    var lineHash = {};   // e.g. lineHash['Hello\n'] == 4

    // '\x00' is a valid character, but various debuggers don't like it.
    // So we'll insert a junk entry to avoid generating a null character.
    lineArray[0] = '';

    /**
     * Split a text into an array of strings.  Reduce the texts to a string of
     * hashes where each Unicode character represents one line.
     * Modifies linearray and linehash through being a closure.
     * @param {string} text String to encode.
     * @return {string} Encoded string.
     * @private
     */
    function diff_linesToCharsMunge_(text) {
        var chars = '';
        // Walk the text, pulling out a substring for each line.
        // text.split('\n') would would temporarily double our memory footprint.
        // Modifying text would create many large strings to garbage collect.
        var lineStart = 0;
        var lineEnd = -1;
        // Keeping our own length variable is faster than looking it up.
        var lineArrayLength = lineArray.length;
        while (lineEnd < text.length - 1) {
            lineEnd = text.indexOf('\n', lineStart);
            if (lineEnd == -1) {
                lineEnd = text.length - 1;
            }
            var line = text.substring(lineStart, lineEnd + 1);
            lineStart = lineEnd + 1;

            if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) :
                    (lineHash[line] !== undefined)) {
                chars += String.fromCharCode(lineHash[line]);
            } else {
                chars += String.fromCharCode(lineArrayLength);
                lineHash[line] = lineArrayLength;
                lineArray[lineArrayLength++] = line;
            }
        }
        return chars;
    }

    var chars1 = diff_linesToCharsMunge_(text1);
    var chars2 = diff_linesToCharsMunge_(text2);
    return {chars1: chars1, chars2: chars2, lineArray: lineArray};
};


/**
 * Rehydrate the text in a diff from a string of line hashes to real lines of
 * text.
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 * @param {!Array.<string>} lineArray Array of unique strings.
 * @private
 */
diff_match_patch.prototype.diff_charsToLines_ = function(diffs, lineArray) {
    for (var x = 0; x < diffs.length; x++) {
        var chars = diffs[x][1];
        var text = [];
        for (var y = 0; y < chars.length; y++) {
            text[y] = lineArray[chars.charCodeAt(y)];
        }
        diffs[x][1] = text.join('');
    }
};


/**
 * Determine the common prefix of two strings.
 * @param {string} text1 First string.
 * @param {string} text2 Second string.
 * @return {number} The number of characters common to the start of each
 *     string.
 */
diff_match_patch.prototype.diff_commonPrefix = function(text1, text2) {
    // Quick check for common null cases.
    if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {
        return 0;
    }
    // Binary search.
    // Performance analysis: http://neil.fraser.name/news/2007/10/09/
    var pointermin = 0;
    var pointermax = Math.min(text1.length, text2.length);
    var pointermid = pointermax;
    var pointerstart = 0;
    while (pointermin < pointermid) {
        if (text1.substring(pointerstart, pointermid) ==
            text2.substring(pointerstart, pointermid)) {
            pointermin = pointermid;
            pointerstart = pointermin;
        } else {
            pointermax = pointermid;
        }
        pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
    }
    return pointermid;
};


/**
 * Determine the common suffix of two strings.
 * @param {string} text1 First string.
 * @param {string} text2 Second string.
 * @return {number} The number of characters common to the end of each string.
 */
diff_match_patch.prototype.diff_commonSuffix = function(text1, text2) {
    // Quick check for common null cases.
    if (!text1 || !text2 ||
        text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {
        return 0;
    }
    // Binary search.
    // Performance analysis: http://neil.fraser.name/news/2007/10/09/
    var pointermin = 0;
    var pointermax = Math.min(text1.length, text2.length);
    var pointermid = pointermax;
    var pointerend = 0;
    while (pointermin < pointermid) {
        if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==
            text2.substring(text2.length - pointermid, text2.length - pointerend)) {
            pointermin = pointermid;
            pointerend = pointermin;
        } else {
            pointermax = pointermid;
        }
        pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
    }
    return pointermid;
};


/**
 * Determine if the suffix of one string is the prefix of another.
 * @param {string} text1 First string.
 * @param {string} text2 Second string.
 * @return {number} The number of characters common to the end of the first
 *     string and the start of the second string.
 * @private
 */
diff_match_patch.prototype.diff_commonOverlap_ = function(text1, text2) {
    // Cache the text lengths to prevent multiple calls.
    var text1_length = text1.length;
    var text2_length = text2.length;
    // Eliminate the null case.
    if (text1_length == 0 || text2_length == 0) {
        return 0;
    }
    // Truncate the longer string.
    if (text1_length > text2_length) {
        text1 = text1.substring(text1_length - text2_length);
    } else if (text1_length < text2_length) {
        text2 = text2.substring(0, text1_length);
    }
    var text_length = Math.min(text1_length, text2_length);
    // Quick check for the worst case.
    if (text1 == text2) {
        return text_length;
    }

    // Start by looking for a single character match
    // and increase length until no match is found.
    // Performance analysis: http://neil.fraser.name/news/2010/11/04/
    var best = 0;
    var length = 1;
    while (true) {
        var pattern = text1.substring(text_length - length);
        var found = text2.indexOf(pattern);
        if (found == -1) {
            return best;
        }
        length += found;
        if (found == 0 || text1.substring(text_length - length) ==
            text2.substring(0, length)) {
            best = length;
            length++;
        }
    }
};


/**
 * Do the two texts share a substring which is at least half the length of the
 * longer text?
 * This speedup can produce non-minimal diffs.
 * @param {string} text1 First string.
 * @param {string} text2 Second string.
 * @return {Array.<string>} Five element Array, containing the prefix of
 *     text1, the suffix of text1, the prefix of text2, the suffix of
 *     text2 and the common middle.  Or null if there was no match.
 * @private
 */
diff_match_patch.prototype.diff_halfMatch_ = function(text1, text2) {
    if (this.Diff_Timeout <= 0) {
        // Don't risk returning a non-optimal diff if we have unlimited time.
        return null;
    }
    var longtext = text1.length > text2.length ? text1 : text2;
    var shorttext = text1.length > text2.length ? text2 : text1;
    if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {
        return null;  // Pointless.
    }
    var dmp = this;  // 'this' becomes 'window' in a closure.

    /**
     * Does a substring of shorttext exist within longtext such that the substring
     * is at least half the length of longtext?
     * Closure, but does not reference any external variables.
     * @param {string} longtext Longer string.
     * @param {string} shorttext Shorter string.
     * @param {number} i Start index of quarter length substring within longtext.
     * @return {Array.<string>} Five element Array, containing the prefix of
     *     longtext, the suffix of longtext, the prefix of shorttext, the suffix
     *     of shorttext and the common middle.  Or null if there was no match.
     * @private
     */
    function diff_halfMatchI_(longtext, shorttext, i) {
        // Start with a 1/4 length substring at position i as a seed.
        var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));
        var j = -1;
        var best_common = '';
        var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;
        while ((j = shorttext.indexOf(seed, j + 1)) != -1) {
            var prefixLength = dmp.diff_commonPrefix(longtext.substring(i),
                shorttext.substring(j));
            var suffixLength = dmp.diff_commonSuffix(longtext.substring(0, i),
                shorttext.substring(0, j));
            if (best_common.length < suffixLength + prefixLength) {
                best_common = shorttext.substring(j - suffixLength, j) +
                    shorttext.substring(j, j + prefixLength);
                best_longtext_a = longtext.substring(0, i - suffixLength);
                best_longtext_b = longtext.substring(i + prefixLength);
                best_shorttext_a = shorttext.substring(0, j - suffixLength);
                best_shorttext_b = shorttext.substring(j + prefixLength);
            }
        }
        if (best_common.length * 2 >= longtext.length) {
            return [best_longtext_a, best_longtext_b,
                best_shorttext_a, best_shorttext_b, best_common];
        } else {
            return null;
        }
    }

    // First check if the second quarter is the seed for a half-match.
    var hm1 = diff_halfMatchI_(longtext, shorttext,
        Math.ceil(longtext.length / 4));
    // Check again based on the third quarter.
    var hm2 = diff_halfMatchI_(longtext, shorttext,
        Math.ceil(longtext.length / 2));
    var hm;
    if (!hm1 && !hm2) {
        return null;
    } else if (!hm2) {
        hm = hm1;
    } else if (!hm1) {
        hm = hm2;
    } else {
        // Both matched.  Select the longest.
        hm = hm1[4].length > hm2[4].length ? hm1 : hm2;
    }

    // A half-match was found, sort out the return data.
    var text1_a, text1_b, text2_a, text2_b;
    if (text1.length > text2.length) {
        text1_a = hm[0];
        text1_b = hm[1];
        text2_a = hm[2];
        text2_b = hm[3];
    } else {
        text2_a = hm[0];
        text2_b = hm[1];
        text1_a = hm[2];
        text1_b = hm[3];
    }
    var mid_common = hm[4];
    return [text1_a, text1_b, text2_a, text2_b, mid_common];
};


/**
 * Reduce the number of edits by eliminating semantically trivial equalities.
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 */
diff_match_patch.prototype.diff_cleanupSemantic = function(diffs) {
    var changes = false;
    var equalities = [];  // Stack of indices where equalities are found.
    var equalitiesLength = 0;  // Keeping our own length var is faster in JS.
    /** @type {?string} */
    var lastequality = null;
    // Always equal to diffs[equalities[equalitiesLength - 1]][1]
    var pointer = 0;  // Index of current position.
    // Number of characters that changed prior to the equality.
    var length_insertions1 = 0;
    var length_deletions1 = 0;
    // Number of characters that changed after the equality.
    var length_insertions2 = 0;
    var length_deletions2 = 0;
    while (pointer < diffs.length) {
        if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.
            equalities[equalitiesLength++] = pointer;
            length_insertions1 = length_insertions2;
            length_deletions1 = length_deletions2;
            length_insertions2 = 0;
            length_deletions2 = 0;
            lastequality = diffs[pointer][1];
        } else {  // An insertion or deletion.
            if (diffs[pointer][0] == DIFF_INSERT) {
                length_insertions2 += diffs[pointer][1].length;
            } else {
                length_deletions2 += diffs[pointer][1].length;
            }
            // Eliminate an equality that is smaller or equal to the edits on both
            // sides of it.
            if (lastequality && (lastequality.length <=
                Math.max(length_insertions1, length_deletions1)) &&
                (lastequality.length <= Math.max(length_insertions2,
                    length_deletions2))) {
                // Duplicate record.
                diffs.splice(equalities[equalitiesLength - 1], 0,
                    [DIFF_DELETE, lastequality]);
                // Change second copy to insert.
                diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;
                // Throw away the equality we just deleted.
                equalitiesLength--;
                // Throw away the previous equality (it needs to be reevaluated).
                equalitiesLength--;
                pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;
                length_insertions1 = 0;  // Reset the counters.
                length_deletions1 = 0;
                length_insertions2 = 0;
                length_deletions2 = 0;
                lastequality = null;
                changes = true;
            }
        }
        pointer++;
    }

    // Normalize the diff.
    if (changes) {
        this.diff_cleanupMerge(diffs);
    }
    this.diff_cleanupSemanticLossless(diffs);

    // Find any overlaps between deletions and insertions.
    // e.g: <del>abcxxx</del><ins>xxxdef</ins>
    //   -> <del>abc</del>xxx<ins>def</ins>
    // e.g: <del>xxxabc</del><ins>defxxx</ins>
    //   -> <ins>def</ins>xxx<del>abc</del>
    // Only extract an overlap if it is as big as the edit ahead or behind it.
    pointer = 1;
    while (pointer < diffs.length) {
        if (diffs[pointer - 1][0] == DIFF_DELETE &&
            diffs[pointer][0] == DIFF_INSERT) {
            var deletion = diffs[pointer - 1][1];
            var insertion = diffs[pointer][1];
            var overlap_length1 = this.diff_commonOverlap_(deletion, insertion);
            var overlap_length2 = this.diff_commonOverlap_(insertion, deletion);
            if (overlap_length1 >= overlap_length2) {
                if (overlap_length1 >= deletion.length / 2 ||
                    overlap_length1 >= insertion.length / 2) {
                    // Overlap found.  Insert an equality and trim the surrounding edits.
                    diffs.splice(pointer, 0,
                        [DIFF_EQUAL, insertion.substring(0, overlap_length1)]);
                    diffs[pointer - 1][1] =
                        deletion.substring(0, deletion.length - overlap_length1);
                    diffs[pointer + 1][1] = insertion.substring(overlap_length1);
                    pointer++;
                }
            } else {
                if (overlap_length2 >= deletion.length / 2 ||
                    overlap_length2 >= insertion.length / 2) {
                    // Reverse overlap found.
                    // Insert an equality and swap and trim the surrounding edits.
                    diffs.splice(pointer, 0,
                        [DIFF_EQUAL, deletion.substring(0, overlap_length2)]);
                    diffs[pointer - 1][0] = DIFF_INSERT;
                    diffs[pointer - 1][1] =
                        insertion.substring(0, insertion.length - overlap_length2);
                    diffs[pointer + 1][0] = DIFF_DELETE;
                    diffs[pointer + 1][1] =
                        deletion.substring(overlap_length2);
                    pointer++;
                }
            }
            pointer++;
        }
        pointer++;
    }
};


/**
 * Look for single edits surrounded on both sides by equalities
 * which can be shifted sideways to align the edit to a word boundary.
 * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 */
diff_match_patch.prototype.diff_cleanupSemanticLossless = function(diffs) {
    /**
     * Given two strings, compute a score representing whether the internal
     * boundary falls on logical boundaries.
     * Scores range from 6 (best) to 0 (worst).
     * Closure, but does not reference any external variables.
     * @param {string} one First string.
     * @param {string} two Second string.
     * @return {number} The score.
     * @private
     */
    function diff_cleanupSemanticScore_(one, two) {
        if (!one || !two) {
            // Edges are the best.
            return 6;
        }

        // Each port of this function behaves slightly differently due to
        // subtle differences in each language's definition of things like
        // 'whitespace'.  Since this function's purpose is largely cosmetic,
        // the choice has been made to use each language's native features
        // rather than force total conformity.
        var char1 = one.charAt(one.length - 1);
        var char2 = two.charAt(0);
        var nonAlphaNumeric1 = char1.match(diff_match_patch.nonAlphaNumericRegex_);
        var nonAlphaNumeric2 = char2.match(diff_match_patch.nonAlphaNumericRegex_);
        var whitespace1 = nonAlphaNumeric1 &&
            char1.match(diff_match_patch.whitespaceRegex_);
        var whitespace2 = nonAlphaNumeric2 &&
            char2.match(diff_match_patch.whitespaceRegex_);
        var lineBreak1 = whitespace1 &&
            char1.match(diff_match_patch.linebreakRegex_);
        var lineBreak2 = whitespace2 &&
            char2.match(diff_match_patch.linebreakRegex_);
        var blankLine1 = lineBreak1 &&
            one.match(diff_match_patch.blanklineEndRegex_);
        var blankLine2 = lineBreak2 &&
            two.match(diff_match_patch.blanklineStartRegex_);

        if (blankLine1 || blankLine2) {
            // Five points for blank lines.
            return 5;
        } else if (lineBreak1 || lineBreak2) {
            // Four points for line breaks.
            return 4;
        } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {
            // Three points for end of sentences.
            return 3;
        } else if (whitespace1 || whitespace2) {
            // Two points for whitespace.
            return 2;
        } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {
            // One point for non-alphanumeric.
            return 1;
        }
        return 0;
    }

    var pointer = 1;
    // Intentionally ignore the first and last element (don't need checking).
    while (pointer < diffs.length - 1) {
        if (diffs[pointer - 1][0] == DIFF_EQUAL &&
            diffs[pointer + 1][0] == DIFF_EQUAL) {
            // This is a single edit surrounded by equalities.
            var equality1 = diffs[pointer - 1][1];
            var edit = diffs[pointer][1];
            var equality2 = diffs[pointer + 1][1];

            // First, shift the edit as far left as possible.
            var commonOffset = this.diff_commonSuffix(equality1, edit);
            if (commonOffset) {
                var commonString = edit.substring(edit.length - commonOffset);
                equality1 = equality1.substring(0, equality1.length - commonOffset);
                edit = commonString + edit.substring(0, edit.length - commonOffset);
                equality2 = commonString + equality2;
            }

            // Second, step character by character right, looking for the best fit.
            var bestEquality1 = equality1;
            var bestEdit = edit;
            var bestEquality2 = equality2;
            var bestScore = diff_cleanupSemanticScore_(equality1, edit) +
                diff_cleanupSemanticScore_(edit, equality2);
            while (edit.charAt(0) === equality2.charAt(0)) {
                equality1 += edit.charAt(0);
                edit = edit.substring(1) + equality2.charAt(0);
                equality2 = equality2.substring(1);
                var score = diff_cleanupSemanticScore_(equality1, edit) +
                    diff_cleanupSemanticScore_(edit, equality2);
                // The >= encourages trailing rather than leading whitespace on edits.
                if (score >= bestScore) {
                    bestScore = score;
                    bestEquality1 = equality1;
                    bestEdit = edit;
                    bestEquality2 = equality2;
                }
            }

            if (diffs[pointer - 1][1] != bestEquality1) {
                // We have an improvement, save it back to the diff.
                if (bestEquality1) {
                    diffs[pointer - 1][1] = bestEquality1;
                } else {
                    diffs.splice(pointer - 1, 1);
                    pointer--;
                }
                diffs[pointer][1] = bestEdit;
                if (bestEquality2) {
                    diffs[pointer + 1][1] = bestEquality2;
                } else {
                    diffs.splice(pointer + 1, 1);
                    pointer--;
                }
            }
        }
        pointer++;
    }
};

// Define some regex patterns for matching boundaries.
diff_match_patch.nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;
diff_match_patch.whitespaceRegex_ = /\s/;
diff_match_patch.linebreakRegex_ = /[\r\n]/;
diff_match_patch.blanklineEndRegex_ = /\n\r?\n$/;
diff_match_patch.blanklineStartRegex_ = /^\r?\n\r?\n/;

/**
 * Reduce the number of edits by eliminating operationally trivial equalities.
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 */
diff_match_patch.prototype.diff_cleanupEfficiency = function(diffs) {
    var changes = false;
    var equalities = [];  // Stack of indices where equalities are found.
    var equalitiesLength = 0;  // Keeping our own length var is faster in JS.
    /** @type {?string} */
    var lastequality = null;
    // Always equal to diffs[equalities[equalitiesLength - 1]][1]
    var pointer = 0;  // Index of current position.
    // Is there an insertion operation before the last equality.
    var pre_ins = false;
    // Is there a deletion operation before the last equality.
    var pre_del = false;
    // Is there an insertion operation after the last equality.
    var post_ins = false;
    // Is there a deletion operation after the last equality.
    var post_del = false;
    while (pointer < diffs.length) {
        if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.
            if (diffs[pointer][1].length < this.Diff_EditCost &&
                (post_ins || post_del)) {
                // Candidate found.
                equalities[equalitiesLength++] = pointer;
                pre_ins = post_ins;
                pre_del = post_del;
                lastequality = diffs[pointer][1];
            } else {
                // Not a candidate, and can never become one.
                equalitiesLength = 0;
                lastequality = null;
            }
            post_ins = post_del = false;
        } else {  // An insertion or deletion.
            if (diffs[pointer][0] == DIFF_DELETE) {
                post_del = true;
            } else {
                post_ins = true;
            }
            /*
             * Five types to be split:
             * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>
             * <ins>A</ins>X<ins>C</ins><del>D</del>
             * <ins>A</ins><del>B</del>X<ins>C</ins>
             * <ins>A</del>X<ins>C</ins><del>D</del>
             * <ins>A</ins><del>B</del>X<del>C</del>
             */
            if (lastequality && ((pre_ins && pre_del && post_ins && post_del) ||
                ((lastequality.length < this.Diff_EditCost / 2) &&
                (pre_ins + pre_del + post_ins + post_del) == 3))) {
                // Duplicate record.
                diffs.splice(equalities[equalitiesLength - 1], 0,
                    [DIFF_DELETE, lastequality]);
                // Change second copy to insert.
                diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;
                equalitiesLength--;  // Throw away the equality we just deleted;
                lastequality = null;
                if (pre_ins && pre_del) {
                    // No changes made which could affect previous entry, keep going.
                    post_ins = post_del = true;
                    equalitiesLength = 0;
                } else {
                    equalitiesLength--;  // Throw away the previous equality.
                    pointer = equalitiesLength > 0 ?
                        equalities[equalitiesLength - 1] : -1;
                    post_ins = post_del = false;
                }
                changes = true;
            }
        }
        pointer++;
    }

    if (changes) {
        this.diff_cleanupMerge(diffs);
    }
};


/**
 * Reorder and merge like edit sections.  Merge equalities.
 * Any edit section can move as long as it doesn't cross an equality.
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 */
diff_match_patch.prototype.diff_cleanupMerge = function(diffs) {
    diffs.push([DIFF_EQUAL, '']);  // Add a dummy entry at the end.
    var pointer = 0;
    var count_delete = 0;
    var count_insert = 0;
    var text_delete = '';
    var text_insert = '';
    var commonlength;
    while (pointer < diffs.length) {
        switch (diffs[pointer][0]) {
            case DIFF_INSERT:
                count_insert++;
                text_insert += diffs[pointer][1];
                pointer++;
                break;
            case DIFF_DELETE:
                count_delete++;
                text_delete += diffs[pointer][1];
                pointer++;
                break;
            case DIFF_EQUAL:
                // Upon reaching an equality, check for prior redundancies.
                if (count_delete + count_insert > 1) {
                    if (count_delete !== 0 && count_insert !== 0) {
                        // Factor out any common prefixies.
                        commonlength = this.diff_commonPrefix(text_insert, text_delete);
                        if (commonlength !== 0) {
                            if ((pointer - count_delete - count_insert) > 0 &&
                                diffs[pointer - count_delete - count_insert - 1][0] ==
                                DIFF_EQUAL) {
                                diffs[pointer - count_delete - count_insert - 1][1] +=
                                    text_insert.substring(0, commonlength);
                            } else {
                                diffs.splice(0, 0, [DIFF_EQUAL,
                                    text_insert.substring(0, commonlength)]);
                                pointer++;
                            }
                            text_insert = text_insert.substring(commonlength);
                            text_delete = text_delete.substring(commonlength);
                        }
                        // Factor out any common suffixies.
                        commonlength = this.diff_commonSuffix(text_insert, text_delete);
                        if (commonlength !== 0) {
                            diffs[pointer][1] = text_insert.substring(text_insert.length -
                                    commonlength) + diffs[pointer][1];
                            text_insert = text_insert.substring(0, text_insert.length -
                                commonlength);
                            text_delete = text_delete.substring(0, text_delete.length -
                                commonlength);
                        }
                    }
                    // Delete the offending records and add the merged ones.
                    if (count_delete === 0) {
                        diffs.splice(pointer - count_insert,
                            count_delete + count_insert, [DIFF_INSERT, text_insert]);
                    } else if (count_insert === 0) {
                        diffs.splice(pointer - count_delete,
                            count_delete + count_insert, [DIFF_DELETE, text_delete]);
                    } else {
                        diffs.splice(pointer - count_delete - count_insert,
                            count_delete + count_insert, [DIFF_DELETE, text_delete],
                            [DIFF_INSERT, text_insert]);
                    }
                    pointer = pointer - count_delete - count_insert +
                        (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;
                } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {
                    // Merge this equality with the previous one.
                    diffs[pointer - 1][1] += diffs[pointer][1];
                    diffs.splice(pointer, 1);
                } else {
                    pointer++;
                }
                count_insert = 0;
                count_delete = 0;
                text_delete = '';
                text_insert = '';
                break;
        }
    }
    if (diffs[diffs.length - 1][1] === '') {
        diffs.pop();  // Remove the dummy entry at the end.
    }

    // Second pass: look for single edits surrounded on both sides by equalities
    // which can be shifted sideways to eliminate an equality.
    // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC
    var changes = false;
    pointer = 1;
    // Intentionally ignore the first and last element (don't need checking).
    while (pointer < diffs.length - 1) {
        if (diffs[pointer - 1][0] == DIFF_EQUAL &&
            diffs[pointer + 1][0] == DIFF_EQUAL) {
            // This is a single edit surrounded by equalities.
            if (diffs[pointer][1].substring(diffs[pointer][1].length -
                    diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {
                // Shift the edit over the previous equality.
                diffs[pointer][1] = diffs[pointer - 1][1] +
                    diffs[pointer][1].substring(0, diffs[pointer][1].length -
                        diffs[pointer - 1][1].length);
                diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];
                diffs.splice(pointer - 1, 1);
                changes = true;
            } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==
                diffs[pointer + 1][1]) {
                // Shift the edit over the next equality.
                diffs[pointer - 1][1] += diffs[pointer + 1][1];
                diffs[pointer][1] =
                    diffs[pointer][1].substring(diffs[pointer + 1][1].length) +
                    diffs[pointer + 1][1];
                diffs.splice(pointer + 1, 1);
                changes = true;
            }
        }
        pointer++;
    }
    // If shifts were made, the diff needs reordering and another shift sweep.
    if (changes) {
        this.diff_cleanupMerge(diffs);
    }
};


/**
 * loc is a location in text1, compute and return the equivalent location in
 * text2.
 * e.g. 'The cat' vs 'The big cat', 1->1, 5->8
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 * @param {number} loc Location within text1.
 * @return {number} Location within text2.
 */
diff_match_patch.prototype.diff_xIndex = function(diffs, loc) {
    var chars1 = 0;
    var chars2 = 0;
    var last_chars1 = 0;
    var last_chars2 = 0;
    var x;
    for (x = 0; x < diffs.length; x++) {
        if (diffs[x][0] !== DIFF_INSERT) {  // Equality or deletion.
            chars1 += diffs[x][1].length;
        }
        if (diffs[x][0] !== DIFF_DELETE) {  // Equality or insertion.
            chars2 += diffs[x][1].length;
        }
        if (chars1 > loc) {  // Overshot the location.
            break;
        }
        last_chars1 = chars1;
        last_chars2 = chars2;
    }
    // Was the location was deleted?
    if (diffs.length != x && diffs[x][0] === DIFF_DELETE) {
        return last_chars2;
    }
    // Add the remaining character length.
    return last_chars2 + (loc - last_chars1);
};


/**
 * Convert a diff array into a pretty HTML report.
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 * @return {string} HTML representation.
 */
diff_match_patch.prototype.diff_prettyHtml = function(diffs) {
    var html = [];
    var pattern_amp = /&/g;
    var pattern_lt = /</g;
    var pattern_gt = />/g;
    var pattern_para = /\n/g;
    for (var x = 0; x < diffs.length; x++) {
        var op = diffs[x][0];    // Operation (insert, delete, equal)
        var data = diffs[x][1];  // Text of change.
        var text = data.replace(pattern_amp, '&amp;').replace(pattern_lt, '&lt;')
            .replace(pattern_gt, '&gt;').replace(pattern_para, '&para;<br>');
        switch (op) {
            case DIFF_INSERT:
                html[x] = '<ins style="background:#e6ffe6;">' + text + '</ins>';
                break;
            case DIFF_DELETE:
                html[x] = '<del style="background:#ffe6e6;">' + text + '</del>';
                break;
            case DIFF_EQUAL:
                html[x] = '<span>' + text + '</span>';
                break;
        }
    }
    return html.join('');
};


/**
 * Compute and return the source text (all equalities and deletions).
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 * @return {string} Source text.
 */
diff_match_patch.prototype.diff_text1 = function(diffs) {
    var text = [];
    for (var x = 0; x < diffs.length; x++) {
        if (diffs[x][0] !== DIFF_INSERT) {
            text[x] = diffs[x][1];
        }
    }
    return text.join('');
};


/**
 * Compute and return the destination text (all equalities and insertions).
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 * @return {string} Destination text.
 */
diff_match_patch.prototype.diff_text2 = function(diffs) {
    var text = [];
    for (var x = 0; x < diffs.length; x++) {
        if (diffs[x][0] !== DIFF_DELETE) {
            text[x] = diffs[x][1];
        }
    }
    return text.join('');
};


/**
 * Compute the Levenshtein distance; the number of inserted, deleted or
 * substituted characters.
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 * @return {number} Number of changes.
 */
diff_match_patch.prototype.diff_levenshtein = function(diffs) {
    var levenshtein = 0;
    var insertions = 0;
    var deletions = 0;
    for (var x = 0; x < diffs.length; x++) {
        var op = diffs[x][0];
        var data = diffs[x][1];
        switch (op) {
            case DIFF_INSERT:
                insertions += data.length;
                break;
            case DIFF_DELETE:
                deletions += data.length;
                break;
            case DIFF_EQUAL:
                // A deletion and an insertion is one substitution.
                levenshtein += Math.max(insertions, deletions);
                insertions = 0;
                deletions = 0;
                break;
        }
    }
    levenshtein += Math.max(insertions, deletions);
    return levenshtein;
};


/**
 * Crush the diff into an encoded string which describes the operations
 * required to transform text1 into text2.
 * E.g. =3\t-2\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.
 * Operations are tab-separated.  Inserted text is escaped using %xx notation.
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 * @return {string} Delta text.
 */
diff_match_patch.prototype.diff_toDelta = function(diffs) {
    var text = [];
    for (var x = 0; x < diffs.length; x++) {
        switch (diffs[x][0]) {
            case DIFF_INSERT:
                text[x] = '+' + encodeURI(diffs[x][1]);
                break;
            case DIFF_DELETE:
                text[x] = '-' + diffs[x][1].length;
                break;
            case DIFF_EQUAL:
                text[x] = '=' + diffs[x][1].length;
                break;
        }
    }
    return text.join('\t').replace(/%20/g, ' ');
};


/**
 * Given the original text1, and an encoded string which describes the
 * operations required to transform text1 into text2, compute the full diff.
 * @param {string} text1 Source string for the diff.
 * @param {string} delta Delta text.
 * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.
 * @throws {!Error} If invalid input.
 */
diff_match_patch.prototype.diff_fromDelta = function(text1, delta) {
    var diffs = [];
    var diffsLength = 0;  // Keeping our own length var is faster in JS.
    var pointer = 0;  // Cursor in text1
    var tokens = delta.split(/\t/g);
    for (var x = 0; x < tokens.length; x++) {
        // Each token begins with a one character parameter which specifies the
        // operation of this token (delete, insert, equality).
        var param = tokens[x].substring(1);
        switch (tokens[x].charAt(0)) {
            case '+':
                try {
                    diffs[diffsLength++] = [DIFF_INSERT, decodeURI(param)];
                } catch (ex) {
                    // Malformed URI sequence.
                    throw new Error('Illegal escape in diff_fromDelta: ' + param);
                }
                break;
            case '-':
            // Fall through.
            case '=':
                var n = parseInt(param, 10);
                if (isNaN(n) || n < 0) {
                    throw new Error('Invalid number in diff_fromDelta: ' + param);
                }
                var text = text1.substring(pointer, pointer += n);
                if (tokens[x].charAt(0) == '=') {
                    diffs[diffsLength++] = [DIFF_EQUAL, text];
                } else {
                    diffs[diffsLength++] = [DIFF_DELETE, text];
                }
                break;
            default:
                // Blank tokens are ok (from a trailing \t).
                // Anything else is an error.
                if (tokens[x]) {
                    throw new Error('Invalid diff operation in diff_fromDelta: ' +
                        tokens[x]);
                }
        }
    }
    if (pointer != text1.length) {
        throw new Error('Delta length (' + pointer +
            ') does not equal source text length (' + text1.length + ').');
    }
    return diffs;
};


//  MATCH FUNCTIONS


/**
 * Locate the best instance of 'pattern' in 'text' near 'loc'.
 * @param {string} text The text to search.
 * @param {string} pattern The pattern to search for.
 * @param {number} loc The location to search around.
 * @return {number} Best match index or -1.
 */
diff_match_patch.prototype.match_main = function(text, pattern, loc) {
    // Check for null inputs.
    if (text == null || pattern == null || loc == null) {
        throw new Error('Null input. (match_main)');
    }

    loc = Math.max(0, Math.min(loc, text.length));
    if (text == pattern) {
        // Shortcut (potentially not guaranteed by the algorithm)
        return 0;
    } else if (!text.length) {
        // Nothing to match.
        return -1;
    } else if (text.substring(loc, loc + pattern.length) == pattern) {
        // Perfect match at the perfect spot!  (Includes case of null pattern)
        return loc;
    } else {
        // Do a fuzzy compare.
        return this.match_bitap_(text, pattern, loc);
    }
};


/**
 * Locate the best instance of 'pattern' in 'text' near 'loc' using the
 * Bitap algorithm.
 * @param {string} text The text to search.
 * @param {string} pattern The pattern to search for.
 * @param {number} loc The location to search around.
 * @return {number} Best match index or -1.
 * @private
 */
diff_match_patch.prototype.match_bitap_ = function(text, pattern, loc) {
    if (pattern.length > this.Match_MaxBits) {
        throw new Error('Pattern too long for this browser.');
    }

    // Initialise the alphabet.
    var s = this.match_alphabet_(pattern);

    var dmp = this;  // 'this' becomes 'window' in a closure.

    /**
     * Compute and return the score for a match with e errors and x location.
     * Accesses loc and pattern through being a closure.
     * @param {number} e Number of errors in match.
     * @param {number} x Location of match.
     * @return {number} Overall score for match (0.0 = good, 1.0 = bad).
     * @private
     */
    function match_bitapScore_(e, x) {
        var accuracy = e / pattern.length;
        var proximity = Math.abs(loc - x);
        if (!dmp.Match_Distance) {
            // Dodge divide by zero error.
            return proximity ? 1.0 : accuracy;
        }
        return accuracy + (proximity / dmp.Match_Distance);
    }

    // Highest score beyond which we give up.
    var score_threshold = this.Match_Threshold;
    // Is there a nearby exact match? (speedup)
    var best_loc = text.indexOf(pattern, loc);
    if (best_loc != -1) {
        score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold);
        // What about in the other direction? (speedup)
        best_loc = text.lastIndexOf(pattern, loc + pattern.length);
        if (best_loc != -1) {
            score_threshold =
                Math.min(match_bitapScore_(0, best_loc), score_threshold);
        }
    }

    // Initialise the bit arrays.
    var matchmask = 1 << (pattern.length - 1);
    best_loc = -1;

    var bin_min, bin_mid;
    var bin_max = pattern.length + text.length;
    var last_rd;
    for (var d = 0; d < pattern.length; d++) {
        // Scan for the best match; each iteration allows for one more error.
        // Run a binary search to determine how far from 'loc' we can stray at this
        // error level.
        bin_min = 0;
        bin_mid = bin_max;
        while (bin_min < bin_mid) {
            if (match_bitapScore_(d, loc + bin_mid) <= score_threshold) {
                bin_min = bin_mid;
            } else {
                bin_max = bin_mid;
            }
            bin_mid = Math.floor((bin_max - bin_min) / 2 + bin_min);
        }
        // Use the result from this iteration as the maximum for the next.
        bin_max = bin_mid;
        var start = Math.max(1, loc - bin_mid + 1);
        var finish = Math.min(loc + bin_mid, text.length) + pattern.length;

        var rd = Array(finish + 2);
        rd[finish + 1] = (1 << d) - 1;
        for (var j = finish; j >= start; j--) {
            // The alphabet (s) is a sparse hash, so the following line generates
            // warnings.
            var charMatch = s[text.charAt(j - 1)];
            if (d === 0) {  // First pass: exact match.
                rd[j] = ((rd[j + 1] << 1) | 1) & charMatch;
            } else {  // Subsequent passes: fuzzy match.
                rd[j] = (((rd[j + 1] << 1) | 1) & charMatch) |
                    (((last_rd[j + 1] | last_rd[j]) << 1) | 1) |
                    last_rd[j + 1];
            }
            if (rd[j] & matchmask) {
                var score = match_bitapScore_(d, j - 1);
                // This match will almost certainly be better than any existing match.
                // But check anyway.
                if (score <= score_threshold) {
                    // Told you so.
                    score_threshold = score;
                    best_loc = j - 1;
                    if (best_loc > loc) {
                        // When passing loc, don't exceed our current distance from loc.
                        start = Math.max(1, 2 * loc - best_loc);
                    } else {
                        // Already passed loc, downhill from here on in.
                        break;
                    }
                }
            }
        }
        // No hope for a (better) match at greater error levels.
        if (match_bitapScore_(d + 1, loc) > score_threshold) {
            break;
        }
        last_rd = rd;
    }
    return best_loc;
};


/**
 * Initialise the alphabet for the Bitap algorithm.
 * @param {string} pattern The text to encode.
 * @return {!Object} Hash of character locations.
 * @private
 */
diff_match_patch.prototype.match_alphabet_ = function(pattern) {
    var s = {};
    for (var i = 0; i < pattern.length; i++) {
        s[pattern.charAt(i)] = 0;
    }
    for (var i = 0; i < pattern.length; i++) {
        s[pattern.charAt(i)] |= 1 << (pattern.length - i - 1);
    }
    return s;
};


//  PATCH FUNCTIONS


/**
 * Increase the context until it is unique,
 * but don't let the pattern expand beyond Match_MaxBits.
 * @param {!diff_match_patch.patch_obj} patch The patch to grow.
 * @param {string} text Source text.
 * @private
 */
diff_match_patch.prototype.patch_addContext_ = function(patch, text) {
    if (text.length == 0) {
        return;
    }
    var pattern = text.substring(patch.start2, patch.start2 + patch.length1);
    var padding = 0;

    // Look for the first and last matches of pattern in text.  If two different
    // matches are found, increase the pattern length.
    while (text.indexOf(pattern) != text.lastIndexOf(pattern) &&
    pattern.length < this.Match_MaxBits - this.Patch_Margin -
    this.Patch_Margin) {
        padding += this.Patch_Margin;
        pattern = text.substring(patch.start2 - padding,
            patch.start2 + patch.length1 + padding);
    }
    // Add one chunk for good luck.
    padding += this.Patch_Margin;

    // Add the prefix.
    var prefix = text.substring(patch.start2 - padding, patch.start2);
    if (prefix) {
        patch.diffs.unshift([DIFF_EQUAL, prefix]);
    }
    // Add the suffix.
    var suffix = text.substring(patch.start2 + patch.length1,
        patch.start2 + patch.length1 + padding);
    if (suffix) {
        patch.diffs.push([DIFF_EQUAL, suffix]);
    }

    // Roll back the start points.
    patch.start1 -= prefix.length;
    patch.start2 -= prefix.length;
    // Extend the lengths.
    patch.length1 += prefix.length + suffix.length;
    patch.length2 += prefix.length + suffix.length;
};


/**
 * Compute a list of patches to turn text1 into text2.
 * Use diffs if provided, otherwise compute it ourselves.
 * There are four ways to call this function, depending on what data is
 * available to the caller:
 * Method 1:
 * a = text1, b = text2
 * Method 2:
 * a = diffs
 * Method 3 (optimal):
 * a = text1, b = diffs
 * Method 4 (deprecated, use method 3):
 * a = text1, b = text2, c = diffs
 *
 * @param {string|!Array.<!diff_match_patch.Diff>} a text1 (methods 1,3,4) or
 * Array of diff tuples for text1 to text2 (method 2).
 * @param {string|!Array.<!diff_match_patch.Diff>} opt_b text2 (methods 1,4) or
 * Array of diff tuples for text1 to text2 (method 3) or undefined (method 2).
 * @param {string|!Array.<!diff_match_patch.Diff>} opt_c Array of diff tuples
 * for text1 to text2 (method 4) or undefined (methods 1,2,3).
 * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.
 */
diff_match_patch.prototype.patch_make = function(a, opt_b, opt_c) {
    var text1, diffs;
    if (typeof a == 'string' && typeof opt_b == 'string' &&
        typeof opt_c == 'undefined') {
        // Method 1: text1, text2
        // Compute diffs from text1 and text2.
        text1 = /** @type {string} */(a);
        diffs = this.diff_main(text1, /** @type {string} */(opt_b), true);
        if (diffs.length > 2) {
            this.diff_cleanupSemantic(diffs);
            this.diff_cleanupEfficiency(diffs);
        }
    } else if (a && typeof a == 'object' && typeof opt_b == 'undefined' &&
        typeof opt_c == 'undefined') {
        // Method 2: diffs
        // Compute text1 from diffs.
        diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(a);
        text1 = this.diff_text1(diffs);
    } else if (typeof a == 'string' && opt_b && typeof opt_b == 'object' &&
        typeof opt_c == 'undefined') {
        // Method 3: text1, diffs
        text1 = /** @type {string} */(a);
        diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_b);
    } else if (typeof a == 'string' && typeof opt_b == 'string' &&
        opt_c && typeof opt_c == 'object') {
        // Method 4: text1, text2, diffs
        // text2 is not used.
        text1 = /** @type {string} */(a);
        diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_c);
    } else {
        throw new Error('Unknown call format to patch_make.');
    }

    if (diffs.length === 0) {
        return [];  // Get rid of the null case.
    }
    var patches = [];
    var patch = new diff_match_patch.patch_obj();
    var patchDiffLength = 0;  // Keeping our own length var is faster in JS.
    var char_count1 = 0;  // Number of characters into the text1 string.
    var char_count2 = 0;  // Number of characters into the text2 string.
    // Start with text1 (prepatch_text) and apply the diffs until we arrive at
    // text2 (postpatch_text).  We recreate the patches one by one to determine
    // context info.
    var prepatch_text = text1;
    var postpatch_text = text1;
    for (var x = 0; x < diffs.length; x++) {
        var diff_type = diffs[x][0];
        var diff_text = diffs[x][1];

        if (!patchDiffLength && diff_type !== DIFF_EQUAL) {
            // A new patch starts here.
            patch.start1 = char_count1;
            patch.start2 = char_count2;
        }

        switch (diff_type) {
            case DIFF_INSERT:
                patch.diffs[patchDiffLength++] = diffs[x];
                patch.length2 += diff_text.length;
                postpatch_text = postpatch_text.substring(0, char_count2) + diff_text +
                    postpatch_text.substring(char_count2);
                break;
            case DIFF_DELETE:
                patch.length1 += diff_text.length;
                patch.diffs[patchDiffLength++] = diffs[x];
                postpatch_text = postpatch_text.substring(0, char_count2) +
                    postpatch_text.substring(char_count2 +
                        diff_text.length);
                break;
            case DIFF_EQUAL:
                if (diff_text.length <= 2 * this.Patch_Margin &&
                    patchDiffLength && diffs.length != x + 1) {
                    // Small equality inside a patch.
                    patch.diffs[patchDiffLength++] = diffs[x];
                    patch.length1 += diff_text.length;
                    patch.length2 += diff_text.length;
                } else if (diff_text.length >= 2 * this.Patch_Margin) {
                    // Time for a new patch.
                    if (patchDiffLength) {
                        this.patch_addContext_(patch, prepatch_text);
                        patches.push(patch);
                        patch = new diff_match_patch.patch_obj();
                        patchDiffLength = 0;
                        // Unlike Unidiff, our patch lists have a rolling context.
                        // http://code.google.com/p/google-diff-match-patch/wiki/Unidiff
                        // Update prepatch text & pos to reflect the application of the
                        // just completed patch.
                        prepatch_text = postpatch_text;
                        char_count1 = char_count2;
                    }
                }
                break;
        }

        // Update the current character count.
        if (diff_type !== DIFF_INSERT) {
            char_count1 += diff_text.length;
        }
        if (diff_type !== DIFF_DELETE) {
            char_count2 += diff_text.length;
        }
    }
    // Pick up the leftover patch if not empty.
    if (patchDiffLength) {
        this.patch_addContext_(patch, prepatch_text);
        patches.push(patch);
    }

    return patches;
};


/**
 * Given an array of patches, return another array that is identical.
 * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.
 * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.
 */
diff_match_patch.prototype.patch_deepCopy = function(patches) {
    // Making deep copies is hard in JavaScript.
    var patchesCopy = [];
    for (var x = 0; x < patches.length; x++) {
        var patch = patches[x];
        var patchCopy = new diff_match_patch.patch_obj();
        patchCopy.diffs = [];
        for (var y = 0; y < patch.diffs.length; y++) {
            patchCopy.diffs[y] = patch.diffs[y].slice();
        }
        patchCopy.start1 = patch.start1;
        patchCopy.start2 = patch.start2;
        patchCopy.length1 = patch.length1;
        patchCopy.length2 = patch.length2;
        patchesCopy[x] = patchCopy;
    }
    return patchesCopy;
};


/**
 * Merge a set of patches onto the text.  Return a patched text, as well
 * as a list of true/false values indicating which patches were applied.
 * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.
 * @param {string} text Old text.
 * @return {!Array.<string|!Array.<boolean>>} Two element Array, containing the
 *      new text and an array of boolean values.
 */
diff_match_patch.prototype.patch_apply = function(patches, text) {
    if (patches.length == 0) {
        return [text, []];
    }

    // Deep copy the patches so that no changes are made to originals.
    patches = this.patch_deepCopy(patches);

    var nullPadding = this.patch_addPadding(patches);
    text = nullPadding + text + nullPadding;

    this.patch_splitMax(patches);
    // delta keeps track of the offset between the expected and actual location
    // of the previous patch.  If there are patches expected at positions 10 and
    // 20, but the first patch was found at 12, delta is 2 and the second patch
    // has an effective expected position of 22.
    var delta = 0;
    var results = [];
    for (var x = 0; x < patches.length; x++) {
        var expected_loc = patches[x].start2 + delta;
        var text1 = this.diff_text1(patches[x].diffs);
        var start_loc;
        var end_loc = -1;
        if (text1.length > this.Match_MaxBits) {
            // patch_splitMax will only provide an oversized pattern in the case of
            // a monster delete.
            start_loc = this.match_main(text, text1.substring(0, this.Match_MaxBits),
                expected_loc);
            if (start_loc != -1) {
                end_loc = this.match_main(text,
                    text1.substring(text1.length - this.Match_MaxBits),
                    expected_loc + text1.length - this.Match_MaxBits);
                if (end_loc == -1 || start_loc >= end_loc) {
                    // Can't find valid trailing context.  Drop this patch.
                    start_loc = -1;
                }
            }
        } else {
            start_loc = this.match_main(text, text1, expected_loc);
        }
        if (start_loc == -1) {
            // No match found.  :(
            results[x] = false;
            // Subtract the delta for this failed patch from subsequent patches.
            delta -= patches[x].length2 - patches[x].length1;
        } else {
            // Found a match.  :)
            results[x] = true;
            delta = start_loc - expected_loc;
            var text2;
            if (end_loc == -1) {
                text2 = text.substring(start_loc, start_loc + text1.length);
            } else {
                text2 = text.substring(start_loc, end_loc + this.Match_MaxBits);
            }
            if (text1 == text2) {
                // Perfect match, just shove the replacement text in.
                text = text.substring(0, start_loc) +
                    this.diff_text2(patches[x].diffs) +
                    text.substring(start_loc + text1.length);
            } else {
                // Imperfect match.  Run a diff to get a framework of equivalent
                // indices.
                var diffs = this.diff_main(text1, text2, false);
                if (text1.length > this.Match_MaxBits &&
                    this.diff_levenshtein(diffs) / text1.length >
                    this.Patch_DeleteThreshold) {
                    // The end points match, but the content is unacceptably bad.
                    results[x] = false;
                } else {
                    this.diff_cleanupSemanticLossless(diffs);
                    var index1 = 0;
                    var index2;
                    for (var y = 0; y < patches[x].diffs.length; y++) {
                        var mod = patches[x].diffs[y];
                        if (mod[0] !== DIFF_EQUAL) {
                            index2 = this.diff_xIndex(diffs, index1);
                        }
                        if (mod[0] === DIFF_INSERT) {  // Insertion
                            text = text.substring(0, start_loc + index2) + mod[1] +
                                text.substring(start_loc + index2);
                        } else if (mod[0] === DIFF_DELETE) {  // Deletion
                            text = text.substring(0, start_loc + index2) +
                                text.substring(start_loc + this.diff_xIndex(diffs,
                                        index1 + mod[1].length));
                        }
                        if (mod[0] !== DIFF_DELETE) {
                            index1 += mod[1].length;
                        }
                    }
                }
            }
        }
    }
    // Strip the padding off.
    text = text.substring(nullPadding.length, text.length - nullPadding.length);
    return [text, results];
};


/**
 * Add some padding on text start and end so that edges can match something.
 * Intended to be called only from within patch_apply.
 * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.
 * @return {string} The padding string added to each side.
 */
diff_match_patch.prototype.patch_addPadding = function(patches) {
    var paddingLength = this.Patch_Margin;
    var nullPadding = '';
    for (var x = 1; x <= paddingLength; x++) {
        nullPadding += String.fromCharCode(x);
    }

    // Bump all the patches forward.
    for (var x = 0; x < patches.length; x++) {
        patches[x].start1 += paddingLength;
        patches[x].start2 += paddingLength;
    }

    // Add some padding on start of first diff.
    var patch = patches[0];
    var diffs = patch.diffs;
    if (diffs.length == 0 || diffs[0][0] != DIFF_EQUAL) {
        // Add nullPadding equality.
        diffs.unshift([DIFF_EQUAL, nullPadding]);
        patch.start1 -= paddingLength;  // Should be 0.
        patch.start2 -= paddingLength;  // Should be 0.
        patch.length1 += paddingLength;
        patch.length2 += paddingLength;
    } else if (paddingLength > diffs[0][1].length) {
        // Grow first equality.
        var extraLength = paddingLength - diffs[0][1].length;
        diffs[0][1] = nullPadding.substring(diffs[0][1].length) + diffs[0][1];
        patch.start1 -= extraLength;
        patch.start2 -= extraLength;
        patch.length1 += extraLength;
        patch.length2 += extraLength;
    }

    // Add some padding on end of last diff.
    patch = patches[patches.length - 1];
    diffs = patch.diffs;
    if (diffs.length == 0 || diffs[diffs.length - 1][0] != DIFF_EQUAL) {
        // Add nullPadding equality.
        diffs.push([DIFF_EQUAL, nullPadding]);
        patch.length1 += paddingLength;
        patch.length2 += paddingLength;
    } else if (paddingLength > diffs[diffs.length - 1][1].length) {
        // Grow last equality.
        var extraLength = paddingLength - diffs[diffs.length - 1][1].length;
        diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);
        patch.length1 += extraLength;
        patch.length2 += extraLength;
    }

    return nullPadding;
};


/**
 * Look through the patches and break up any which are longer than the maximum
 * limit of the match algorithm.
 * Intended to be called only from within patch_apply.
 * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.
 */
diff_match_patch.prototype.patch_splitMax = function(patches) {
    var patch_size = this.Match_MaxBits;
    for (var x = 0; x < patches.length; x++) {
        if (patches[x].length1 <= patch_size) {
            continue;
        }
        var bigpatch = patches[x];
        // Remove the big old patch.
        patches.splice(x--, 1);
        var start1 = bigpatch.start1;
        var start2 = bigpatch.start2;
        var precontext = '';
        while (bigpatch.diffs.length !== 0) {
            // Create one of several smaller patches.
            var patch = new diff_match_patch.patch_obj();
            var empty = true;
            patch.start1 = start1 - precontext.length;
            patch.start2 = start2 - precontext.length;
            if (precontext !== '') {
                patch.length1 = patch.length2 = precontext.length;
                patch.diffs.push([DIFF_EQUAL, precontext]);
            }
            while (bigpatch.diffs.length !== 0 &&
            patch.length1 < patch_size - this.Patch_Margin) {
                var diff_type = bigpatch.diffs[0][0];
                var diff_text = bigpatch.diffs[0][1];
                if (diff_type === DIFF_INSERT) {
                    // Insertions are harmless.
                    patch.length2 += diff_text.length;
                    start2 += diff_text.length;
                    patch.diffs.push(bigpatch.diffs.shift());
                    empty = false;
                } else if (diff_type === DIFF_DELETE && patch.diffs.length == 1 &&
                    patch.diffs[0][0] == DIFF_EQUAL &&
                    diff_text.length > 2 * patch_size) {
                    // This is a large deletion.  Let it pass in one chunk.
                    patch.length1 += diff_text.length;
                    start1 += diff_text.length;
                    empty = false;
                    patch.diffs.push([diff_type, diff_text]);
                    bigpatch.diffs.shift();
                } else {
                    // Deletion or equality.  Only take as much as we can stomach.
                    diff_text = diff_text.substring(0,
                        patch_size - patch.length1 - this.Patch_Margin);
                    patch.length1 += diff_text.length;
                    start1 += diff_text.length;
                    if (diff_type === DIFF_EQUAL) {
                        patch.length2 += diff_text.length;
                        start2 += diff_text.length;
                    } else {
                        empty = false;
                    }
                    patch.diffs.push([diff_type, diff_text]);
                    if (diff_text == bigpatch.diffs[0][1]) {
                        bigpatch.diffs.shift();
                    } else {
                        bigpatch.diffs[0][1] =
                            bigpatch.diffs[0][1].substring(diff_text.length);
                    }
                }
            }
            // Compute the head context for the next patch.
            precontext = this.diff_text2(patch.diffs);
            precontext =
                precontext.substring(precontext.length - this.Patch_Margin);
            // Append the end context for this patch.
            var postcontext = this.diff_text1(bigpatch.diffs)
                .substring(0, this.Patch_Margin);
            if (postcontext !== '') {
                patch.length1 += postcontext.length;
                patch.length2 += postcontext.length;
                if (patch.diffs.length !== 0 &&
                    patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL) {
                    patch.diffs[patch.diffs.length - 1][1] += postcontext;
                } else {
                    patch.diffs.push([DIFF_EQUAL, postcontext]);
                }
            }
            if (!empty) {
                patches.splice(++x, 0, patch);
            }
        }
    }
};


/**
 * Take a list of patches and return a textual representation.
 * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.
 * @return {string} Text representation of patches.
 */
diff_match_patch.prototype.patch_toText = function(patches) {
    var text = [];
    for (var x = 0; x < patches.length; x++) {
        text[x] = patches[x];
    }
    return text.join('');
};


/**
 * Parse a textual representation of patches and return a list of Patch objects.
 * @param {string} textline Text representation of patches.
 * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.
 * @throws {!Error} If invalid input.
 */
diff_match_patch.prototype.patch_fromText = function(textline) {
    var patches = [];
    if (!textline) {
        return patches;
    }
    var text = textline.split('\n');
    var textPointer = 0;
    var patchHeader = /^@@ -(\d+),?(\d*) \+(\d+),?(\d*) @@$/;
    while (textPointer < text.length) {
        var m = text[textPointer].match(patchHeader);
        if (!m) {
            throw new Error('Invalid patch string: ' + text[textPointer]);
        }
        var patch = new diff_match_patch.patch_obj();
        patches.push(patch);
        patch.start1 = parseInt(m[1], 10);
        if (m[2] === '') {
            patch.start1--;
            patch.length1 = 1;
        } else if (m[2] == '0') {
            patch.length1 = 0;
        } else {
            patch.start1--;
            patch.length1 = parseInt(m[2], 10);
        }

        patch.start2 = parseInt(m[3], 10);
        if (m[4] === '') {
            patch.start2--;
            patch.length2 = 1;
        } else if (m[4] == '0') {
            patch.length2 = 0;
        } else {
            patch.start2--;
            patch.length2 = parseInt(m[4], 10);
        }
        textPointer++;

        while (textPointer < text.length) {
            var sign = text[textPointer].charAt(0);
            try {
                var line = decodeURI(text[textPointer].substring(1));
            } catch (ex) {
                // Malformed URI sequence.
                throw new Error('Illegal escape in patch_fromText: ' + line);
            }
            if (sign == '-') {
                // Deletion.
                patch.diffs.push([DIFF_DELETE, line]);
            } else if (sign == '+') {
                // Insertion.
                patch.diffs.push([DIFF_INSERT, line]);
            } else if (sign == ' ') {
                // Minor equality.
                patch.diffs.push([DIFF_EQUAL, line]);
            } else if (sign == '@') {
                // Start of next patch.
                break;
            } else if (sign === '') {
                // Blank line?  Whatever.
            } else {
                // WTF?
                throw new Error('Invalid patch mode "' + sign + '" in: ' + line);
            }
            textPointer++;
        }
    }
    return patches;
};


/**
 * Class representing one patch operation.
 * @constructor
 */
diff_match_patch.patch_obj = function() {
    /** @type {!Array.<!diff_match_patch.Diff>} */
    this.diffs = [];
    /** @type {?number} */
    this.start1 = null;
    /** @type {?number} */
    this.start2 = null;
    /** @type {number} */
    this.length1 = 0;
    /** @type {number} */
    this.length2 = 0;
};


/**
 * Emmulate GNU diff's format.
 * Header: @@ -382,8 +481,9 @@
 * Indicies are printed as 1-based, not 0-based.
 * @return {string} The GNU diff string.
 */
diff_match_patch.patch_obj.prototype.toString = function() {
    var coords1, coords2;
    if (this.length1 === 0) {
        coords1 = this.start1 + ',0';
    } else if (this.length1 == 1) {
        coords1 = this.start1 + 1;
    } else {
        coords1 = (this.start1 + 1) + ',' + this.length1;
    }
    if (this.length2 === 0) {
        coords2 = this.start2 + ',0';
    } else if (this.length2 == 1) {
        coords2 = this.start2 + 1;
    } else {
        coords2 = (this.start2 + 1) + ',' + this.length2;
    }
    var text = ['@@ -' + coords1 + ' +' + coords2 + ' @@\n'];
    var op;
    // Escape the body of the patch with %xx notation.
    for (var x = 0; x < this.diffs.length; x++) {
        switch (this.diffs[x][0]) {
            case DIFF_INSERT:
                op = '+';
                break;
            case DIFF_DELETE:
                op = '-';
                break;
            case DIFF_EQUAL:
                op = ' ';
                break;
        }
        text[x + 1] = op + encodeURI(this.diffs[x][1]) + '\n';
    }
    return text.join('').replace(/%20/g, ' ');
};


// Export these global variables so that they survive Google's JS compiler.
// In a browser, 'this' will be 'window'.
// Users of node.js should 'require' the uncompressed version since Google's
// JS compiler may break the following exports for non-browser environments.
this['diff_match_patch'] = diff_match_patch;
this['DIFF_DELETE'] = DIFF_DELETE;
this['DIFF_INSERT'] = DIFF_INSERT;
this['DIFF_EQUAL'] = DIFF_EQUAL;

// Copyright (c) 2008, 2009 Andrew Cantino
// Copyright (c) 2008, 2009 Kyle Maxwell

/**
 * Patched to exclude jquery usages.
 *
 */

function DomPredictionHelper() {
};
DomPredictionHelper.prototype = new Object();

DomPredictionHelper.prototype.recursiveNodes = function (e) {
    var n;
    if (e.nodeName && e.parentNode && e != document.body) {
        n = this.recursiveNodes(e.parentNode);
    } else {
        n = new Array();
    }
    n.push(e);
    return n;
};

DomPredictionHelper.prototype.escapeCssNames = function (name) {
    if (name) {
        try {
            return name.replace(/\s*sg_\w+\s*/g, '').replace(/\\/g, '\\\\').
                replace(/\./g, '\\.').replace(/#/g, '\\#').replace(/\>/g, '\\>').replace(/\,/g, '\\,').replace(/\:/g, '\\:');
        } catch (e) {
            console.log('---');
            console.log("exception in escapeCssNames");
            console.log(name);
            console.log('---');
            return '';
        }
    } else {
        return '';
    }
};

DomPredictionHelper.prototype.childElemNumber = function (elem) {
    var count = 0;
    while (elem.previousSibling && (elem = elem.previousSibling)) {
        if (elem.nodeType == 1) count++;
    }
    return count;
};

DomPredictionHelper.prototype.pathOf = function (elem) {
    var nodes = this.recursiveNodes(elem);
    var self = this;
    var path = "";
    for (var i = 0; i < nodes.length; i++) {
        var e = nodes[i];
        if (e) {
            path += e.nodeName.toLowerCase();
            var escaped = e.id && self.escapeCssNames(new String(e.id));
            if (escaped && escaped.length > 0) path += '#' + escaped;

            if (e.className) {
                var split = e.className.split(/ /);

                for (var j = 0; j < split.length; j++) {
                    var escaped = self.escapeCssNames(split[j]);
                    if (split[j] && escaped.length > 0) {
                        path += '.' + escaped;
                    }
                }
            }

            path += ':nth-child(' + (self.childElemNumber(e) + 1) + ')';
            path += ' '
        }
    }
    if (path.charAt(path.length - 1) == ' ') path = path.substring(0, path.length - 1);
    return path;
};

DomPredictionHelper.prototype.commonCss = function (array) {
    try {
        var dmp = new diff_match_patch();
    } catch (e) {
        throw "Please include the diff_match_patch library.";
    }

    if (typeof array == 'undefined' || array.length == 0) return '';

    var existing_tokens = {};
    var encoded_css_array = this.encodeCssForDiff(array, existing_tokens);

    var collective_common = encoded_css_array.pop();

    encoded_css_array.forEach(function(el) {
        var diff = dmp.diff_main(collective_common, el);
        collective_common = '';

        diff.forEach(function(d) {
            if (d[0] == 0) {
                collective_common += d[1];
            }
        });
    });

    return this.decodeCss(collective_common, existing_tokens);
};

DomPredictionHelper.prototype.tokenizeCss = function (css_string) {
    var skip = false;
    var word = '';
    var tokens = [];

    var css_string = css_string.replace(/,/, ' , ').replace(/\s+/g, ' ');
    var length = css_string.length;
    var c = '';

    for (var i = 0; i < length; i++) {
        c = css_string[i];

        if (skip) {
            skip = false;
        } else if (c == '\\') {
            skip = true;
        } else if (c == '.' || c == ' ' || c == '#' || c == '>' || c == ':' || c == ',') {
            if (word.length > 0) tokens.push(word);
            word = '';
        }
        word += c;
        if (c == ' ' || c == ',') {
            tokens.push(word);
            word = '';
        }
    }
    if (word.length > 0) tokens.push(word);
    return tokens;
};

DomPredictionHelper.prototype.decodeCss = function (string, existing_tokens) {
    var inverted = this.invertObject(existing_tokens);
    var out = '';
    var split = string.split('');
    for (var i = 0; i < split.length; i++) {
        out += inverted[split[i]];
    }

    return this.cleanCss(out);
};

// Encode css paths for diff using unicode codepoints to allow for a large number of tokens.
DomPredictionHelper.prototype.encodeCssForDiff = function (strings, existing_tokens) {
    var codepoint = 50;
    var self = this;
    var strings_out = [];
    for (var i = 0; i < strings.length; i++) {
        var out = new String();

        var tokenizeCss = self.tokenizeCss(strings[i]);
        for (var j = 0; j < tokenizeCss.length; j++) {
            var s = tokenizeCss[j];

            if (!existing_tokens[s]) {
                existing_tokens[s] = String.fromCharCode(codepoint++);
            }

            out += existing_tokens[s];
        }

        strings_out.push(out);
    }

    return strings_out;
};

DomPredictionHelper.prototype.simplifyCss = function (css, selected_paths, rejected_paths) {
    var self = this;
    var parts = self.tokenizeCss(css);
    var best_so_far = "";
    if (self.selectorGets('all', selected_paths, css) && self.selectorGets('none', rejected_paths, css)) best_so_far = css;
    for (var pass = 0; pass < 4; pass++) {
        for (var part = 0; part < parts.length; part++) {
            var first = parts[part].substring(0, 1);
            if (self.wouldLeaveFreeFloatingNthChild(parts, part)) continue;
            if ((pass == 0 && first == ':') || // :nth-child
                (pass == 1 && first != ':' && first != '.' && first != '#' && first != ' ') || // elem, etc.
                (pass == 2 && first == '.') || // classes
                (pass == 3 && first == '#')) // ids
            {
                var tmp = parts[part];
                parts[part] = '';
                var selector = self.cleanCss(parts.join(''));
                if (selector == '') {
                    parts[part] = tmp;
                    continue;
                }
                if (self.selectorGets('all', selected_paths, selector) && self.selectorGets('none', rejected_paths, selector)) {
                    best_so_far = selector;
                } else {
                    parts[part] = tmp;
                }
            }
        }
    }
    return self.cleanCss(best_so_far);
};

DomPredictionHelper.prototype.wouldLeaveFreeFloatingNthChild = function (parts, part) {
    return (((part - 1 >= 0 && parts[part - 1].substring(0, 1) == ':') &&
    (part - 2 < 0 || parts[part - 2] == ' ') &&
    (part + 1 >= parts.length || parts[part + 1] == ' ')) ||
    ((part + 1 < parts.length && parts[part + 1].substring(0, 1) == ':') &&
    (part + 2 >= parts.length || parts[part + 2] == ' ') &&
    (part - 1 < 0 || parts[part - 1] == ' ')));
};

DomPredictionHelper.prototype.cleanCss = function (css) {
    return css.replace(/\>/, ' > ').replace(/,/, ' , ').replace(/\s+/g, ' ').replace(/^\s+|\s+$/g, '').replace(/,$/, '');
};

DomPredictionHelper.prototype.getPathsFor = function (arr) {
    var self = this;
    var out = [];

    for (var i = 0; i < arr.length; i++) {
        var s = arr[i];

        if (s && s.nodeName) {
            out.push(self.pathOf(s));
        }
    }

    return out;
};

DomPredictionHelper.prototype.predictCss = function (s, r) {
    var self = this;

    if (s.length == 0) return '';
    var selected_paths = self.getPathsFor(s);
    var rejected_paths = self.getPathsFor(r);

    var css = self.commonCss(selected_paths);
    var simplest = self.simplifyCss(css, selected_paths, rejected_paths);

    // Do we get off easy?
    if (simplest.length > 0) return simplest;

    // Okay, then make a union and possibly try to reduce subsets.
    var union = '';
    for (var i = 0; i < s.length; i++) {
        union = self.pathOf(s[i]) + ", " + union;
    }

    union = self.cleanCss(union);

    return self.simplifyCss(union, selected_paths, rejected_paths);
};

DomPredictionHelper.prototype.fragmentSelector = function (selector) {
    var self = this;
    var out = [];
    var split = selector.split(/\,/);

    for (var i = 0; i < split.length; i++) {
        var out2 = [];
        var splitInner = self.cleanCss(split[i]).split(/\s+/);

        for (var j = 0; j < splitInner.length; j++) {
            out2.push(self.tokenizeCss(splitInner[j]));
        }

        out.push(out2);
    }

    return out;
};

// Everything in the first selector must be present in the second.
DomPredictionHelper.prototype.selectorBlockMatchesSelectorBlock = function (selector_block1, selector_block2) {
    for (var j = 0; j < selector_block1.length; j++) {
        if (selector_block2.indexOf(selector_block1[j]) == -1) {
            return false;
        }
    }
    return true;
};

// Assumes list is an array of complete CSS selectors represented as strings.
DomPredictionHelper.prototype.selectorGets = function (type, list, the_selector) {
    var self = this;
    var result = true;

    if (list.length == 0 && type == 'all') return false;
    if (list.length == 0 && type == 'none') return true;

    var selectors = self.fragmentSelector(the_selector);

    var cleaned_list = [];
    for (var i = 0; i < list.length; i++) {
        cleaned_list.push(self.fragmentSelector(list[i])[0]);
    }

    for (var i = 0; i < selectors.length; i++) {
        if (!result) return;
        var selector = selectors[i];

        for (var j = 0; j < cleaned_list.length; i++) {
            if (!result || cleaned_list[j] == '') return;

            if (self._selectorGets(cleaned_list[j], selector)) {
                if (type == 'none') result = false;
                cleaned_list[j] = '';
            }
        }
    }

    if (type == 'all' && cleaned_list.join('').length > 0) { // Some candidates didn't get matched.
        result = false;
    }

    return result;
};

DomPredictionHelper.prototype._selectorGets = function (candidate_as_blocks, selector_as_blocks) {
    var cannot_match = false;
    var position = candidate_as_blocks.length - 1;
    for (var i = selector_as_blocks.length - 1; i > -1; i--) {
        if (cannot_match) break;
        if (i == selector_as_blocks.length - 1) { // First element on right.
            // If we don't match the first element, we cannot match.
            if (!this.selectorBlockMatchesSelectorBlock(selector_as_blocks[i], candidate_as_blocks[position])) cannot_match = true;
            position--;
        } else {
            var found = false;
            while (position > -1 && !found) {
                found = this.selectorBlockMatchesSelectorBlock(selector_as_blocks[i], candidate_as_blocks[position]);
                position--;
            }
            if (!found) cannot_match = true;
        }
    }
    return !cannot_match;
};

DomPredictionHelper.prototype.invertObject = function (object) {
    var new_object = {};

    for(var key in object) {
        var value = object[key];
        new_object[value] = key;
    }

    return new_object;
};

DomPredictionHelper.prototype.cssToXPath = function (css_string) {
    var tokens = this.tokenizeCss(css_string);
    if (tokens[0] && tokens[0] == ' ') tokens.splice(0, 1);
    if (tokens[tokens.length - 1] && tokens[tokens.length - 1] == ' ') tokens.splice(tokens.length - 1, 1);

    var css_block = [];
    var out = "";

    for (var i = 0; i < tokens.length; i++) {
        if (tokens[i] == ' ') {
            out += this.cssToXPathBlockHelper(css_block);
            css_block = [];
        } else {
            css_block.push(tokens[i]);
        }
    }

    return out + this.cssToXPathBlockHelper(css_block);
};

// Process a block (html entity, class(es), id, :nth-child()) of css
DomPredictionHelper.prototype.cssToXPathBlockHelper = function (css_block) {
    if (css_block.length == 0) return '//';
    var out = '//';
    var first = css_block[0].substring(0, 1);

    if (first == ',') return " | ";

    if (first == ':' || first == '#' || first == '.') {
        out += '*';
    }

    var expressions = [];
    var re = null;

    for (var i = 0; i < css_block.length; i++) {
        var current = css_block[i];
        first = current.substring(0, 1);
        var rest = current.substring(1);

        if (first == ':') {
            // We only support :nth-child(n) at the moment.
            if (re = rest.match(/^nth-child\((\d+)\)$/))
                expressions.push('(((count(preceding-sibling::*) + 1) = ' + re[1] + ') and parent::*)');
        } else if (first == '.') {
            expressions.push('contains(concat( " ", @class, " " ), concat( " ", "' + rest + '", " " ))');
        } else if (first == '#') {
            expressions.push('(@id = "' + rest + '")');
        } else if (first == ',') {
        } else {
            out += current;
        }
    }

    if (expressions.length > 0) out += '[';
    for (var i = 0; i < expressions.length; i++) {
        out += expressions[i];
        if (i < expressions.length - 1) out += ' and ';
    }
    if (expressions.length > 0) out += ']';
    return out;
};


/**
 * Adguard selector library
 * @type {Function}
 */
var AdguardSelectorLib = (function(api, $) {

    // PRIVATE FIELDS

    var PLACEHOLDER_PREFIX = 'adguard-placeholder';
    var placeholdedElements = null;

    var restrictedElements = null;
    var predictionHelper = null;

    var SUGGESTED_CLASS = 'sg_suggested';
    var SELECTED_CLASS = 'sg_selected';
    var REJECTED_CLASS = 'sg_rejected';
    var IGNORED_CLASS = 'sg_ignore';

    var selectedElements = [];
    var rejectedElements = [];

    var selectMode = 'exact';
    var unbound = true;
    var onElementSelectedHandler = null;

    var ignoreTouchEvent = 0;

    var selectionRenderer;


    // PRIVATE METHODS

    var removeClassName = function(className) {
        $('.' + className).removeClass(className);
    };

    var suggestPredicted = function(prediction) {
        if (prediction) {
            $(prediction).each(function() {
                if (!$(this).hasClass(SELECTED_CLASS) &&
                    !$(this).hasClass(IGNORED_CLASS) &&
                    !$(this).hasClass(REJECTED_CLASS)
                ) {
                    $(this).addClass(SUGGESTED_CLASS);
                }
            });
        }
    };

    var makePredictionPath = function(elem) {
        var w_elem = $(elem);

        if (w_elem.hasClass(SELECTED_CLASS)) {
            w_elem.removeClass(SELECTED_CLASS);
            selectedElements.splice($.inArray(elem, selectedElements), 1);
        } else if (w_elem.hasClass(REJECTED_CLASS)) {
            w_elem.removeClass(REJECTED_CLASS);
            rejectedElements.splice($.inArray(elem, rejectedElements), 1);
        } else if (w_elem.hasClass(SUGGESTED_CLASS)) {
            w_elem.addClass(REJECTED_CLASS);
            rejectedElements.push(elem);
        } else {
            if (selectMode == 'exact' && selectedElements.length > 0) {
                removeClassName(SELECTED_CLASS);
                selectedElements = [];
            }
            //w_elem.addClass('sg_selected');
            selectedElements.push(elem);
        }

        var prediction = predictionHelper.predictCss(selectedElements,
            rejectedElements.concat(restrictedElements));

        if (selectMode == 'similar') {
            removeClassName(SUGGESTED_CLASS);
            suggestPredicted(prediction);
        }

        return prediction;
    };

    var firstSelectedOrSuggestedParent = function(element) {
        if ($(element).hasClass(SUGGESTED_CLASS) || $(element).hasClass(SELECTED_CLASS)) {
            return element;
        }

        while (element.parentNode && (element = element.parentNode)) {
            if (restrictedElements.indexOf(element) == -1) {
                if ($(element).hasClass(SUGGESTED_CLASS) || $(element).hasClass(SELECTED_CLASS)) {
                    return element;
                }
            }
        }

        return null;
    };

    var px = function(p) {
        return p + 'px';
    };

    var getTagPath = function(element) {
        if (element.parentNode) {
            return element.parentNode.tagName.toLowerCase() + ' ' + element.tagName.toLowerCase();
        } else {
            return element.tagName.toLowerCase();
        }
    };

    var clearSelected = function() {
        selectedElements = [];
        rejectedElements = [];

        removeClassName(SELECTED_CLASS);
        removeClassName(REJECTED_CLASS);

        selectionRenderer.remove();
        removeClassName(SUGGESTED_CLASS);
    };

    /**
     * Returns element offset coordinates extended with width and height values.
     *
     * @param elem
     * @returns {{top: number, left: number, outerWidth: number, outerHeight: number}}
     */
    var getOffsetExtended = function(elem) {
        var bodyRect = document.body.getBoundingClientRect();
        var elemRect = elem.getBoundingClientRect();

        var rectTop = elemRect.top - bodyRect.top;
        var rectLeft = elemRect.left - bodyRect.left;

        return {
            top: rectTop,
            left: rectLeft,
            outerWidth: elem.offsetWidth,
            outerHeight: elem.offsetHeight
        };
    };

    /**
     * Adds borders to selected element.
     *
     * Default implementation of selection renderer.
     * Can be overwritten with custom implementation as a parameter of init function.
     *
     * @param element
     * @private
     */
    var BorderSelectionRenderer = (function(api) {
        var BORDER_WIDTH = 5;
        var BORDER_PADDING = 2;
        var BORDER_CLASS = 'sg_border';

        var borderTop = null;
        var borderLeft = null;
        var borderRight = null;
        var borderBottom = null;

        var showBorders = function() {
            if (borderTop && borderBottom && borderLeft && borderRight) {
                borderTop.show();
                borderBottom.show();
                borderLeft.show();
                borderRight.show();
            }
        };

        var addBorderToDom = function() {
            document.body.appendChild(borderTop.get(0));
            document.body.appendChild(borderBottom.get(0));
            document.body.appendChild(borderLeft.get(0));
            document.body.appendChild(borderRight.get(0));
        };

        var removeBorderFromDom = function() {
            if (borderTop && borderTop.get(0)) {
                var parent = borderTop.get(0).parentNode;

                if (parent) {
                    parent.removeChild(borderTop.get(0));
                    parent.removeChild(borderBottom.get(0));
                    parent.removeChild(borderLeft.get(0));
                    parent.removeChild(borderRight.get(0));
                }
            }

            borderTop = borderBottom = borderRight = borderLeft = null;
        };

        /**
         * Preparing renderer.
         */
        api.init = function() {
            if (!borderTop) {
                var width = px(BORDER_WIDTH);

                borderTop = $('<div/>').addClass(BORDER_CLASS).css('height', width).hide()
                    .on('click', sgMousedownHandler);
                borderBottom = $('<div/>').addClass(BORDER_CLASS).addClass('sg_bottom_border')
                    .css('height', px(BORDER_WIDTH + 6)).hide()
                    .on('click', sgMousedownHandler);
                borderLeft = $('<div/>').addClass(BORDER_CLASS).css('width', width).hide()
                    .on('click', sgMousedownHandler);
                borderRight = $('<div/>').addClass(BORDER_CLASS).css('width', width).hide()
                    .on('click', sgMousedownHandler);

                addBorderToDom();
            }
        };

        /**
         * Clearing DOM and so on.
         */
        api.finalize = function() {
            removeBorderFromDom();
        };

        /**
         * Adds borders to specified element
         *
         * @param element
         */
        api.add = function(element) {
            api.remove();

            if (!element) {
                return;
            }

            var p = getOffsetExtended(element);

            var top = p.top;
            var left = p.left;
            var width = p.outerWidth;
            var height = p.outerHeight;

            borderTop.css('width', px(width + BORDER_PADDING * 2 + BORDER_WIDTH * 2)).
            css('top', px(top - BORDER_WIDTH - BORDER_PADDING)).
            css('left', px(left - BORDER_PADDING - BORDER_WIDTH));
            borderBottom.css('width', px(width + BORDER_PADDING * 2 + BORDER_WIDTH)).
            css('top', px(top + height + BORDER_PADDING)).
            css('left', px(left - BORDER_PADDING - BORDER_WIDTH));
            borderLeft.css('height', px(height + BORDER_PADDING * 2)).
            css('top', px(top - BORDER_PADDING)).
            css('left', px(left - BORDER_PADDING - BORDER_WIDTH));
            borderRight.css('height', px(height + BORDER_PADDING * 2)).
            css('top', px(top - BORDER_PADDING)).
            css('left', px(left + width + BORDER_PADDING));

            borderBottom.get(0).textContent = getTagPath(element);
            borderRight.get(0).target_elem = borderLeft.get(0).target_elem = borderTop.get(0).target_elem = borderBottom.get(0).target_elem = element;

            showBorders();
        };

        /**
         * Removes borders
         */
        api.remove = function() {
            if (borderTop && borderBottom && borderLeft && borderRight) {
                borderTop.hide();
                borderBottom.hide();
                borderLeft.hide();
                borderRight.hide();
            }
        };

        /**
         * Border class
         *
         * @type {string}
         */
        api.BORDER_CLASS = BORDER_CLASS;

        return api;
    })(BorderSelectionRenderer || {});

    var linkHelper = document.createElement('a');
    var getHost = function(url) {
        if (!url) {
            return '';
        }

        linkHelper.href = url;
        return linkHelper.hostname;
    };

    var makePlaceholderImage = function(element) {
        var placeHolder = document.createElement('div');
        var style = window.getComputedStyle(element);
        placeHolder.style.height = style.height;
        placeHolder.style.width = style.width;
        placeHolder.style.position = style.position;
        placeHolder.style.top = style.top;
        placeHolder.style.bottom = style.bottom;
        placeHolder.style.left = style.left;
        placeHolder.style.right = style.right;
        placeHolder.className += PLACEHOLDER_PREFIX + ' ' + IGNORED_CLASS;

        var icon = document.createElement('div');
        icon.className += PLACEHOLDER_PREFIX + '-icon ' + IGNORED_CLASS;

        var domain = document.createElement('div');
        domain.textContent = getHost(element.src);
        domain.className += PLACEHOLDER_PREFIX + '-domain ' + IGNORED_CLASS;

        icon.appendChild(domain);
        placeHolder.appendChild(icon);

        return placeHolder;
    };

    var removePlaceholders = function() {
        if (!placeholdedElements) {
            return;
        }
        var elements = placeholdedElements;
        for (var i = 0; i < elements.length; i++) {
            var current = elements[i];
            var id = PLACEHOLDER_PREFIX + i;

            var placeHolder = $('#' + id).get(0);
            if (placeHolder) {
                var parent = placeHolder.parentNode;
                if (parent) {
                    parent.replaceChild(current, placeHolder);
                }
            }
        }

        placeholdedElements = null;
    };

    var placeholderClick = function(element) {
        selectionRenderer.remove();
        removePlaceholders();

        onElementSelectedHandler(element);
    };

    var makeIFrameAndEmbeddedSelector = function() {
        placeholdedElements = $('iframe:not(.' + IGNORED_CLASS + '),embed,object').filter(function(elem) {
            var isVisible = elem.style.display != 'none';
            var isHaveSize = elem.offsetWidth != 0 && elem.offsetHeight != 0;
            return isVisible && isHaveSize;
        });

        var elements = placeholdedElements;
        for (var i = 0; i < elements.length; i++) {
            var current = elements[i];
            (function(current) {
                var placeHolder = makePlaceholderImage(current);
                var id = PLACEHOLDER_PREFIX + i;

                placeHolder.setAttribute('id', id);

                var parent = current.parentNode;
                if (parent) {
                    parent.replaceChild(placeHolder, current);

                    $(placeHolder).on('gestureend', gestureEndHandler);
                    $(placeHolder).on('touchmove', touchMoveHandler);
                    $(placeHolder).on('touchend', function(e) {
                        e.preventDefault();

                        if (needIgnoreTouchEvent()) {
                            return true;
                        }

                        placeholderClick(current);
                    });

                    $('#' + id).on('click', function(e) {
                        e.preventDefault();

                        placeholderClick(current);
                    });

                }

            })(current);
        }
    };

    /********** Events ***************/
    var sgMouseoverHandler = function(e) {
        e.stopPropagation();

        if (unbound) {
            return true;
        }

        if (this == document.body || this == document.body.parentNode) {
            return false;
        }

        var parent = firstSelectedOrSuggestedParent(this);
        if (parent != null && parent != this) {
            selectionRenderer.add(parent);
        } else {
            selectionRenderer.add(this);
        }

        return false;
    };

    var sgMouseoutHandler = function() {
        if (unbound) {
            return true;
        }

        if (this == document.body || this == document.body.parentNode) {
            return false;
        }

        selectionRenderer.remove();
        return false;
    };

    // e.isTrusted checking for prevent programmatically events
    // see: https://github.com/AdguardTeam/AdguardAssistant/issues/134
    var sgMousedownHandler = function(e) {
        if (e && e.isTrusted === false) return false;
        if ($(e.target).hasClass(IGNORED_CLASS)) return false;
        e.preventDefault();
        e.stopImmediatePropagation();
        if (unbound) {
            return true;
        }

        var elem = e.target;
        if ($(elem).hasClass(selectionRenderer.BORDER_CLASS)) {
            //Clicked on one of our floating borders, target the element that we are bordering.
            elem = elem.target_elem || elem;
        }

        if (elem == document.body || elem == document.body.parentNode) {
            return;
        }

        makePredictionPath(elem);

        selectionRenderer.remove();

        onElementSelectedHandler(elem);

        return false;
    };

    /********** Touch event handlers ***************/
    var touchElementSelectHandler = function(e) {
        e.preventDefault();
        e.stopImmediatePropagation();

        sgMouseoverHandler.call(this, e);
        sgMousedownHandler.call(this, e);
    };

    var needIgnoreTouchEvent = function() {

        if (ignoreTouchEvent > 0) {

            ignoreTouchEvent--;
            return true;
        }

        return false;
    };

    var elementTouchendHandler = function(e) {
        if($(e.target).hasClass(IGNORED_CLASS)) return false;

        e.stopPropagation();

        if (needIgnoreTouchEvent()) {
            return true;
        }

        touchElementSelectHandler.call(this, e);
        return false;
    };

    var emptyEventHandler = function(e) {
        e.stopPropagation();

        return false;
    };

    var gestureEndHandler = function() {
        ignoreTouchEvent = 2;
        return true;
    };

    var touchMoveHandler = function() {
        ignoreTouchEvent = 1;
        return true;
    };


    var setupEventHandlers = function() {
        makeIFrameAndEmbeddedSelector();
        var elements = $('body *:not(.' + IGNORED_CLASS + ')');

        elements.forEach(function(el) {
            el.addEventListener('gestureend', gestureEndHandler);
            el.addEventListener('touchmove', touchMoveHandler);
            el.addEventListener('touchend', elementTouchendHandler, true);
            el.addEventListener('touchstart', emptyEventHandler);
            el.addEventListener('mouseover', sgMouseoverHandler);
            el.addEventListener('mouseout', sgMouseoutHandler);
            el.addEventListener('click', sgMousedownHandler, true);
        });
    };

    var deleteEventHandlers = function() {
        removePlaceholders();

        var elements = $('body *');
        elements.forEach(function(el) {
            el.removeEventListener('gestureend', gestureEndHandler);
            el.removeEventListener('touchmove', touchMoveHandler);
            el.removeEventListener('touchend', elementTouchendHandler, true);
            el.removeEventListener('touchstart', emptyEventHandler);
            el.removeEventListener('mouseover', sgMouseoverHandler);
            el.removeEventListener('mouseout', sgMouseoutHandler);
            el.removeEventListener('click', sgMousedownHandler, true);
        });
    };

    //Define default implementation of selection renderer.
    selectionRenderer = BorderSelectionRenderer;

    // PUBLIC API

    /**
     * Starts selector module.
     *
     * @param onElementSelected callback function
     * @param selectionRenderImpl optional object contains selection presentation implementation
     */
    api.init = function(onElementSelected, selectionRenderImpl) {

        onElementSelectedHandler = onElementSelected;
        if (selectionRenderImpl && typeof selectionRenderImpl === 'object') {
            selectionRenderer = selectionRenderImpl;
        }

        restrictedElements = ['html', 'body', 'head', 'base'].map(function(selector) {
            return $(selector).get(0);
        });
        predictionHelper = new DomPredictionHelper($, String);

        selectionRenderer.init();
        setupEventHandlers();
        unbound = false;
    };

    /**
     * Resets state of selector.
     * Clears current selection.
     */
    api.reset = function() {
        clearSelected();
    };

    /**
     * Destroys selector module.
     * Removes all selector elements and unbinds event handlers.
     */
    api.close = function() {
        unbound = true;

        selectionRenderer.finalize();
        deleteEventHandlers();
    };

    /**
     * Selects specified element.
     * Marks element as selected and holds selection on it.
     *
     * @param element
     */
    api.selectElement = function(element) {
        deleteEventHandlers();
        selectionRenderer.add(element);

        unbound = true;
    };

    /**
     Returns css class name.
     If this class assigns to HTML element, then Adguard Selector ignores it.
     */
    api.ignoreClassName = function() {
        return IGNORED_CLASS;
    };

    return api;

});

/**
 * Adguard rules constructor
 * @type {Function}
 */
var AdguardRulesConstructorLib = function (api) { // jshint ignore:line

    var CSS_RULE_MARK = '##';
    var RULE_OPTIONS_MARK = '$';

    var URLBLOCK_ATTRIBUTES = ["src", "data"];

    var linkHelper = document.createElement('a');

    /**
     * Constructs css selector for element using tag name, id and classed, like: tagName#id.class1.class2
     *
     * @param element Element
     * @param classList Override element classes (If classList is null, element classes will be used)
     * @param excludeTagName Omit tag name in selector
     * @param excludeId Omit element id in selector
     * @returns {string}
     */
    var makeDefaultCssFilter = function (element, classList, excludeTagName, excludeId) {
        var cssSelector = excludeTagName ? '' : element.tagName.toLowerCase();
        if (element.id && !excludeId) {
            cssSelector += '#' + cssEscape(element.id);
        }
        cssSelector += constructClassCssSelectorByAND(classList || element.classList);
        return cssSelector;
    };

    /**
     * Constructs css selector for element using parent elements and nth-child (first-child, last-child) pseudo classes.
     *
     * @param element Element
     * @param options Construct options. For example: {excludeTagName: false, excludeId: false, classList: []}
     * @returns {string}
     */
    var makeCssNthChildFilter = function (element, options) {

        options = options || {};

        var classList = options.classList;

        var excludeTagNameOverride = 'excludeTagName' in options;
        var excludeTagName = options.excludeTagName;

        var excludeIdOverride = 'excludeId' in options;
        var excludeId = options.excludeId;

        var path = [];
        var el = element;
        while (el.parentNode) {
            var nodeName = el && el.nodeName ? el.nodeName.toUpperCase() : "";
            if (nodeName === "BODY") {
                break;
            }
            if (el.id) {
                /**
                 * Be default we don't include tag name and classes to selector for element with id attribute
                 */
                var cssSelector = '';
                if (el === element) {
                    cssSelector = makeDefaultCssFilter(el, classList || [], excludeTagNameOverride ? excludeTagName : true, excludeIdOverride ? excludeId : false);
                } else {
                    cssSelector = makeDefaultCssFilter(el, [], true, false);
                }
                path.unshift(cssSelector);
                break;
            } else {
                var c = 1;
                for (var e = el; e.previousSibling; e = e.previousSibling) {
                    if (e.previousSibling.nodeType === 1) {
                        c++;
                    }
                }

                var cldCount = 0;
                for (var i = 0; el.parentNode && i < el.parentNode.childNodes.length; i++) {
                    cldCount += el.parentNode.childNodes[i].nodeType === 1 ? 1 : 0;
                }

                var ch;
                if (cldCount === 0 || cldCount === 1) {
                    ch = "";
                } else if (c === 1) {
                    ch = ":first-child";
                } else if (c === cldCount) {
                    ch = ":last-child";
                } else {
                    ch = ":nth-child(" + c + ")";
                }

                /**
                 * By default we include tag name and element classes to selector for element without id attribute
                 */
                if (el === element) {
                    var p = makeDefaultCssFilter(el, classList, excludeTagNameOverride ? excludeTagName : false, excludeId);
                    p += ch;
                    path.unshift(p);
                } else {
                    path.unshift(makeDefaultCssFilter(el, el.classList, false, false) + ch);
                }

                el = el.parentNode;
            }
        }
        return path.join(" > ");
    };

    /**
     * Constructs element selector for matching elements that contain any of classes in original element
     * For example <el class="cl1 cl2 cl3"></el> => .cl1, .cl2, .cl3
     *
     * @param element Element
     * @param classList Override element classes (If classList is null, element classes will be used)
     * @returns {string}
     */
    var makeSimilarCssFilter = function (element, classList) {
        return constructClassCssSelectorByOR(classList || element.classList);
    };

    /**
     * Creates css rule text
     * @param element Element
     * @param options Construct options. For example: {cssSelectorType: 'STRICT_FULL', excludeTagName: false, excludeId: false, classList: []}
     * @returns {string}
     */
    var constructCssRuleText = function (element, options) {

        if (!element) {
            return;
        }

        options = options || {};
        var cssSelectorType = options.cssSelectorType || 'STRICT_FULL';

        var selector;
        switch (cssSelectorType) {
            case 'STRICT_FULL':
                selector = makeCssNthChildFilter(element, options);
                break;
            case 'STRICT':
                selector = makeDefaultCssFilter(element, options.classList, options.excludeTagName, options.excludeId);
                break;
            case 'SIMILAR':
                selector = makeSimilarCssFilter(element, options.classList, true);
                break;
        }

        return selector ? CSS_RULE_MARK + selector : '';
    };

    var constructUrlBlockRuleText = function (element, urlBlockAttribute, oneDomain, domain) {

        if (!urlBlockAttribute) {
            return null;
        }

        var blockUrlRuleText = urlBlockAttribute.replace(/^http:\/\/(www\.)?/, "||");
        if (blockUrlRuleText.indexOf('.') === 0) {
            blockUrlRuleText = blockUrlRuleText.substring(1);
        }

        if (!oneDomain) {
            blockUrlRuleText = blockUrlRuleText + RULE_OPTIONS_MARK + "domain=" + domain;
        }

        return blockUrlRuleText;
    };

    var getUrlBlockAttribute = function (element) {
        if (!element || !element.getAttribute) {
            return null;
        }

        for (var i = 0; i < URLBLOCK_ATTRIBUTES.length; i++) {
            var attr = URLBLOCK_ATTRIBUTES[i];
            var value = element.getAttribute(attr);
            if (isValidUrl(value)) {
                return value;
            }
        }

        return null;
    };

    var haveUrlBlockParameter = function (element) {
        var value = getUrlBlockAttribute(element);
        return value && value !== '';
    };

    var haveClassAttribute = function (element) {
        return element.classList && element.classList.length > 0;
    };

    var haveIdAttribute = function (element) {
        return element.id && element.id.trim() !== '';
    };

    var cropDomain = function (url) {
        var domain = getUrl(url).host;
        return domain.replace("www.", "").replace(/:\d+/, '');
    };

    var getUrl = function (url) {
        var pattern = "^(([^:/\\?#]+):)?(//(([^:/\\?#]*)(?::([^/\\?#]*))?))?([^\\?#]*)(\\?([^#]*))?(#(.*))?$";
        var rx = new RegExp(pattern);
        var parts = rx.exec(url);

        return {
            host: parts[4] || "",
            path: parts[7] || ""
        };
    };

    var isValidUrl = function (value) {
        if (value) {
            linkHelper.href = value;
            if (linkHelper.hostname) {
                return true;
            }
        }

        return false;
    };

    /**
     * Constructs css selector by combining classes by AND
     * @param classList
     * @returns {string}
     */
    var constructClassCssSelectorByAND = function (classList) {
        var selectors = [];
        if (classList) {
            for (var i = 0; i < classList.length; i++) {
                selectors.push('.' + cssEscape(classList[i]));
            }
        }
        return selectors.join('');
    };

    /**
     * Constructs css selector by combining classes by OR
     * @param classList
     * @returns {string}
     */
    var constructClassCssSelectorByOR = function (classList) {
        var selectors = [];
        if (classList) {
            for (var i = 0; i < classList.length; i++) {
                selectors.push('.' + cssEscape(classList[i]));
            }
        }
        return selectors.join(', ');
    };

    /**
     * Utility method
     *
     * @param element
     * @returns {string}
     */
    api.makeCssNthChildFilter = makeCssNthChildFilter;

    /**
     * Returns detailed element info
     *
     * @param element
     */
    api.getElementInfo = function (element) {

        // Convert attributes to array
        var attributes = [];
        var elementAttributes = element.attributes;
        if (elementAttributes) {
            for (var i = 0; i < elementAttributes.length; i++) {
                var attr = elementAttributes[i];
                attributes.push({
                    name: attr.name,
                    value: attr.value
                });
            }
        }

        return {
            tagName: element.tagName,
            attributes: attributes,
            urlBlockAttributeValue: getUrlBlockAttribute(element),
            haveUrlBlockParameter: haveUrlBlockParameter(element),
            haveClassAttribute: haveClassAttribute(element),
            haveIdAttribute: haveIdAttribute(element)
        };
    };

    /**
     * Constructs css selector for specified rule
     *
     * @param ruleText rule text
     * @returns {string} css style selector
     */
    api.constructRuleCssSelector = function (ruleText) {
        if (!ruleText) {
            return null;
        }

        var index = ruleText.indexOf(CSS_RULE_MARK);
        var optionsIndex = ruleText.indexOf(RULE_OPTIONS_MARK);

        if (index >= 0) {
            return ruleText.substring(index + CSS_RULE_MARK.length, optionsIndex >= 0 ? optionsIndex : ruleText.length);
        }

        var s = ruleText.substring(0, optionsIndex);
        s = s.replace(/[\|]|[\^]/g, '');

        if (isValidUrl(s)) {
            return '[src*="' + s + '"]';
        }

        return null;
    };

    /**
     * Constructs adguard rule text from element node and specified options
     *
     * var options = {
	 *	urlMask: url block attributes,
	 *	isBlockOneDomain: boolean,
	 *	url: url,
	 *  attributes: attributesSelectorText,
	 *  ruleType: (URL, CSS)
	 *  cssSelectorType: (STRICT_FULL, STRICT, SIMILAR),
	 *  excludeTagName: false, (Exclude element tag name from selector)
	 *  excludeId: false, (Exclude element identifier from selector)
	 *  classList: [] (Override element classes (If classList is null, element classes will be used))
	 * }
     *
     * @param element
     * @param options
     * @returns {*}
     */
    api.constructRuleText = function (element, options) {

        var croppedDomain = cropDomain(options.url);

        var ruleType = options.ruleType;

        if (ruleType === 'URL') {
            var blockUrlRuleText = constructUrlBlockRuleText(element, options.urlMask, options.isBlockOneDomain, croppedDomain);
            if (blockUrlRuleText) {
                return blockUrlRuleText;
            }
        }

        var result;

        if (ruleType === 'CSS') {

            result = constructCssRuleText(element, options);

            // Append html attributes to css selector
            if (options.attributes) {
                result = (result ? result : CSS_RULE_MARK + result) + options.attributes;
            }
        }

        if (!options.isBlockOneDomain) {
            result = croppedDomain + result;
        }

        return result;
    };

    return api;

};
/**
 * Manages iframe and it's content
 * @param $
 * @param log
 * @param selector
 * @param localization
 * @param resources
 * @returns {{showSelectorMenu: showSelectorMenu, showSliderMenu: showSliderMenu, setButtonPosition: setButtonPosition, onCloseMenu: CustomEvent, onShowMenuItem: CustomEvent, removeIframe: removeIframe, resizeSliderMenuToAdvanced: resizeSliderMenuToAdvanced, resizeSliderMenuToNormal: resizeSliderMenuToNormal}}
 * @constructor
 */
/* global StringUtils, Ioc, DetailedMenuController, SelectorMenuController, SliderMenuControllerMobile, BlockPreviewController, SettingsMenuController */
var IframeControllerMobile = function ($, log, selector, localization, resources) { // jshint ignore:line
    var iframe = null;
    var currentItem = null;
    var iframePositionOffset = 5;

    var onCloseMenu = new CustomEvent();
    var onShowMenuItem = new CustomEvent();

    var createIframe = function (onIframeLoadCallback) {
        log.debug('Creating iframe');
        iframe = $('<iframe/>');
        var css = {
            position: 'fixed',
            left: 0,
            top: 'auto',
            bottom: '1px',
            clip: 'auto',
            width: '100%',
            height: '70px',
            'z-index': 999999999999999
        };
        var attributes = {
            'id': 'adguard-assistant-dialog',
            'class': selector.ignoreClassName(),
            frameBorder: 0,
            allowTransparency: 'true'
        };
        Object.keys(css).forEach(function (item) {
            iframe.css(item, css[item]);
        });
        Object.keys(attributes).forEach(function (item) {
            iframe.attr(item, attributes[item]);
        });
        var iframeAlreadyLoaded = false;
        $(iframe).on('load', function () {
            if (iframeAlreadyLoaded) {
                //IE calls load each time when we use document.close
                return;
            }
            iframeAlreadyLoaded = true;
            appendDefaultStyle();
            onIframeLoadCallback();
        });

        var body = $('body')[0];

        if (!body) {
            log.error("Body not found");
            return;
        }

        if (document.getElementById('adguard-assistant-dialog')) {
            log.error("Iframe already added");
            return;
        }

        body.appendChild(iframe[0]);

        var selectorCSS = document.createElement('style');
        var styles = resources.getResource('selector.css');

        if (selectorCSS.styleSheet) {
            selectorCSS.styleSheet.cssText = styles;
        } else {
            selectorCSS.appendChild(document.createTextNode(styles));
        }

        document.getElementsByTagName("head")[0].appendChild(selectorCSS);
    };

    var appendDefaultStyle = function () {
        try {
            log.info('Iframe loaded writing styles');
            var doc = iframe[0].contentDocument;
            doc.open();
            doc.write(
                StringUtils.format("<html><head>{0}</head></html>",
                StringUtils.format('<style {0} type="text/css">{1}{2}</style>',
                getStyleNonce(),
                resources.getResource('style.css'),
                resources.getResource('mobile-style.css')))
            );
            doc.close();
        } catch (ex) {
            log.error(ex);
        }
    };

    var getStyleNonce = function () {
        return '';
    };

    var showMenuItem = function (viewName, controller, width, height, options) {
        log.debug(StringUtils.format("Showing menu item: {0}", viewName));
        if (currentItem === viewName) {
            return;
        }
        var onIframeLoad = function () {
            var frameElement = iframe[0];
            frameElement.width = width;
            frameElement.height = height;
            var view = $(resources.getResource(viewName))[0];
            appendContent(view);
            localize();
            if (!options) {
                options = {};
            }
            controller.init(frameElement, options);
            currentItem = viewName;
            onShowMenuItem.notify();
        };
        if (!iframe) {
            createIframe(onIframeLoad);
            return;
        }
        onIframeLoad();
    };

    var showSelectorMenu = function () {
        var controller = Ioc.get(SelectorMenuController);
        var options = {dragElement: 'head'};
        showMenuItem('selectorMenu.html', controller, 'auto', 'auto', options);
        setCloseEventIfNotHitIframe(false);
    };

    var showSliderMenu = function (element) {
        var controller = Ioc.get(SliderMenuControllerMobile);
        var options = {element: element, dragElement: 'head'};
        showMenuItem('sliderMenu.html', controller, 'auto', 'auto', options);
        setCloseEventIfNotHitIframe(false);
    };

    var localize = function () {
        var elements = iframe[0].contentDocument.querySelectorAll("[i18n]");
        for (var i = 0; i < elements.length; i++) {
            var message = localization.getMessage(elements[i].getAttribute("i18n"));
            localization.translateElement(elements[i], message);
        }
    };

    var setCloseEventIfNotHitIframe = function (setEvent) {
        document.removeEventListener('click', removeIframe);

        if(setEvent) {
            window.setTimeout(function () {
                document.addEventListener('click', removeIframe);
            }, 150);
        }
    };

    var resizeSliderMenuToAdvanced = function () {
        resizeIframe(null, sliderMenuHeight.advanced);
    };

    var resizeSliderMenuToNormal = function () {
        resizeIframe(null, sliderMenuHeight.normal);
    };

    var appendContent = function (view) {
        var body = iframe[0].contentDocument.body;
        for (var i = 0; i < body.children.length; i++) {
            body.removeChild(body.children[i]);
        }
        body.appendChild(view);
    };

    // e.isTrusted checking for prevent programmatically events
    // see: https://github.com/AdguardTeam/AdguardAssistant/issues/134
    var removeIframe = function (e) {
        if (e && e.isTrusted === false) return false;
        document.removeEventListener('click', removeIframe);
        window.removeEventListener('resize', showSelectorMenu);
        $('body')[0].removeChild(iframe[0]);
        iframe = null;
        currentItem = null;
        selector.close();
        onCloseMenu.notify();
    };

    return {
        showSelectorMenu: showSelectorMenu,
        showSliderMenu: showSliderMenu,
        onCloseMenu: onCloseMenu,
        onShowMenuItem: onShowMenuItem,
        removeIframe: removeIframe,
        resizeSliderMenuToAdvanced: resizeSliderMenuToAdvanced,
        resizeSliderMenuToNormal: resizeSliderMenuToNormal
    };
};

/**
 * Slider widget
 * @type {Function}
 */
var SliderWidget = (function(api, $) { // jshint ignore:line
    var PLACEHOLDER_CLASS = "adg-slide ui-slider ui-slider-horizontal ui-widget ui-widget-content ui-corner-all";
    var HANDLE_CLASS = "ui-slider-handle";
    var HANDLE_FULL_CLASS = "ui-slider-handle ui-state-default ui-corner-all";
    var TICK_CLASS = "tick";
    var TICK_FULL_CLASS = "tick ui-widget-content";
    var TICK_LEFT_COLOR = "#36BA53";
    var TICK_RIGHT_COLOR = "#E0DFDB";

    var placeholder = null;

    var min = 0;
    var max = 1;
    var value = 0;
    var sliderArea = null;

    var onValueChanged = null;


    var refresh = function() {
        var handle = placeholder.querySelectorAll("." + HANDLE_CLASS);
        $(handle).css('left', (value - 1) * 100 / (max - min) + "%");

        var ticks = placeholder.querySelectorAll("." + TICK_CLASS);
        for (var i = 0; i < ticks.length; i++) {
            if (i + 1 < value) {
                $(ticks[i]).css('background-color', TICK_LEFT_COLOR);
            } else {
                $(ticks[i]).css('background-color', TICK_RIGHT_COLOR);
            }
        }
    };

    var render = function() {
        $(placeholder).addClass(PLACEHOLDER_CLASS);

        var handle = document.createElement('span');
        handle.setAttribute('class', HANDLE_FULL_CLASS);
        placeholder.appendChild(handle);

        var count = max - min;
        var prepare = function(i) {
            var tick = document.createElement('div');
            tick.setAttribute('class', TICK_FULL_CLASS);
            tick.style.left = (100 / count * i) + '%';
            tick.style.width = (100 / count) + '%';

            placeholder.appendChild(tick);
        };

        for (var i = 0; i < count; i++) {
            prepare(i);
        }

        refresh();
    };

    var setValue = function(v) {
        if (v < min) {
            value = min;
        } else if (v > max) {
            value = max;
        } else {
            value = v;
        }

        refresh();

        onValueChanged(value);
    };

    var bindEvents = function() {
        var $placeholder = $(placeholder);
        var handle = placeholder.querySelectorAll("." + HANDLE_CLASS);
        var $handle = $(handle);
        var $sliderArea = $(sliderArea);

        $(document).on('mouseup touchend pointerup', function() {
            $sliderArea.off('mousemove touchmove pointermove', onMouseMove);
        });

        var rect = placeholder.getBoundingClientRect();
        var sliderWidth = rect.width;
        var offsetLeft = rect.left + document.body.scrollLeft;

        var getSliderValue = function(pageX) {
            return Math.round((max - min) / sliderWidth * (pageX - offsetLeft) + min);
        };

        var onClick = function(e) {
            //calculate the correct position of the slider set the value
            var value = getSliderValue(e.pageX);
            setValue(value);
        };

        var onMouseMove = function(e) {
            //calculate the correct position of the slider set the value
            var value = getSliderValue(e.pageX);
            setValue(value);
        };

        var onMouseDown = function(e) {
            e.stopPropagation();
            e.preventDefault();
            e.cancelBubble = true;
            e.returnValue = false;

            $sliderArea.on('mousemove touchmove pointermove', onMouseMove);
        };

        $placeholder.on('click', onClick);
        $placeholder.on('mousedown touchstart', onMouseDown);

        $sliderArea.on('mouseup touchend pointerup', function() {
            $sliderArea.off('mousemove touchmove pointermove', onMouseMove);
        });

        $sliderArea.on('mouseleave', function() {
            $sliderArea.off('mousemove touchmove pointermove', onMouseMove);
        });
    };

    /**
     *
     * @param placeholderElement
     * @param options
     */
    api.init = function(placeholderElement, options) {
        placeholder = placeholderElement;

        min = options.min;
        max = options.max;
        value = options.value;
        onValueChanged = options.onValueChanged;
        sliderArea = options.sliderArea;

        render();
        bindEvents();
    };

    return api;
});

/**
 * Object that manages wot data
 * @returns {{registerWotEventHandler: Function, getWotData: Function, getWotScorecardUrl: Function, WOT_URL: string}}
 * @constructor
 */
/* global StringUtils */
var Wot = function () { // jshint ignore:line
    var wotUrlScorecardTemplate = 'http://adguard.com/wot-scorecard.html?domain={0}';
    var WOT_URL = 'http://adguard.com/wot.html';
    var wotData = null;

    /*
     Waiting for event from wot extension. Send event back to stop
     firing wot extension events
     */
    var registerWotEventHandler = function () {
        document.addEventListener('wot-score', function (e) {
            wotData = e.data.wotData;
            fireEvent('wot-accepted', null);
        });
    };

    var getWotData = function () {
        return wotData;
    };

    var getWotScorecardUrl = function (url) {
        return StringUtils.format(wotUrlScorecardTemplate, url);
    };

    var fireEvent = function (name, data) {
        var event = document.createEvent("Events");
        event.initEvent(name, true, true);
        event.data = data;
        document.dispatchEvent(event);
    };

    return {
        registerWotEventHandler: registerWotEventHandler,
        getWotData: getWotData,
        getWotScorecardUrl: getWotScorecardUrl,
        WOT_URL: WOT_URL
    };
};

var ru = {
    "menu_filtration_status": {
        "message": "\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u0430 \u044d\u0442\u043e\u043c \u0441\u0430\u0439\u0442\u0435"
    },
    "menu_do_not_filter_30_sec": {
        "message": "\u041d\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u0442\u044c 30 \u0441\u0435\u043a\u0443\u043d\u0434"
    },
    "menu_block_ad_on_site": {
        "message": "\u0417\u0430\u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0435\u043a\u043b\u0430\u043c\u0443 \u043d\u0430 \u0441\u0430\u0439\u0442\u0435"
    },
    "menu_report_abuse": {
        "message": "\u041f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0430\u0439\u0442"
    },
    "menu_site_report": {
        "message": "\u041e\u0442\u0447\u0451\u0442 \u043e \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 \u0441\u0430\u0439\u0442\u0430"
    },
    "menu_settings": {
        "message": "\u041d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043f\u043e\u043c\u043e\u0449\u043d\u0438\u043a"
    },
    "assistant_select_element": {
        "message": " \u0411\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430"
    },
    "assistant_select_element_ext": {
        "message": "\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0430\u0434\u043e \u0437\u0430\u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u0442\u044c"
    },
    "assistant_select_element_cancel": {
        "message": "\u041e\u0442\u043c\u0435\u043d\u0430"
    },
    "assistant_block_element": {
        "message": "\u0411\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430"
    },
    "assistant_block_element_explain": {
        "message": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u0442\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u043e \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430"
    },
    "assistant_slider_explain": {
        "message": "\u041f\u0435\u0440\u0435\u043c\u0435\u0449\u0430\u0439\u0442\u0435 \u0431\u0435\u0433\u0443\u043d\u043e\u043a, \u0447\u0442\u043e\u0431\u044b \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0440\u0430\u0437\u043c\u0435\u0440 \u0431\u043b\u043e\u043a\u0430, \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0431\u0443\u0434\u0435\u0442 \u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0430\u0432\u0438\u043b\u043e:"
    },
    "assistant_slider_min": {
        "message": "MIN"
    },
    "assistant_slider_max": {
        "message": "MAX"
    },
    "assistant_extended_settings": {
        "message": "\u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u044b\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438"
    },
    "assistant_apply_rule_to_all_sites": {
        "message": "\u041f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u0440\u0430\u0432\u0438\u043b\u043e \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0441\u0430\u0439\u0442\u043e\u0432"
    },
    "assistant_block_by_reference": {
        "message": "\u0411\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0435"
    },
    "assistant_block_similar": {
        "message": "\u0411\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u0445\u043e\u0436\u0438\u0435"
    },
    "assistant_another_element": {
        "message": "\u0412\u044b\u0431\u0440\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u043e\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442"
    },
    "assistant_preview": {
        "message": "\u041f\u0440\u0435\u0434\u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440"
    },
    "assistant_block": {
        "message": "\u0417\u0430\u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u0442\u044c"
    },
    "assistant_settings": {
        "message": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043f\u043e\u043c\u043e\u0449\u043d\u0438\u043a\u0430"
    },
    "assistant_preview_header": {
        "message": "\u0411\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 - \u043f\u0440\u0435\u0434\u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440"
    },
    "assistant_preview_header_info": {
        "message": "\u0423\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c, \u0447\u0442\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0437\u0430\u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u043d \u043a\u0430\u043a \u0437\u0430\u0434\u0443\u043c\u0430\u043d\u043e"
    },
    "assistant_preview_end": {
        "message": "\u0417\u0430\u043a\u043e\u043d\u0447\u0438\u0442\u044c \u043f\u0440\u0435\u0434\u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440"
    },
    "wot_unknown_description": {
        "message": "\u0420\u0435\u043f\u0443\u0442\u0430\u0446\u0438\u044f \u043d\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0430"
    },
    "wot_bad_description": {
        "message": "\u0423 \u0441\u0430\u0439\u0442\u0430 \u043e\u0447\u0435\u043d\u044c \u043f\u043b\u043e\u0445\u0430\u044f \u0440\u0435\u0443\u0442\u0430\u0446\u0438\u044f \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c "
    },
    "wot_poor_description": {
        "message": "\u0423 \u0441\u0430\u0439\u0442\u0430 \u043f\u043b\u043e\u0445\u0430\u044f \u0440\u0435\u0443\u0442\u0430\u0446\u0438\u044f \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c "
    },
    "wot_unsatisfactory_description": {
        "message": "\u0423 \u0441\u0430\u0439\u0442\u0430 \u043d\u0435\u0443\u0434\u0432\u043e\u043b\u0435\u0442\u0432\u043e\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0440\u0435\u0443\u0442\u0430\u0446\u0438\u044f \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c "
    },
    "wot_good_description": {
        "message": "\u0423 \u0441\u0430\u0439\u0442\u0430 \u0445\u043e\u0440\u043e\u0448\u0430\u044f \u0440\u0435\u0443\u0442\u0430\u0446\u0438\u044f \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c "
    },
    "wot_excellent_description": {
        "message": "\u0423 \u0441\u0430\u0439\u0442\u0430 \u043e\u0442\u043b\u0438\u0447\u043d\u0430\u044f \u0440\u0435\u0443\u0442\u0430\u0446\u0438\u044f \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c "
    },
    "settings_choose_size_and_position": {
        "message": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u0442\u0435 \u0440\u0430\u0437\u043c\u0435\u0440 \u0438 \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043f\u043e\u043c\u043e\u0449\u043d\u0438\u043a\u0430 Adguard"
    },
    "settings_icon_size": {
        "message": "\u0420\u0430\u0437\u043c\u0435\u0440 \u0438\u043a\u043e\u043d\u043a\u0438:"
    },
    "settings_small": {
        "message": "\u041c\u0430\u043b\u0435\u043d\u044c\u043a\u0430\u044f"
    },
    "settings_big": {
        "message": "\u0411\u043e\u043b\u044c\u0448\u0430\u044f"
    },
    "settings_position": {
        "message": "\u0420\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435:"
    },
    "settings_left_top": {
        "message": "\u0412\u0432\u0435\u0440\u0445\u0443 \u0441\u043b\u0435\u0432\u0430"
    },
    "settings_right_top": {
        "message": "\u0412\u0432\u0435\u0440\u0445\u0443 \u0441\u043f\u0440\u0430\u0432\u0430"
    },
    "settings_left_bottom": {
        "message": "\u0412\u043d\u0438\u0437\u0443 \u0441\u043b\u0435\u0432\u0430"
    },
    "settings_right_bottom": {
        "message": "\u0412\u043d\u0438\u0437\u0443 \u0441\u043f\u0440\u0430\u0432\u0430"
    },
    "settings_cancel": {
        "message": "\u041e\u0442\u043c\u0435\u043d\u0430"
    },
    "settings_save": {
        "message": "\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438"
    }
}
var en = {
    "menu_filtration_status": {
        "message": "Filtering on this website"
    },
    "menu_do_not_filter_30_sec": {
        "message": "Do not filter for 30 seconds"
    },
    "menu_block_ad_on_site": {
        "message": "Block ad on this website"
    },
    "menu_report_abuse": {
        "message": "Report the website"
    },
    "menu_site_report": {
        "message": "Website security report"
    },
    "menu_settings": {
        "message": "Assistant settings"
    },
    "assistant_select_element": {
        "message": "Element blocking"
    },
    "assistant_select_element_ext": {
        "message": "Choose an element on the page to block"
    },
    "assistant_select_element_cancel": {
        "message": "Cancel"
    },
    "assistant_block_element": {
        "message": "Element blocking"
    },
    "assistant_block_element_explain": {
        "message": "Adjust element blocking rule"
    },
    "assistant_slider_explain": {
        "message": "Move the slider to change the size of the frame the new rule will work for:"
    },
    "assistant_slider_min": {
        "message": "MIN"
    },
    "assistant_slider_max": {
        "message": "MAX"
    },
    "assistant_extended_settings": {
        "message": "Advanced settings"
    },
    "assistant_apply_rule_to_all_sites": {
        "message": "Apply the rule to all websites"
    },
    "assistant_block_by_reference": {
        "message": "Block by reference link"
    },
    "assistant_block_similar": {
        "message": "Block similar"
    },
    "assistant_another_element": {
        "message": "Select another element"
    },
    "assistant_preview": {
        "message": "Preview"
    },
    "assistant_block": {
        "message": "Block"
    },
    "assistant_settings": {
        "message": "Assistant settings"
    },
    "assistant_preview_header": {
        "message": "Element blocking - preview"
    },
    "assistant_preview_header_info": {
        "message": "Make sure that element is blocked as intended"
    },
    "assistant_preview_end": {
        "message": "Exit preview"
    },
    "wot_unknown_description": {
        "message": "Reputation is not defined"
    },
    "wot_bad_description": {
        "message": "This website has very bad reputation\naccording to "
    },
    "wot_poor_description": {
        "message": "This website has bad reputation\naccording to "
    },
    "wot_unsatisfactory_description": {
        "message": "This website has poor reputation\naccording to "
    },
    "wot_good_description": {
        "message": "This website has good reputation\naccording to "
    },
    "wot_excellent_description": {
        "message": "This website has excellent reputation\naccording to "
    },
    "settings_choose_size_and_position": {
        "message": "Adjust Adguard Assistant size and position"
    },
    "settings_icon_size": {
        "message": "Icon size:"
    },
    "settings_small": {
        "message": "Small"
    },
    "settings_big": {
        "message": "Large"
    },
    "settings_position": {
        "message": "Position:"
    },
    "settings_left_top": {
        "message": "Top left"
    },
    "settings_right_top": {
        "message": "Top right"
    },
    "settings_left_bottom": {
        "message": "Bottom left"
    },
    "settings_right_bottom": {
        "message": "Bottom right"
    },
    "settings_cancel": {
        "message": "Cancel"
    },
    "settings_save": {
        "message": "Save changes"
    }
}
var fa = {
    "menu_filtration_status": {
        "message": "\u0641\u06cc\u0644\u062a\u0631\u06cc\u0646\u06af \u062f\u0631 \u0627\u06cc\u0646 \u0648\u0628\u0633\u0627\u06cc\u062a"
    },
    "menu_do_not_filter_30_sec": {
        "message": "\u0628\u0647 \u0645\u062f\u062a 30 \u062b\u0627\u0646\u06cc\u0647 \u0641\u06cc\u0644\u062a\u0631 \u0646\u06a9\u0646"
    },
    "menu_block_ad_on_site": {
        "message": "\u0645\u0633\u062f\u0648\u062f\u0633\u0627\u0632\u06cc \u062a\u0628\u0644\u06cc\u063a \u062f\u0631 \u0627\u06cc\u0646 \u0648\u0628\u0633\u0627\u06cc\u062a"
    },
    "menu_report_abuse": {
        "message": "\u06af\u0632\u0627\u0631\u0634 \u0648\u0628\u0633\u0627\u06cc\u062a"
    },
    "menu_site_report": {
        "message": "\u06af\u0632\u0627\u0631\u0634 \u0627\u0645\u0646\u06cc\u062a\u06cc \u0648\u0628\u0633\u0627\u06cc\u062a"
    },
    "menu_settings": {
        "message": "\u062a\u0646\u0638\u06cc\u0645\u0627\u062a \u062f\u0633\u062a\u06cc\u0627\u0631"
    },
    "assistant_select_element": {
        "message": "\u0645\u0633\u062f\u0648\u062f\u0633\u0627\u0632\u06cc \u0639\u0646\u0635\u0631"
    },
    "assistant_select_element_ext": {
        "message": "\u0639\u0646\u0635\u0631\u06cc \u062f\u0631 \u0635\u0641\u062d\u0647 \u0628\u0631\u0627\u06cc \u0645\u0633\u062f\u0648\u062f\u0633\u0627\u0632\u06cc \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f"
    },
    "assistant_select_element_cancel": {
        "message": "\u0644\u063a\u0648"
    },
    "assistant_block_element": {
        "message": "\u0645\u0633\u062f\u0648\u062f\u0633\u0627\u0632\u06cc \u0639\u0646\u0635\u0631"
    },
    "assistant_block_element_explain": {
        "message": "\u062a\u0646\u0638\u06cc\u0645 \u062f\u0633\u062a\u0648\u0631 \u0645\u0633\u062f\u0648\u062f\u0633\u0627\u0632\u06cc \u0639\u0646\u0635\u0631"
    },
    "assistant_slider_explain": {
        "message": "\u062c\u0627\u0628\u062c\u0627\u06cc\u06cc \u0644\u063a\u0632\u0646\u062f\u0647 \u0628\u0631\u0627\u06cc \u062a\u063a\u06cc\u06cc\u0631 \u0627\u0646\u062f\u0627\u0632\u0647 \u0641\u0631\u06cc\u0645 \u06a9\u0647 \u062f\u0633\u062a\u0648\u0631 \u062c\u062f\u06cc\u062f\u06cc \u06a9\u0627\u0631 \u062e\u0648\u0627\u0647\u062f \u06a9\u0631\u062f:"
    },
    "assistant_slider_min": {
        "message": "\u062d\u062f\u0627\u0642\u0644"
    },
    "assistant_slider_max": {
        "message": "\u062d\u062f\u0627\u06a9\u062b\u0631"
    },
    "assistant_extended_settings": {
        "message": "\u062a\u0646\u0638\u06cc\u0645\u0627\u062a \u067e\u06cc\u0634\u0631\u0641\u062a\u0647"
    },
    "assistant_apply_rule_to_all_sites": {
        "message": "\u0627\u0650\u0639\u0645\u0627\u0644 \u062f\u0633\u062a\u0648\u0631 \u062f\u0631 \u0647\u0645\u0647 \u0648\u0628\u0633\u0627\u06cc\u062a \u0647\u0627"
    },
    "assistant_block_by_reference": {
        "message": "\u0645\u0633\u062f\u0648\u062f\u0633\u0627\u0632\u06cc \u0628\u0627 \u0644\u06cc\u0646\u06a9 \u0645\u0631\u062c\u0639"
    },
    "assistant_block_similar": {
        "message": "\u0645\u0633\u062f\u0648\u062f\u0633\u0627\u0632\u06cc \u0645\u0634\u0627\u0628\u0647"
    },
    "assistant_another_element": {
        "message": "\u0639\u0646\u0635\u0631 \u062f\u06cc\u06af\u0631\u06cc \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f"
    },
    "assistant_preview": {
        "message": "\u067e\u06cc\u0634\u0646\u0645\u0627\u06cc\u0634"
    },
    "assistant_block": {
        "message": "\u0645\u0633\u062f\u0648\u062f"
    },
    "assistant_settings": {
        "message": "\u062a\u0646\u0638\u06cc\u0645\u0627\u062a \u062f\u0633\u062a\u06cc\u0627\u0631"
    },
    "assistant_preview_header": {
        "message": "\u0645\u0633\u062f\u0648\u062f\u0633\u0627\u0632\u06cc \u0639\u0646\u0635\u0631 - \u067e\u06cc\u0634\u0646\u0645\u0627\u06cc\u0634"
    },
    "assistant_preview_header_info": {
        "message": "\u0645\u0637\u0645\u0626\u0646 \u0634\u0648\u06cc\u062f \u0639\u0646\u0635\u0631 \u0628\u0647 \u0634\u06a9\u0644 \u062f\u0644\u062e\u0648\u0627\u0647 \u0645\u0633\u062f\u0648\u062f \u0634\u0648\u062f"
    },
    "assistant_preview_end": {
        "message": "\u062e\u0631\u0648\u062c \u0627\u0632 \u067e\u06cc\u0634\u0646\u0645\u0627\u06cc\u0634"
    },
    "wot_unknown_description": {
        "message": "\u0627\u0639\u062a\u0628\u0627\u0631 \u062a\u0639\u0631\u06cc\u0641 \u0646\u0634\u062f\u0647 \u0627\u0633\u062a"
    },
    "wot_bad_description": {
        "message": "\u0627\u06cc\u0646 \u0648\u0628\u0633\u0627\u06cc\u062a \u0627\u0639\u062a\u0628\u0627\u0631 \u062e\u06cc\u0644\u06cc \u0628\u062f\u06cc \u062f\u0627\u0631\u062f\n\u0628\u0631 \u0637\u0628\u0642 "
    },
    "wot_poor_description": {
        "message": "\u0627\u06cc\u0646 \u0648\u0628\u0633\u0627\u06cc\u062a \u0627\u0639\u062a\u0628\u0627\u0631 \u0628\u062f\u06cc \u062f\u0627\u0631\u062f\n\u0628\u0631 \u0637\u0628\u0642 "
    },
    "wot_unsatisfactory_description": {
        "message": "\u0627\u06cc\u0646 \u0648\u0628\u0633\u0627\u06cc\u062a \u0627\u0639\u062a\u0628\u0627\u0631 \u06a9\u0645\u06cc \u062f\u0627\u0631\u062f\n\u0628\u0631 \u0637\u0628\u0642 "
    },
    "wot_good_description": {
        "message": "\u0627\u06cc\u0646 \u0648\u0628\u0633\u0627\u06cc\u062a \u0627\u0639\u062a\u0628\u0627\u0631 \u062e\u0648\u0628\u06cc \u062f\u0627\u0631\u062f\n\u0628\u0631 \u0637\u0628\u0642 "
    },
    "wot_excellent_description": {
        "message": "\u0627\u06cc\u0646 \u0648\u0628\u0633\u0627\u06cc\u062a \u0627\u0639\u062a\u0628\u0627\u0631 \u0639\u0627\u0644\u06cc \u062f\u0627\u0631\u062f\n\u0628\u0631 \u0637\u0628\u0642 "
    },
    "settings_choose_size_and_position": {
        "message": "\u062a\u0646\u0638\u06cc\u0645 \u0627\u0646\u062f\u0627\u0632\u0647 \u0648 \u0645\u0648\u0642\u0639\u06cc\u062a \u062f\u0633\u062a\u06cc\u0627\u0631 \u0627\u064e\u062f\u06af\u0627\u0631\u062f"
    },
    "settings_icon_size": {
        "message": "\u0627\u0646\u062f\u0627\u0632\u0647 \u0622\u06cc\u06a9\u0648\u0646:"
    },
    "settings_small": {
        "message": "\u06a9\u0648\u0686\u06a9"
    },
    "settings_big": {
        "message": "\u0628\u0632\u0631\u06af"
    },
    "settings_position": {
        "message": "\u0645\u0648\u0642\u0639\u06cc\u062a:"
    },
    "settings_left_top": {
        "message": "\u0628\u0627\u0644\u0627 \u0633\u0645\u062a \u0686\u067e"
    },
    "settings_right_top": {
        "message": "\u0628\u0627\u0644\u0627 \u0633\u0645\u062a \u0631\u0627\u0633\u062a"
    },
    "settings_left_bottom": {
        "message": "\u067e\u0627\u06cc\u06cc\u0646 \u0633\u0645\u062a \u0686\u067e"
    },
    "settings_right_bottom": {
        "message": "\u067e\u0627\u06cc\u06cc\u0646 \u0633\u0645\u062a \u0631\u0627\u0633\u062a"
    },
    "settings_cancel": {
        "message": "\u0644\u063a\u0648"
    },
    "settings_save": {
        "message": "\u0630\u062e\u06cc\u0631\u0647 \u062a\u063a\u06cc\u06cc\u0631\u0627\u062a"
    }
}
var he = {
    "menu_filtration_status": {
        "message": "\u05e1\u05d9\u05e0\u05d5\u05df \u05d1\u05d0\u05ea\u05e8 \u05d6\u05d4"
    },
    "menu_do_not_filter_30_sec": {
        "message": "\u05d0\u05dc \u05ea\u05e1\u05e0\u05df \u05db- 30 \u05e9\u05e0\u05d9\u05d5\u05ea"
    },
    "menu_block_ad_on_site": {
        "message": "\u05d7\u05e1\u05d5\u05dd \u05e4\u05e8\u05e1\u05d5\u05de\u05ea \u05d1\u05d0\u05ea\u05e8 \u05d6\u05d4"
    },
    "menu_report_abuse": {
        "message": "\u05d3\u05d5\u05d5\u05d7 \u05e2\u05dc \u05d4\u05d0\u05ea\u05e8"
    },
    "menu_site_report": {
        "message": "\u05d3\u05d9\u05d5\u05d5\u05d7 \u05d0\u05d1\u05d8\u05d7\u05ea \u05d0\u05ea\u05e8"
    },
    "menu_settings": {
        "message": "\u05d4\u05d2\u05d3\u05e8\u05d5\u05ea \u05d4\u05e2\u05d5\u05d6\u05e8 \u05d4\u05d0\u05d9\u05e9\u05d9"
    },
    "assistant_select_element": {
        "message": "\u05d7\u05d5\u05e1\u05dd \u05d0\u05dc\u05de\u05e0\u05d8"
    },
    "assistant_select_element_ext": {
        "message": "\u05d1\u05d7\u05e8 \u05d0\u05dc\u05de\u05e0\u05d8 \u05d1\u05d3\u05e3 \u05dc\u05d7\u05e1\u05d9\u05de\u05d4"
    },
    "assistant_select_element_cancel": {
        "message": "\u05d1\u05d8\u05dc"
    },
    "assistant_block_element": {
        "message": "\u05d7\u05e1\u05d9\u05de\u05ea \u05d0\u05dc\u05de\u05e0\u05d8"
    },
    "assistant_block_element_explain": {
        "message": "\u05d4\u05ea\u05d0\u05dd \u05db\u05dc\u05dc \u05d7\u05e1\u05d9\u05de\u05ea \u05d0\u05dc\u05de\u05e0\u05d8"
    },
    "assistant_slider_explain": {
        "message": ":\u05d4\u05d6\u05d6 \u05d0\u05ea \u05d4\u05de\u05d7\u05d5\u05d5\u05df \u05db\u05d3\u05d9 \u05dc\u05e9\u05e0\u05d5\u05ea \u05d0\u05ea \u05d2\u05d5\u05d3\u05dc \u05d4\u05de\u05e1\u05d2\u05e8\u05ea \u05d1\u05d4 \u05d9\u05e2\u05d1\u05d5\u05d3 \u05d4\u05db\u05dc\u05dc \u05d4\u05d7\u05d3\u05e9"
    },
    "assistant_slider_min": {
        "message": "\u05de\u05d9\u05e0\u05d9\u05de\u05d5\u05dd"
    },
    "assistant_slider_max": {
        "message": "\u05de\u05e7\u05e1\u05d9\u05de\u05d5\u05dd"
    },
    "assistant_extended_settings": {
        "message": "\u05d4\u05d2\u05d3\u05e8\u05d5\u05ea \u05de\u05ea\u05e7\u05d3\u05de\u05d5\u05ea"
    },
    "assistant_apply_rule_to_all_sites": {
        "message": "\u05d4\u05d7\u05dc \u05d0\u05ea \u05d4\u05db\u05dc\u05dc \u05e2\u05dc \u05db\u05dc \u05d4\u05d0\u05ea\u05e8\u05d9\u05dd"
    },
    "assistant_block_by_reference": {
        "message": "\u05d7\u05e1\u05d5\u05dd \u05d4\u05e4\u05e0\u05d9\u05d9\u05ea \u05e7\u05d9\u05e9\u05d5\u05e8"
    },
    "assistant_block_similar": {
        "message": "\u05d7\u05e1\u05d5\u05dd \u05d3\u05d5\u05de\u05d4"
    },
    "assistant_another_element": {
        "message": "\u05d1\u05d7\u05e8 \u05d0\u05dc\u05de\u05e0\u05d8 \u05d0\u05d7\u05e8"
    },
    "assistant_preview": {
        "message": "\u05ea\u05e6\u05d5\u05d2\u05d4 \u05de\u05e7\u05d3\u05d9\u05de\u05d4"
    },
    "assistant_block": {
        "message": "\u05d7\u05e1\u05d5\u05dd"
    },
    "assistant_settings": {
        "message": "\u05d4\u05d2\u05d3\u05e8\u05d5\u05ea \u05d4\u05e2\u05d5\u05d6\u05e8 \u05d4\u05d0\u05d9\u05e9\u05d9"
    },
    "assistant_preview_header": {
        "message": "\u05ea\u05e6\u05d5\u05d2\u05d4 \u05de\u05e7\u05d3\u05d9\u05de\u05d4 - \u05d7\u05e1\u05d9\u05de\u05ea \u05d0\u05dc\u05de\u05e0\u05d8"
    },
    "assistant_preview_header_info": {
        "message": "\u05d5\u05d3\u05d0 \u05db\u05d9 \u05d0\u05dc\u05de\u05e0\u05d8 \u05d6\u05d4 \u05d7\u05e1\u05d5\u05dd \u05d1\u05db\u05d5\u05d5\u05e0\u05d4"
    },
    "assistant_preview_end": {
        "message": "\u05e6\u05d0 \u05de\u05ea\u05e6\u05d5\u05d2\u05d4 \u05de\u05e7\u05d3\u05d9\u05de\u05d4"
    },
    "wot_unknown_description": {
        "message": "\u05de\u05d5\u05e0\u05d9\u05d8\u05d9\u05df \u05d0\u05d9\u05e0\u05d5 \u05de\u05d5\u05d2\u05d3\u05e8"
    },
    "wot_bad_description": {
        "message": "\u05dc\u05d0\u05ea\u05e8 \u05d6\u05d4 \u05d9\u05e9 \u05de\u05d5\u05e0\u05d9\u05d8\u05d9\u05df \u05e8\u05e2 \u05de\u05d0\u05d5\u05d3 \u05e2\u05dc \u05e4\u05d9"
    },
    "wot_poor_description": {
        "message": "\u05dc\u05d0\u05ea\u05e8 \u05d6\u05d4 \u05d9\u05e9 \u05de\u05d5\u05e0\u05d9\u05d8\u05d9\u05df \u05e8\u05e2 \u05e2\u05dc \u05e4\u05d9"
    },
    "wot_unsatisfactory_description": {
        "message": "\u05dc\u05d0\u05ea\u05e8 \u05d6\u05d4 \u05d9\u05e9 \u05de\u05d5\u05e0\u05d9\u05d8\u05d9\u05df \u05d3\u05dc \u05e2\u05dc \u05e4\u05d9"
    },
    "wot_good_description": {
        "message": "\u05dc\u05d0\u05ea\u05e8 \u05d6\u05d4 \u05d9\u05e9 \u05de\u05d5\u05e0\u05d9\u05d8\u05d9\u05df \u05d8\u05d5\u05d1 \u05e2\u05dc \u05e4\u05d9"
    },
    "wot_excellent_description": {
        "message": "\u05dc\u05d0\u05ea\u05e8 \u05d6\u05d4 \u05d9\u05e9 \u05de\u05d5\u05e0\u05d9\u05d8\u05d9\u05df \u05de\u05e2\u05d5\u05dc\u05d4 \u05e2\u05dc \u05e4\u05d9"
    },
    "settings_choose_size_and_position": {
        "message": "\u05d4\u05ea\u05d0\u05dd \u05d2\u05d5\u05d3\u05dc \u05d5\u05de\u05d9\u05e7\u05d5\u05dd \u05e9\u05dc \u05d4\u05e2\u05d5\u05d6\u05e8 \u05d4\u05d0\u05d9\u05e9\u05d9 \u05e9\u05dc \u05d0\u05d3\u05d2\u05d0\u05e8\u05d3"
    },
    "settings_icon_size": {
        "message": ":\u05d2\u05d5\u05d3\u05dc \u05e6\u05dc\u05de\u05d9\u05ea"
    },
    "settings_small": {
        "message": "\u05e7\u05d8\u05df"
    },
    "settings_big": {
        "message": "\u05d2\u05d3\u05d5\u05dc"
    },
    "settings_position": {
        "message": ":\u05de\u05d9\u05e7\u05d5\u05dd"
    },
    "settings_left_top": {
        "message": "\u05d1\u05d7\u05dc\u05e7 \u05d4\u05e2\u05dc\u05d9\u05d5\u05df \u05de\u05e9\u05de\u05d0\u05dc"
    },
    "settings_right_top": {
        "message": "\u05d1\u05d7\u05dc\u05e7 \u05d4\u05e2\u05dc\u05d9\u05d5\u05df \u05de\u05d9\u05de\u05d9\u05df"
    },
    "settings_left_bottom": {
        "message": "\u05e6\u05d3 \u05e9\u05de\u05d0\u05dc \u05dc\u05de\u05d8\u05d4"
    },
    "settings_right_bottom": {
        "message": "\u05e6\u05d3 \u05d9\u05de\u05d9\u05df \u05dc\u05de\u05d8\u05d4"
    },
    "settings_cancel": {
        "message": "\u05d1\u05d8\u05dc"
    },
    "settings_save": {
        "message": "\u05e9\u05de\u05d5\u05e8 \u05e9\u05d9\u05e0\u05d5\u05d9\u05d9\u05dd"
    }
}
var it = {
    "menu_filtration_status": {
        "message": "Filtraggio su questo sito"
    },
    "menu_do_not_filter_30_sec": {
        "message": "Non filtrare per 30 secondi"
    },
    "menu_block_ad_on_site": {
        "message": "Blocca annunci su questo sito"
    },
    "menu_report_abuse": {
        "message": "Segnala il sito"
    },
    "menu_site_report": {
        "message": "Rapporto di sicurezza del sito internet"
    },
    "menu_settings": {
        "message": "Impostazioni assistente"
    },
    "assistant_select_element": {
        "message": "Bloccaggio elemento"
    },
    "assistant_select_element_ext": {
        "message": "Scegli un elemento da bloccare sulla pagina"
    },
    "assistant_select_element_cancel": {
        "message": "Annulla"
    },
    "assistant_block_element": {
        "message": "Bloccaggio elemento"
    },
    "assistant_block_element_explain": {
        "message": "Modifica la regola di bloccaggio elemento"
    },
    "assistant_slider_explain": {
        "message": "Muovi la barra per cambiare la grandezza del frame da per il quale la nuova regola funzioner\u00e0:"
    },
    "assistant_slider_min": {
        "message": "MIN"
    },
    "assistant_slider_max": {
        "message": "MAX"
    },
    "assistant_extended_settings": {
        "message": "Impostazioni avanzate"
    },
    "assistant_apply_rule_to_all_sites": {
        "message": "Applica la regola a tutti i siti"
    },
    "assistant_block_by_reference": {
        "message": "Blocca tramite link di referenza"
    },
    "assistant_block_similar": {
        "message": "Blocca simile"
    },
    "assistant_another_element": {
        "message": "Seleziona un altro elemento"
    },
    "assistant_preview": {
        "message": "Anteprima"
    },
    "assistant_block": {
        "message": "Blocca"
    },
    "assistant_settings": {
        "message": "Impostazioni assistente"
    },
    "assistant_preview_header": {
        "message": "Bloccaggio elemento - anteprima"
    },
    "assistant_preview_header_info": {
        "message": "Assicurati che l'elemento \u00e8 bloccato come richiesto"
    },
    "assistant_preview_end": {
        "message": "Esci dall'anteprima"
    },
    "wot_unknown_description": {
        "message": "La reputazione non \u00e8 definita"
    },
    "wot_bad_description": {
        "message": "Questo sito ha una pessima reputazione\n\nsecondo "
    },
    "wot_poor_description": {
        "message": "Questo sito ha una cattiva reputazione\n\nsecondo "
    },
    "wot_unsatisfactory_description": {
        "message": "Questo sito ha una discreta reputazione\n\nsecondo "
    },
    "wot_good_description": {
        "message": "Questo sito ha una buona reputazione\n\nsecondo "
    },
    "wot_excellent_description": {
        "message": "Questo sito ha un'ottima reputazione\n\nsecondo "
    },
    "settings_choose_size_and_position": {
        "message": "Regola dimensione e posizione di Assistente Adguard"
    },
    "settings_icon_size": {
        "message": "Grandezza dell'icona:"
    },
    "settings_small": {
        "message": "Piccola"
    },
    "settings_big": {
        "message": "Grande"
    },
    "settings_position": {
        "message": "Posizione:"
    },
    "settings_left_top": {
        "message": "In alto a sinistra"
    },
    "settings_right_top": {
        "message": "In alto a destra"
    },
    "settings_left_bottom": {
        "message": "In basso a sinistra"
    },
    "settings_right_bottom": {
        "message": "In basso a destra"
    },
    "settings_cancel": {
        "message": "Annulla"
    },
    "settings_save": {
        "message": "Salva cambiamenti"
    }
}
var pl = {
    "menu_filtration_status": {
        "message": "Filtrowanie na tej stronie internetowej"
    },
    "menu_do_not_filter_30_sec": {
        "message": "Nie filtruj przez 30 sekund"
    },
    "menu_block_ad_on_site": {
        "message": "Zablokuj reklam\u0119 na tej stronie internetowej"
    },
    "menu_report_abuse": {
        "message": "Raportuj stron\u0119 internetow\u0105"
    },
    "menu_site_report": {
        "message": "Raport bezpiecze\u0144stwa strony internetowej"
    },
    "menu_settings": {
        "message": "Ustawienia Asystenta"
    },
    "assistant_select_element": {
        "message": "Blokowanie element\u00f3w"
    },
    "assistant_select_element_ext": {
        "message": "Wybierz element na stronie by zablokowa\u0107"
    },
    "assistant_select_element_cancel": {
        "message": "Anuluj"
    },
    "assistant_block_element": {
        "message": "Blokowanie element\u00f3w"
    },
    "assistant_block_element_explain": {
        "message": "Dostosuj regu\u0142\u0119 blokowania element\u00f3w"
    },
    "assistant_slider_explain": {
        "message": "Przesu\u0144 suwak by zmieni\u0107 rozmiar ramki, dla kt\u00f3rej b\u0119dzie obowi\u0105zywa\u0107 nowa regu\u0142a:"
    },
    "assistant_slider_min": {
        "message": "Minimum"
    },
    "assistant_slider_max": {
        "message": "Maksimum"
    },
    "assistant_extended_settings": {
        "message": "Ustawienia zaawansowane"
    },
    "assistant_apply_rule_to_all_sites": {
        "message": "Zastosuj regu\u0142\u0119 dla wszystkich stron internetowych"
    },
    "assistant_block_by_reference": {
        "message": "Blokuj u\u017cywaj\u0105c linka referencyjnego"
    },
    "assistant_block_similar": {
        "message": "Blokuj podobne"
    },
    "assistant_another_element": {
        "message": "Wybierz inny element"
    },
    "assistant_preview": {
        "message": "Podgl\u0105d"
    },
    "assistant_block": {
        "message": "Blokuj"
    },
    "assistant_settings": {
        "message": "Ustawienia Asystenta"
    },
    "assistant_preview_header": {
        "message": "Blokowanie element\u00f3w - podgl\u0105d"
    },
    "assistant_preview_header_info": {
        "message": "Upewnij si\u0119, \u017ce element jest blokowany jak zamierzono"
    },
    "assistant_preview_end": {
        "message": "Zamknij podgl\u0105d"
    },
    "wot_unknown_description": {
        "message": "Reputacja nie jest zdefiniowana"
    },
    "wot_bad_description": {
        "message": "Ta strona internetowa ma bardzo z\u0142\u0105 reputacj\u0119 zgodnie z"
    },
    "wot_poor_description": {
        "message": "Ta strona internetowa ma z\u0142\u0105 reputacj\u0119 zgodnie z"
    },
    "wot_unsatisfactory_description": {
        "message": "Ta strona internetowa ma s\u0142ab\u0105 reputacj\u0119 zgodnie z"
    },
    "wot_good_description": {
        "message": "Ta strona internetowa ma dobr\u0105 reputacj\u0119 zgodnie z"
    },
    "wot_excellent_description": {
        "message": "Ta strona internetowa ma doskona\u0142\u0105 reputacj\u0119 zgodnie z"
    },
    "settings_choose_size_and_position": {
        "message": "Dostosuj rozmiar i pozycj\u0119 Asystenta Adguarda"
    },
    "settings_icon_size": {
        "message": "Rozmiar ikony:"
    },
    "settings_small": {
        "message": "Ma\u0142y"
    },
    "settings_big": {
        "message": "Du\u017cy"
    },
    "settings_position": {
        "message": "Pozycja:"
    },
    "settings_left_top": {
        "message": "Lewy g\u00f3rny"
    },
    "settings_right_top": {
        "message": "Prawy g\u00f3rny"
    },
    "settings_left_bottom": {
        "message": "Na dole po lewej"
    },
    "settings_right_bottom": {
        "message": "Na dole po prawej"
    },
    "settings_cancel": {
        "message": "Anuluj"
    },
    "settings_save": {
        "message": "Zapisz zmiany"
    }
}
var uk = {
    "menu_filtration_status": {
        "message": "\u0424\u0456\u043b\u044c\u0442\u0440\u0430\u0446\u0456\u044f \u043d\u0430 \u0434\u0430\u043d\u043e\u043c\u0443 \u0441\u0430\u0439\u0442\u0456"
    },
    "menu_do_not_filter_30_sec": {
        "message": "\u041d\u0435 \u0444\u0456\u043b\u044c\u0442\u0440\u0443\u0432\u0430\u0442\u0438 30 \u0441\u0435\u043a\u0443\u043d\u0434"
    },
    "menu_block_ad_on_site": {
        "message": "\u0417\u0430\u0431\u043b\u043e\u043a\u0443\u0432\u0430\u0442\u0438 \u0440\u0435\u043a\u043b\u0430\u043c\u0443 \u043d\u0430 \u0434\u0430\u043d\u043e\u043c\u0443 \u0441\u0430\u0439\u0442\u0456"
    },
    "menu_report_abuse": {
        "message": "\u041f\u043e\u0432\u0456\u0434\u043e\u043c\u0438\u0442\u0438 \u043f\u0440\u043e \u0441\u0430\u0439\u0442"
    },
    "menu_site_report": {
        "message": "\u0417\u0432\u0456\u0442 \u043f\u0440\u043e \u0431\u0435\u0437\u043f\u0435\u043a\u0443 \u0441\u0430\u0439\u0442\u0443"
    },
    "menu_settings": {
        "message": "\u041d\u0430\u043b\u0430\u0448\u0442\u0443\u0432\u0430\u043d\u043d\u044f \u043f\u043e\u043c\u0456\u0447\u043d\u0438\u043a\u0430"
    },
    "assistant_select_element": {
        "message": "\u0411\u043b\u043e\u043a\u0443\u0432\u0430\u043d\u043d\u044f \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0443"
    },
    "assistant_select_element_ext": {
        "message": "\u0412\u0438\u0431\u0435\u0440\u0456\u0442\u044c \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043d\u0430 \u0441\u0442\u043e\u0440\u0456\u043d\u0446\u0456, \u044f\u043a\u0438\u0439 \u0442\u0440\u0435\u0431\u0430 \u0437\u0430\u0431\u043b\u043e\u043a\u0443\u0432\u0430\u0442\u0438"
    },
    "assistant_select_element_cancel": {
        "message": "\u0421\u043a\u0430\u0441\u0443\u0432\u0430\u0442\u0438"
    },
    "assistant_block_element": {
        "message": "\u0411\u043b\u043e\u043a\u0443\u0432\u0430\u043d\u043d\u044f \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0443"
    },
    "assistant_block_element_explain": {
        "message": "\u041d\u0430\u043b\u0430\u0448\u0442\u0443\u0439\u0442\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u043e \u0431\u043b\u043e\u043a\u0443\u0432\u0430\u043d\u043d\u044f \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0443"
    },
    "assistant_slider_explain": {
        "message": "\u041f\u0435\u0440\u0435\u0441\u0443\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0432\u0437\u0443\u043d\u043e\u043a, \u0449\u043e\u0431 \u0437\u043c\u0456\u043d\u0438\u0442\u0438 \u0440\u043e\u0437\u043c\u0456\u0440 \u0431\u043b\u043e\u043a\u0443, \u0434\u043b\u044f \u044f\u043a\u043e\u0433\u043e \u0434\u0456\u044f\u0442\u0438\u043c\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u043e:"
    },
    "assistant_slider_min": {
        "message": "MIN"
    },
    "assistant_slider_max": {
        "message": "MAX"
    },
    "assistant_extended_settings": {
        "message": "\u0420\u043e\u0437\u0448\u0438\u0440\u0435\u043d\u0456 \u043d\u0430\u043b\u0430\u0448\u0442\u0443\u0432\u0430\u043d\u043d\u044f"
    },
    "assistant_apply_rule_to_all_sites": {
        "message": "\u0417\u0430\u0441\u0442\u043e\u0441\u0443\u0432\u0430\u0442\u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u043e \u0434\u043e \u0432\u0441\u0456\u0445 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u0456\u0432"
    },
    "assistant_block_by_reference": {
        "message": "\u0411\u043b\u043e\u043a\u0443\u0432\u0430\u0442\u0438 \u0437\u0430 \u043f\u043e\u0441\u0438\u043b\u0430\u043d\u043d\u044f\u043c"
    },
    "assistant_block_similar": {
        "message": "\u0411\u043b\u043e\u043a\u0443\u0432\u0430\u0442\u0438 \u0441\u0445\u043e\u0436\u0456 \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0438"
    },
    "assistant_another_element": {
        "message": "\u0412\u0438\u0431\u0440\u0430\u0442\u0438 \u0456\u043d\u0448\u0438\u0439 \u0435\u043b\u0435\u043c\u0435\u043d\u0442"
    },
    "assistant_preview": {
        "message": "\u041f\u043e\u043f\u0435\u0440\u0435\u0434\u043d\u0456\u0439 \u043f\u0435\u0440\u0435\u0433\u043b\u044f\u0434"
    },
    "assistant_block": {
        "message": "\u0417\u0430\u0431\u043b\u043e\u043a\u0443\u0432\u0430\u0442\u0438"
    },
    "assistant_settings": {
        "message": "\u041d\u0430\u043b\u0430\u0448\u0442\u0443\u0432\u0430\u043d\u043d\u044f \u043f\u043e\u043c\u0456\u0447\u043d\u0438\u043a\u0430"
    },
    "assistant_preview_header": {
        "message": "\u0411\u043b\u043e\u043a\u0443\u0432\u0430\u043d\u043d\u044f \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0443 - \u043f\u043e\u043f\u0435\u0440\u0435\u0434\u043d\u0456\u0439 \u043f\u0435\u0440\u0435\u0433\u043b\u044f\u0434"
    },
    "assistant_preview_header_info": {
        "message": "\u041f\u0435\u0440\u0435\u043a\u043e\u043d\u0430\u0439\u0442\u0435\u0441\u044f, \u0449\u043e \u0435\u043b\u0435\u043c\u0435\u043d\u0442 \u0437\u0430\u0431\u043b\u043e\u043a\u043e\u0432\u0430\u043d\u0438\u0439 \u044f\u043a \u0441\u043b\u0456\u0434"
    },
    "assistant_preview_end": {
        "message": "\u0417\u0430\u043a\u0456\u043d\u0447\u0438\u0442\u0438 \u043f\u043e\u043f\u0435\u0440\u0435\u0434\u043d\u0456\u0439 \u043f\u0435\u0440\u0435\u0433\u043b\u044f\u0434"
    },
    "wot_unknown_description": {
        "message": "\u0420\u0435\u043f\u0443\u0442\u0430\u0446\u0456\u044f \u043d\u0435 \u0432\u0438\u0437\u043d\u0430\u0447\u0435\u043d\u0430"
    },
    "wot_bad_description": {
        "message": "\u0426\u0435\u0439 \u0441\u0430\u0439\u0442 \u043c\u0430\u0454 \u0434\u0443\u0436\u0435 \u043f\u043e\u0433\u0430\u043d\u0443 \u0440\u0435\u043f\u0443\u0442\u0430\u0446\u0456\u044e\n\u0437\u0430 \u0432\u0435\u0440\u0441\u0456\u0454\u044e "
    },
    "wot_poor_description": {
        "message": "\u0426\u0435\u0439 \u0441\u0430\u0439\u0442 \u043c\u0430\u0454 \u043f\u043e\u0433\u0430\u043d\u0443 \u0440\u0435\u043f\u0443\u0442\u0430\u0446\u0456\u044e\n\u0437\u0430 \u0432\u0435\u0440\u0441\u0456\u0454\u044e "
    },
    "wot_unsatisfactory_description": {
        "message": "\u0426\u0435\u0439 \u0441\u0430\u0439\u0442 \u043c\u0430\u0454 \u043d\u0435\u0437\u0430\u0434\u043e\u0432\u0456\u043b\u044c\u043d\u0443 \u0440\u0435\u043f\u0443\u0442\u0430\u0446\u0456\u044e\n\u0437\u0430 \u0432\u0435\u0440\u0441\u0456\u0454\u044e "
    },
    "wot_good_description": {
        "message": "\u0426\u0435\u0439 \u0441\u0430\u0439\u0442 \u043c\u0430\u0454 \u0434\u043e\u0431\u0440\u0443 \u0440\u0435\u043f\u0443\u0442\u0430\u0446\u0456\u044e\n\u0437\u0430 \u0432\u0435\u0440\u0441\u0456\u0454\u044e "
    },
    "wot_excellent_description": {
        "message": "\u0426\u0435\u0439 \u0441\u0430\u0439\u0442 \u043c\u0430\u0454 \u0434\u0443\u0436\u0435 \u0432\u0456\u0434\u043c\u0456\u043d\u043d\u0443 \u0440\u0435\u043f\u0443\u0442\u0430\u0446\u0456\u044e\n\u0437\u0430 \u0432\u0435\u0440\u0441\u0456\u0454\u044e "
    },
    "settings_choose_size_and_position": {
        "message": "\u041d\u0430\u043b\u0430\u0448\u0442\u0443\u0439\u0442\u0435 \u0440\u043e\u0437\u043c\u0456\u0440 \u0456 \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u043d\u044f \u043f\u043e\u043c\u0456\u0447\u043d\u0438\u043a\u0430 Adguard"
    },
    "settings_icon_size": {
        "message": "\u0420\u043e\u0437\u043c\u0456\u0440 \u0456\u043a\u043e\u043d\u043a\u0438:"
    },
    "settings_small": {
        "message": "\u041c\u0430\u043b\u0435\u043d\u044c\u043a\u0430"
    },
    "settings_big": {
        "message": "\u0412\u0435\u043b\u0438\u043a\u0430"
    },
    "settings_position": {
        "message": "\u041f\u043e\u0437\u0438\u0446\u0456\u044f:"
    },
    "settings_left_top": {
        "message": "\u0417\u0432\u0435\u0440\u0445\u0443 \u0437\u043b\u0456\u0432\u0430"
    },
    "settings_right_top": {
        "message": "\u0417\u0432\u0435\u0440\u0445\u0443 \u0441\u043f\u0440\u0430\u0432\u0430"
    },
    "settings_left_bottom": {
        "message": "\u0412\u043d\u0438\u0437\u0443 \u0437\u043b\u0456\u0432\u0430"
    },
    "settings_right_bottom": {
        "message": "\u0412\u043d\u0438\u0437\u0443 \u0441\u043f\u0440\u0430\u0432\u0430"
    },
    "settings_cancel": {
        "message": "\u0421\u043a\u0430\u0441\u0443\u0432\u0430\u0442\u0438"
    },
    "settings_save": {
        "message": "\u0417\u0431\u0435\u0440\u0435\u0433\u0442\u0438 \u0437\u043c\u0456\u043d\u0438"
    }
}
var zh = {
    "menu_filtration_status": {
        "message": "\u5bf9\u6b64\u7f51\u7ad9\u8fdb\u884c\u8fc7\u6ee4"
    },
    "menu_do_not_filter_30_sec": {
        "message": "\u6682\u505c\u8fc7\u6ee4 30 \u79d2"
    },
    "menu_block_ad_on_site": {
        "message": "\u62e6\u622a\u6b64\u7f51\u7ad9\u4e0a\u7684\u5e7f\u544a"
    },
    "menu_report_abuse": {
        "message": "\u62a5\u544a\u6b64\u7f51\u7ad9"
    },
    "menu_site_report": {
        "message": "\u7f51\u7ad9\u5b89\u5168\u62a5\u544a"
    },
    "menu_settings": {
        "message": "\u52a9\u624b\u8bbe\u7f6e"
    },
    "assistant_select_element": {
        "message": "\u62e6\u622a\u5143\u7d20"
    },
    "assistant_select_element_ext": {
        "message": "\u9009\u62e9\u6b64\u9875\u9762\u4e0a\u9700\u8981\u62e6\u622a\u7684\u5143\u7d20"
    },
    "assistant_select_element_cancel": {
        "message": "\u53d6\u6d88"
    },
    "assistant_block_element": {
        "message": "\u62e6\u622a\u5143\u7d20"
    },
    "assistant_block_element_explain": {
        "message": "\u8c03\u6574\u5143\u7d20\u62e6\u622a\u89c4\u5219"
    },
    "assistant_slider_explain": {
        "message": "\u4f7f\u7528\u6ed1\u5757\u6539\u53d8\u8981\u7531\u65b0\u89c4\u5219\u5c06\u8981\u62e6\u622a\u7684\u6846\u67b6\u5927\u5c0f\uff1a"
    },
    "assistant_slider_min": {
        "message": "\u6700\u5c0f"
    },
    "assistant_slider_max": {
        "message": "\u6700\u5927"
    },
    "assistant_extended_settings": {
        "message": "\u9ad8\u7ea7\u8bbe\u7f6e"
    },
    "assistant_apply_rule_to_all_sites": {
        "message": "\u5e94\u7528\u89c4\u5219\u81f3\u6240\u6709\u7f51\u7ad9"
    },
    "assistant_block_by_reference": {
        "message": "\u901a\u8fc7\u53c2\u8003\u94fe\u63a5\u8fdb\u884c\u62e6\u622a"
    },
    "assistant_block_similar": {
        "message": "\u62e6\u622a\u7c7b\u4f3c\u5143\u7d20"
    },
    "assistant_another_element": {
        "message": "\u9009\u62e9\u5176\u5b83\u5143\u7d20"
    },
    "assistant_preview": {
        "message": "\u9884\u89c8"
    },
    "assistant_block": {
        "message": "\u62e6\u622a"
    },
    "assistant_settings": {
        "message": "Adguard \u52a9\u624b\u8bbe\u7f6e"
    },
    "assistant_preview_header": {
        "message": "\u5143\u7d20\u62e6\u622a - \u9884\u89c8"
    },
    "assistant_preview_header_info": {
        "message": "\u8bf7\u786e\u4fdd\u5143\u7d20\u62e6\u622a\u65b9\u5f0f\u7b26\u5408\u9884\u671f"
    },
    "assistant_preview_end": {
        "message": "\u9000\u51fa\u9884\u89c8"
    },
    "wot_unknown_description": {
        "message": "\u58f0\u671b\u5c1a\u672a\u5b9a\u4e49"
    },
    "wot_bad_description": {
        "message": "\u6b64\u7f51\u7ad9\u5728\u4ee5\u4e0b\u6570\u636e\u5e93\u4e2d\u58f0\u671b\u6781\u4f4e"
    },
    "wot_poor_description": {
        "message": "\u6b64\u7f51\u7ad9\u5728\u4ee5\u4e0b\u6570\u636e\u5e93\u4e2d\u58f0\u671b\u4f4e\u4e0b "
    },
    "wot_unsatisfactory_description": {
        "message": "\u6b64\u7f51\u7ad9\u5728\u4ee5\u4e0b\u6570\u636e\u5e93\u4e2d\u58f0\u671b\u4e0d\u4f73 "
    },
    "wot_good_description": {
        "message": "\u6b64\u7f51\u7ad9\u5728\u4ee5\u4e0b\u6570\u636e\u5e93\u4e2d\u58f0\u671b\u826f\u597d "
    },
    "wot_excellent_description": {
        "message": "\u6b64\u7f51\u7ad9\u5728\u4ee5\u4e0b\u6570\u636e\u5e93\u4e2d\u58f0\u671b\u6781\u4f73 "
    },
    "settings_choose_size_and_position": {
        "message": "\u8c03\u6574 Adguard \u52a9\u624b\u7684\u5927\u5c0f\u4e0e\u4f4d\u7f6e"
    },
    "settings_icon_size": {
        "message": "\u56fe\u6807\u5927\u5c0f\uff1a"
    },
    "settings_small": {
        "message": "\u5c0f"
    },
    "settings_big": {
        "message": "\u5927"
    },
    "settings_position": {
        "message": "\u4f4d\u7f6e\uff1a"
    },
    "settings_left_top": {
        "message": "\u5de6\u4e0a\u89d2"
    },
    "settings_right_top": {
        "message": "\u53f3\u4e0a\u89d2"
    },
    "settings_left_bottom": {
        "message": "\u5de6\u4e0b\u89d2"
    },
    "settings_right_bottom": {
        "message": "\u53f3\u4e0b\u89d2"
    },
    "settings_cancel": {
        "message": "\u53d6\u6d88"
    },
    "settings_save": {
        "message": "\u4fdd\u5b58\u66f4\u6539"
    }
}
var de = {
    "menu_filtration_status": {
        "message": "Auf dieser Webseite filtern"
    },
    "menu_do_not_filter_30_sec": {
        "message": "F\u00fcr 30 Sekunden nicht blockieren"
    },
    "menu_block_ad_on_site": {
        "message": "Werbung auf dieser Seite blockieren"
    },
    "menu_report_abuse": {
        "message": "Diese Webseite melden"
    },
    "menu_site_report": {
        "message": "Webseiten-Sicherheitsbericht"
    },
    "menu_settings": {
        "message": "Assistenten-Einstellungen"
    },
    "assistant_select_element": {
        "message": "Element-Blockierung"
    },
    "assistant_select_element_ext": {
        "message": "W\u00e4hlen Sie ein zu blockierendes Element auf der Seite aus"
    },
    "assistant_select_element_cancel": {
        "message": "Abbrechen"
    },
    "assistant_block_element": {
        "message": "Element-Blockierung"
    },
    "assistant_block_element_explain": {
        "message": "Anpassen der Regel der Element-Blockierung"
    },
    "assistant_slider_explain": {
        "message": "Bewegen Sie den Schieberegler, um die Ausma\u00dfgr\u00f6\u00dfe der neuen Regeln zu \u00e4ndern:"
    },
    "assistant_slider_min": {
        "message": "MIN"
    },
    "assistant_slider_max": {
        "message": "MAX"
    },
    "assistant_extended_settings": {
        "message": "Erweiterte Einstellungen"
    },
    "assistant_apply_rule_to_all_sites": {
        "message": "Regel auf alle Webseiten anwenden"
    },
    "assistant_block_by_reference": {
        "message": "Durch Referenzlink blockieren"
    },
    "assistant_block_similar": {
        "message": "\u00c4hnliche Elemente blockieren"
    },
    "assistant_another_element": {
        "message": "Ein anderes Element w\u00e4hlen"
    },
    "assistant_preview": {
        "message": "Vorschau"
    },
    "assistant_block": {
        "message": "Blockieren"
    },
    "assistant_settings": {
        "message": "Assistenten-Einstellungen"
    },
    "assistant_preview_header": {
        "message": "Element-Blockierung - Vorschau"
    },
    "assistant_preview_header_info": {
        "message": "Pr\u00fcfen Sie, ob das Element blockiert ist"
    },
    "assistant_preview_end": {
        "message": "Vorschau beenden"
    },
    "wot_unknown_description": {
        "message": "Kein Ruf festgelegt"
    },
    "wot_bad_description": {
        "message": "Diese Webseite hat einen sehr schlechten Ruf laut "
    },
    "wot_poor_description": {
        "message": "Diese Webseite hat einen schlechten Ruf laut "
    },
    "wot_unsatisfactory_description": {
        "message": "Diese Website hat einen schlechten Ruf laut "
    },
    "wot_good_description": {
        "message": "Diese Webseite hat einen guten Ruf laut "
    },
    "wot_excellent_description": {
        "message": "Diese Webseite hat einen exzellenten Ruf laut "
    },
    "settings_choose_size_and_position": {
        "message": "Anpassen der Gr\u00f6\u00dfe und Position des Adguard-Assistenten"
    },
    "settings_icon_size": {
        "message": "Symbol-Gr\u00f6\u00dfe:"
    },
    "settings_small": {
        "message": "Klein"
    },
    "settings_big": {
        "message": "Gro\u00df"
    },
    "settings_position": {
        "message": "Position:"
    },
    "settings_left_top": {
        "message": "Oben links"
    },
    "settings_right_top": {
        "message": "Oben rechts"
    },
    "settings_left_bottom": {
        "message": "Unten links"
    },
    "settings_right_bottom": {
        "message": "Unten rechts"
    },
    "settings_cancel": {
        "message": "Abbrechen"
    },
    "settings_save": {
        "message": "\u00c4nderungen speichern"
    }
}
var tr = {
    "menu_filtration_status": {
        "message": "Bu sitedeki filtreleme"
    },
    "menu_do_not_filter_30_sec": {
        "message": "30 saniye boyunca filtreleme yapma"
    },
    "menu_block_ad_on_site": {
        "message": "Bu sitede reklam engelle"
    },
    "menu_report_abuse": {
        "message": "Bu siteyi rapor et"
    },
    "menu_site_report": {
        "message": "Sitenin g\u00fcvenlik raporu"
    },
    "menu_settings": {
        "message": "Assistant Ayarlar\u0131"
    },
    "assistant_select_element": {
        "message": "\u00d6ge engelleme"
    },
    "assistant_select_element_ext": {
        "message": "Bu sitede engellemek i\u00e7in bir \u00f6ge se\u00e7in"
    },
    "assistant_select_element_cancel": {
        "message": "\u0130ptal"
    },
    "assistant_block_element": {
        "message": "\u00d6ge engelleme"
    },
    "assistant_block_element_explain": {
        "message": "\u00d6ge engelleme kural\u0131n\u0131 ayarla"
    },
    "assistant_slider_explain": {
        "message": "Yeni kural\u0131n \u00e7al\u0131\u015faca\u011f\u0131 \u00e7er\u00e7evenin boyutunu de\u011fi\u015ftirmek i\u00e7in kayar d\u00fc\u011fmeyi hareket ettirin"
    },
    "assistant_slider_min": {
        "message": "MIN"
    },
    "assistant_slider_max": {
        "message": "MAKS"
    },
    "assistant_extended_settings": {
        "message": "Geli\u015fmi\u015f ayarlar"
    },
    "assistant_apply_rule_to_all_sites": {
        "message": "T\u00fcm web sitelerinde bu kural\u0131 uygula"
    },
    "assistant_block_by_reference": {
        "message": "Referans ba\u011flant\u0131 ile engelle"
    },
    "assistant_block_similar": {
        "message": "Benzerlerini engelle"
    },
    "assistant_another_element": {
        "message": "Farkl\u0131 bir \u00f6ge se\u00e7"
    },
    "assistant_preview": {
        "message": "\u00d6nizleme"
    },
    "assistant_block": {
        "message": "Engelle"
    },
    "assistant_settings": {
        "message": "Assistant ayarlar\u0131"
    },
    "assistant_preview_header": {
        "message": "\u00d6\u011fe engelleme - \u00f6nizleme"
    },
    "assistant_preview_header_info": {
        "message": "\u00d6genin istedi\u011finiz gibi engellendi\u011finden emin olun"
    },
    "assistant_preview_end": {
        "message": "\u00d6nizlemeden \u00e7\u0131k"
    },
    "wot_unknown_description": {
        "message": "Pop\u00fclarite belirlenmemi\u015f"
    },
    "wot_bad_description": {
        "message": "Bu web sitesi \u00e7ok k\u00f6t\u00fc bir itibara sahip "
    },
    "wot_poor_description": {
        "message": "Bu web sitesi k\u00f6t\u00fc bir itibara sahip"
    },
    "wot_unsatisfactory_description": {
        "message": "Bu web sitesi zay\u0131f bir itibara sahip "
    },
    "wot_good_description": {
        "message": "Bu web sitesi iyi bir itibara sahip "
    },
    "wot_excellent_description": {
        "message": "Bu web sitesi m\u00fckemmel bir itibara sahip "
    },
    "settings_choose_size_and_position": {
        "message": "Adguard Assistant'\u0131n boyut ve konumunu ayarla"
    },
    "settings_icon_size": {
        "message": "Simge boyutu:"
    },
    "settings_small": {
        "message": "K\u00fc\u00e7\u00fck"
    },
    "settings_big": {
        "message": "B\u00fcy\u00fck"
    },
    "settings_position": {
        "message": "Konum:"
    },
    "settings_left_top": {
        "message": "Sol \u00fcst"
    },
    "settings_right_top": {
        "message": "Sa\u011f \u00fcst"
    },
    "settings_left_bottom": {
        "message": "Sol alt"
    },
    "settings_right_bottom": {
        "message": "Sa\u011f alt"
    },
    "settings_cancel": {
        "message": "\u0130ptal"
    },
    "settings_save": {
        "message": "De\u011fi\u015fiklikleri kaydet"
    }
}
var ja = {
    "menu_filtration_status": {
        "message": "\u3053\u306e\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u3092\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0"
    },
    "menu_do_not_filter_30_sec": {
        "message": "30\u79d2\u9593\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3092\u884c\u308f\u306a\u3044"
    },
    "menu_block_ad_on_site": {
        "message": "\u3053\u306e\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u306e\u5e83\u544a\u3092\u30d6\u30ed\u30c3\u30af"
    },
    "menu_report_abuse": {
        "message": "\u3053\u306e\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u3092\u5831\u544a"
    },
    "menu_site_report": {
        "message": "\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30ec\u30dd\u30fc\u30c8"
    },
    "menu_settings": {
        "message": "\u30a2\u30b7\u30b9\u30bf\u30f3\u30c8\u306e\u8a2d\u5b9a"
    },
    "assistant_select_element": {
        "message": "\u8981\u7d20\u3092\u30d6\u30ed\u30c3\u30af"
    },
    "assistant_select_element_ext": {
        "message": "\u30d6\u30ed\u30c3\u30af\u3059\u308b\u8981\u7d20\u3092\u9078\u629e"
    },
    "assistant_select_element_cancel": {
        "message": "\u30ad\u30e3\u30f3\u30bb\u30eb"
    },
    "assistant_block_element": {
        "message": "\u8981\u7d20\u3092\u30d6\u30ed\u30c3\u30af"
    },
    "assistant_block_element_explain": {
        "message": "\u8981\u7d20\u306e\u30d6\u30ed\u30c3\u30af\u30eb\u30fc\u30eb\u3092\u8abf\u6574\u3059\u308b"
    },
    "assistant_slider_explain": {
        "message": "\u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u52d5\u304b\u3059\u3068\u3001\u30d6\u30ed\u30c3\u30af\u3059\u308b\u30d5\u30ec\u30fc\u30e0\u306e\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3067\u304d\u307e\u3059:"
    },
    "assistant_slider_min": {
        "message": "\u6700\u5c0f"
    },
    "assistant_slider_max": {
        "message": "\u6700\u5927"
    },
    "assistant_extended_settings": {
        "message": "\u9ad8\u5ea6\u306a\u8a2d\u5b9a"
    },
    "assistant_apply_rule_to_all_sites": {
        "message": "\u5168\u3066\u306e\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u306b\u3053\u306e\u30eb\u30fc\u30eb\u3092\u9069\u7528"
    },
    "assistant_block_by_reference": {
        "message": "\u53c2\u7167\u30ea\u30f3\u30af\u306b\u3088\u308b\u30d6\u30ed\u30c3\u30af"
    },
    "assistant_block_similar": {
        "message": "\u985e\u4f3c\u9805\u76ee\u3092\u30d6\u30ed\u30c3\u30af"
    },
    "assistant_another_element": {
        "message": "\u4ed6\u306e\u8981\u7d20\u3092\u9078\u629e"
    },
    "assistant_preview": {
        "message": "\u30d7\u30ec\u30d3\u30e5\u30fc"
    },
    "assistant_block": {
        "message": "\u30d6\u30ed\u30c3\u30af"
    },
    "assistant_settings": {
        "message": "\u30a2\u30b7\u30b9\u30bf\u30f3\u30c8\u306e\u8a2d\u5b9a"
    },
    "assistant_preview_header": {
        "message": "\u8981\u7d20\u306e\u30d6\u30ed\u30c3\u30af - \u30d7\u30ec\u30d3\u30e5\u30fc"
    },
    "assistant_preview_header_info": {
        "message": "\u8981\u7d20\u304c\u610f\u56f3\u3057\u305f\u3068\u304a\u308a\u306b\u30d6\u30ed\u30c3\u30af\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3059"
    },
    "assistant_preview_end": {
        "message": "\u30d7\u30ec\u30d3\u30e5\u30fc\u3092\u7d42\u4e86"
    },
    "wot_unknown_description": {
        "message": "\u8a55\u5224\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u305b\u3093"
    },
    "wot_bad_description": {
        "message": "\u3053\u306e\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u306f\u975e\u5e38\u306b\u8a55\u5224\u304c\u60aa\u3044\u3067\u3059: "
    },
    "wot_poor_description": {
        "message": "\u3053\u306e\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u306f\u8a55\u5224\u304c\u60aa\u3044\u3067\u3059: "
    },
    "wot_unsatisfactory_description": {
        "message": "\u3053\u306e\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u306f\u8a55\u5224\u304c\u3084\u3084\u60aa\u3044\u3067\u3059: "
    },
    "wot_good_description": {
        "message": "\u3053\u306e\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u306f\u8a55\u5224\u304c\u826f\u3044\u3067\u3059: "
    },
    "wot_excellent_description": {
        "message": "\u3053\u306e\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u306f\u3068\u3066\u3082\u8a55\u5224\u304c\u826f\u3044\u3067\u3059: "
    },
    "settings_choose_size_and_position": {
        "message": "Adguard\u30a2\u30b7\u30b9\u30bf\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u3068\u4f4d\u7f6e\u3092\u8abf\u6574\u3059\u308b"
    },
    "settings_icon_size": {
        "message": "\u30a2\u30a4\u30b3\u30f3\u306e\u5927\u304d\u3055:"
    },
    "settings_small": {
        "message": "\u5c0f"
    },
    "settings_big": {
        "message": "\u5927"
    },
    "settings_position": {
        "message": "\u4f4d\u7f6e:"
    },
    "settings_left_top": {
        "message": "\u5de6\u4e0a"
    },
    "settings_right_top": {
        "message": "\u53f3\u4e0a"
    },
    "settings_left_bottom": {
        "message": "\u5de6\u4e0b"
    },
    "settings_right_bottom": {
        "message": "\u53f3\u4e0b"
    },
    "settings_cancel": {
        "message": "\u30ad\u30e3\u30f3\u30bb\u30eb"
    },
    "settings_save": {
        "message": "\u8a2d\u5b9a\u3092\u4fdd\u5b58"
    }
}
var ar = {
    "menu_filtration_status": {
        "message": "\u062a\u0641\u0639\u064a\u0644 \u0627\u0644\u0641\u0644\u062a\u0631\u0629\u0639\u0644\u0649 \u0647\u0630\u0627 \u0627\u0644\u0645\u0648\u0642\u0639"
    },
    "menu_do_not_filter_30_sec": {
        "message": "\u0639\u062f\u0645 \u0627\u0644\u0641\u0644\u062a\u0631\u0629 \u0644\u0645\u062f\u0647 30 \u062b\u0627\u0646\u064a\u0647"
    },
    "menu_block_ad_on_site": {
        "message": "\u0645\u0646\u0639 \u0627\u0644\u0625\u0639\u0644\u0627\u0646 \u0639\u0644\u0649 \u0647\u0630\u0627 \u0627\u0644\u0645\u0648\u0642\u0639"
    },
    "menu_report_abuse": {
        "message": "\u0627\u0644\u0625\u0628\u0644\u0627\u063a \u0639\u0646 \u0647\u0630\u0627 \u0627\u0644\u0645\u0648\u0642\u0639"
    },
    "menu_site_report": {
        "message": "\u062a\u0642\u0631\u064a\u0631 \u0623\u0645\u0646 \u0627\u0644\u0645\u0648\u0642\u0639"
    },
    "menu_settings": {
        "message": "\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0627\u0644\u0645\u0633\u0627\u0639\u062f"
    },
    "assistant_select_element": {
        "message": "\u062d\u0638\u0631 \u0627\u0644\u0639\u0646\u0635\u0631"
    },
    "assistant_select_element_ext": {
        "message": "\u0627\u062e\u062a\u0631 \u0639\u0646\u0635\u0631\u0627 \u0641\u064a \u0627\u0644\u0635\u0641\u062d\u0629 \u0644\u0644\u062d\u0638\u0631"
    },
    "assistant_select_element_cancel": {
        "message": "\u0627\u0644\u063a\u0627\u0621"
    },
    "assistant_block_element": {
        "message": "\u062d\u0638\u0631 \u0627\u0644\u0639\u0646\u0635\u0631"
    },
    "assistant_block_element_explain": {
        "message": "\u0636\u0628\u0637 \u0642\u0627\u0639\u062f\u0629 \u062d\u0638\u0631 \u0627\u0644\u0639\u0646\u0635\u0631"
    },
    "assistant_slider_explain": {
        "message": "\u062d\u0631\u0643 \u0634\u0631\u064a\u0637 \u0627\u0644\u062a\u0645\u0631\u064a\u0631 \u0644\u062a\u063a\u064a\u064a\u0631 \u062d\u062c\u0645 \u0627\u0644\u0625\u0637\u0627\u0631 \u0627\u0644\u0630\u064a \u0633\u062a\u0639\u0645\u0644 \u0639\u0644\u064a\u0647 \u0627\u0644\u0642\u0627\u0639\u062f\u0629 \u0627\u0644\u062c\u062f\u064a\u062f\u0629:"
    },
    "assistant_slider_min": {
        "message": "\u062d\u062f \u0627\u062f\u0646\u064a"
    },
    "assistant_slider_max": {
        "message": "\u0643\u062d\u062f \u0623\u0642\u0635\u0649"
    },
    "assistant_extended_settings": {
        "message": "\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0645\u062a\u0642\u062f\u0645\u0629"
    },
    "assistant_apply_rule_to_all_sites": {
        "message": "\u062a\u0637\u0628\u064a\u0642 \u0627\u0644\u0642\u0627\u0639\u062f\u0629 \u0639\u0644\u064a \u0643\u0627\u0641\u0629 \u0645\u0648\u0627\u0642\u0639 \u0627\u0644\u0648\u064a\u0628"
    },
    "assistant_block_by_reference": {
        "message": "\u062d\u0638\u0631 \u062d\u0633\u0628 \u0627\u0644\u0627\u0631\u062a\u0628\u0627\u0637 \u0627\u0644\u0645\u0631\u062c\u0639\u064a"
    },
    "assistant_block_similar": {
        "message": "\u062d\u0638\u0631 \u0639\u0646\u0635\u0631 \u0645\u0645\u0627 \u062b\u0644"
    },
    "assistant_another_element": {
        "message": "\u062a\u062d\u062f\u064a\u062f \u0639\u0646\u0635\u0631 \u0622\u062e\u0631"
    },
    "assistant_preview": {
        "message": "\u0627\u0644\u0645\u0639\u0627\u064a\u0646\u0647"
    },
    "assistant_block": {
        "message": "\u062d\u0638\u0631"
    },
    "assistant_settings": {
        "message": "\u0625\u0639\u062f\u0627\u062f\u0627\u062a \u0627\u0644\u0645\u0633\u0627\u0639\u062f"
    },
    "assistant_preview_header": {
        "message": "\u062d\u062c\u0628 \u0639\u0646\u0635\u0631--\u0645\u0639\u0627\u064a\u0646\u0647"
    },
    "assistant_preview_header_info": {
        "message": "\u062a\u0627\u0643\u062f \u0645\u0646 \u062d\u0638\u0631 \u0647\u0630\u0627 \u0627\u0644\u0639\u0646\u0635\u0631 \u0643\u0645\u0627 \u0647\u0648 \u0645\u0642\u0635\u0648\u062f"
    },
    "assistant_preview_end": {
        "message": "\u0625\u0646\u0647\u0627\u0621 \u0627\u0644\u0645\u0639\u0627\u064a\u0646\u0629"
    },
    "wot_unknown_description": {
        "message": "\u0644\u0645 \u064a\u062a\u0645 \u062a\u0639\u0631\u064a\u0641 \u0627\u0644\u0633\u0645\u0639\u0629"
    },
    "wot_bad_description": {
        "message": "\u0647\u0630\u0627 \u0627\u0644\u0645\u0648\u0642\u0639 \u0644\u062f\u064a\u0647 \u0633\u0645\u0639\u0629 \u0633\u064a\u0626\u0629 \u0644\u0644\u063a\u0627\u064a\u0629 \n\u0648\u0641\u0642\u0627 \u0644 "
    },
    "wot_poor_description": {
        "message": "\u0647\u0630\u0627 \u0627\u0644\u0645\u0648\u0642\u0639 \u0644\u062f\u064a\u0647 \u0633\u0645\u0639\u0629 \u0633\u064a\u0626\u0629 \n\u0648\u0641\u0642\u0627 \u0644 "
    },
    "wot_unsatisfactory_description": {
        "message": "\u0647\u0630\u0627 \u0627\u0644\u0645\u0648\u0642\u0639 \u0644\u062f\u064a\u0647 \u0633\u0645\u0639\u0629 \u0633\u064a\u0626\u0629 \n\u0648\u0641\u0642\u0627 \u0644 "
    },
    "wot_good_description": {
        "message": "\u0647\u0630\u0627 \u0627\u0644\u0645\u0648\u0642\u0639 \u0644\u062f\u064a\u0647 \u0633\u0645\u0639\u0629 \u062c\u064a\u062f\u0629 \n\u0648\u0641\u0642\u0627 \u0644 "
    },
    "wot_excellent_description": {
        "message": "\u0647\u0630\u0627 \u0627\u0644\u0645\u0648\u0642\u0639 \u0644\u062f\u064a\u0647 \u0633\u0645\u0639\u0629 \u0645\u0645\u062a\u0627\u0632\u0629 \n\u0648\u0641\u0642\u0627 \u0644 "
    },
    "settings_choose_size_and_position": {
        "message": "\u0636\u0628\u0637 \u062d\u062c\u0645 \u0645\u0633\u0627\u0639\u062f Adguard \u0648\u0645\u0648\u0636\u0639\u0647"
    },
    "settings_icon_size": {
        "message": "\u062d\u062c\u0645 \u0627\u0644\u0631\u0645\u0632:"
    },
    "settings_small": {
        "message": "\u0635\u063a\u064a\u0631"
    },
    "settings_big": {
        "message": "\u0643\u0628\u064a\u0631"
    },
    "settings_position": {
        "message": "\u0648\u0636\u0639"
    },
    "settings_left_top": {
        "message": "\u0627\u0639\u0644\u064a \u0627\u0644\u064a\u0633\u0627\u0631"
    },
    "settings_right_top": {
        "message": "\u0627\u0639\u0644\u064a \u0627\u0644\u064a\u0645\u064a\u0646"
    },
    "settings_left_bottom": {
        "message": "\u0623\u0633\u0641\u0644 \u0627\u0644\u064a\u0633\u0627\u0631"
    },
    "settings_right_bottom": {
        "message": "\u0623\u0633\u0641\u0644 \u0644\u0644\u064a\u0645\u064a\u0646"
    },
    "settings_cancel": {
        "message": "\u0627\u0644\u063a\u0627\u0621"
    },
    "settings_save": {
        "message": "\u062d\u0641\u0638 \u0627\u0644\u062a\u063a\u064a\u064a\u0631\u0627\u062a"
    }
}
var es_419 = {
    "menu_filtration_status": {
        "message": "Filtrando en esta p\u00e1gina"
    },
    "menu_do_not_filter_30_sec": {
        "message": "No filtrar durante 30 segundos"
    },
    "menu_block_ad_on_site": {
        "message": "Bloquear anuncio en esta p\u00e1gina"
    },
    "menu_report_abuse": {
        "message": "Reportar la p\u00e1gina"
    },
    "menu_site_report": {
        "message": "Reporte de seguridad sobre la p\u00e1gina"
    },
    "menu_settings": {
        "message": "Configuraci\u00f3n del Asistente"
    },
    "assistant_select_element": {
        "message": "Bloqueo de Elementos"
    },
    "assistant_select_element_ext": {
        "message": "Seleccione un elemento de la p\u00e1gina para bloquear"
    },
    "assistant_select_element_cancel": {
        "message": "Cancelar"
    },
    "assistant_block_element": {
        "message": "Bloqueo de Elementos"
    },
    "assistant_block_element_explain": {
        "message": "Ajustar regla del bloqueo de elementos"
    },
    "assistant_slider_explain": {
        "message": "Mueva el deslizador para cambiar el tama\u00f1o del marco para el que trabajar\u00e1 la nueva regla:"
    },
    "assistant_slider_min": {
        "message": "MIN"
    },
    "assistant_slider_max": {
        "message": "MAX"
    },
    "assistant_extended_settings": {
        "message": "Configuraci\u00f3n avanzada"
    },
    "assistant_apply_rule_to_all_sites": {
        "message": "Aplicar la norma a todas las p\u00e1ginas"
    },
    "assistant_block_by_reference": {
        "message": "Bloquear por enlace de referencia"
    },
    "assistant_block_similar": {
        "message": "Bloquear similares"
    },
    "assistant_another_element": {
        "message": "Seleccionar otro elemento"
    },
    "assistant_preview": {
        "message": "Vista previa"
    },
    "assistant_block": {
        "message": "Bloquear"
    },
    "assistant_settings": {
        "message": "Configuraci\u00f3n del asistente"
    },
    "assistant_preview_header": {
        "message": "Bloqueo de elementos - vista previa"
    },
    "assistant_preview_header_info": {
        "message": "Aseg\u00farese de que el elemento est\u00e1 bloqueado como se pretende"
    },
    "assistant_preview_end": {
        "message": "Salir de vista previa"
    },
    "wot_unknown_description": {
        "message": "La reputaci\u00f3n no est\u00e1 definida"
    },
    "wot_bad_description": {
        "message": "Esta p\u00e1gina tiene muy mala reputaci\u00f3n\nseg\u00fan "
    },
    "wot_poor_description": {
        "message": "Esta p\u00e1gina tiene mala reputaci\u00f3n \nseg\u00fan "
    },
    "wot_unsatisfactory_description": {
        "message": "Esta p\u00e1gina tiene poca reputaci\u00f3n \nseg\u00fan "
    },
    "wot_good_description": {
        "message": "Esta p\u00e1gina tiene buena reputaci\u00f3n \nseg\u00fan "
    },
    "wot_excellent_description": {
        "message": "Esta p\u00e1gina tiene excelente reputaci\u00f3n \nseg\u00fan "
    },
    "settings_choose_size_and_position": {
        "message": "Ajustar tama\u00f1o y posici\u00f3n de Adguard Assistant"
    },
    "settings_icon_size": {
        "message": "Tama\u00f1o del icono:"
    },
    "settings_small": {
        "message": "Peque\u00f1o"
    },
    "settings_big": {
        "message": "Grande"
    },
    "settings_position": {
        "message": "Posici\u00f3n:"
    },
    "settings_left_top": {
        "message": "Superior izquierda"
    },
    "settings_right_top": {
        "message": "Superior derecha"
    },
    "settings_left_bottom": {
        "message": "Inferior izquierda"
    },
    "settings_right_bottom": {
        "message": "Inferior derecha"
    },
    "settings_cancel": {
        "message": "Cancelar"
    },
    "settings_save": {
        "message": "Guardar cambios"
    }
}
var pt_BR = {
    "menu_filtration_status": {
        "message": "Filtrando neste site"
    },
    "menu_do_not_filter_30_sec": {
        "message": "N\u00e3o filtrar durante 30 segundos"
    },
    "menu_block_ad_on_site": {
        "message": "Bloquear an\u00fancios neste site"
    },
    "menu_report_abuse": {
        "message": "Denunciar o site"
    },
    "menu_site_report": {
        "message": "Relat\u00f3rio de seguran\u00e7a do site"
    },
    "menu_settings": {
        "message": "Configura\u00e7\u00f5es do assistente"
    },
    "assistant_select_element": {
        "message": "Bloqueio de elemento"
    },
    "assistant_select_element_ext": {
        "message": "Escolha um elemento na p\u00e1gina para bloquear"
    },
    "assistant_select_element_cancel": {
        "message": "Cancelar"
    },
    "assistant_block_element": {
        "message": "Bloqueio de elementos"
    },
    "assistant_block_element_explain": {
        "message": "Ajustar a regra de bloqueio de elemento"
    },
    "assistant_slider_explain": {
        "message": "Mova o controle deslizante para alterar o tamanho do quadro para o qual a nova regra funcionar\u00e1:"
    },
    "assistant_slider_min": {
        "message": "MIN"
    },
    "assistant_slider_max": {
        "message": "MAX"
    },
    "assistant_extended_settings": {
        "message": "Configura\u00e7\u00f5es avan\u00e7adas"
    },
    "assistant_apply_rule_to_all_sites": {
        "message": "Aplicar a regra para todos os sites"
    },
    "assistant_block_by_reference": {
        "message": "Bloquear por link de refer\u00eancia"
    },
    "assistant_block_similar": {
        "message": "Bloquear semelhante"
    },
    "assistant_another_element": {
        "message": "Selecione outro elemento"
    },
    "assistant_preview": {
        "message": "Ver pr\u00e9via"
    },
    "assistant_block": {
        "message": "Bloquear"
    },
    "assistant_settings": {
        "message": "Configura\u00e7\u00f5es do assistente"
    },
    "assistant_preview_header": {
        "message": "Bloquear elemento - Pr\u00e9via"
    },
    "assistant_preview_header_info": {
        "message": "Certifique-se de que o elemento esteja bloqueado como pretendido"
    },
    "assistant_preview_end": {
        "message": "Sair da pr\u00e9via"
    },
    "wot_unknown_description": {
        "message": "Nenhuma reputa\u00e7\u00e3o definida"
    },
    "wot_bad_description": {
        "message": "Este site tem uma reputa\u00e7\u00e3o muito ruim\nde acordo com "
    },
    "wot_poor_description": {
        "message": "Este site tem uma m\u00e1 reputa\u00e7\u00e3o\nde acordo com "
    },
    "wot_unsatisfactory_description": {
        "message": "Este site tem uma reputa\u00e7\u00e3o ruim\nde acordo com "
    },
    "wot_good_description": {
        "message": "Este site tem uma boa reputa\u00e7\u00e3o\nde acordo com "
    },
    "wot_excellent_description": {
        "message": "Este site tem uma excelente reputa\u00e7\u00e3o\n\nde acordo com "
    },
    "settings_choose_size_and_position": {
        "message": "Ajuste o tamanho e posi\u00e7\u00e3o do AdGuard Assistente"
    },
    "settings_icon_size": {
        "message": "Tamanho do \u00edcone:"
    },
    "settings_small": {
        "message": "Pequeno"
    },
    "settings_big": {
        "message": "Grande"
    },
    "settings_position": {
        "message": "Posi\u00e7\u00e3o:"
    },
    "settings_left_top": {
        "message": "Canto superior esquerdo"
    },
    "settings_right_top": {
        "message": "Canto superior direito"
    },
    "settings_left_bottom": {
        "message": "Canto inferior esquerdo"
    },
    "settings_right_bottom": {
        "message": "Canto inferior direito"
    },
    "settings_cancel": {
        "message": "Cancelar"
    },
    "settings_save": {
        "message": "Salvar altera\u00e7\u00f5es"
    }
}
var ko = {
    "menu_filtration_status": {
        "message": "\uc774 \uc6f9\uc0ac\uc774\ud2b8\uc5d0\uc11c\uc758 \ubcf4\ud638"
    },
    "menu_do_not_filter_30_sec": {
        "message": "30\ucd08 \ub3d9\uc548 \ucc28\ub2e8 \uc77c\uc2dc\uc815\uc9c0"
    },
    "menu_block_ad_on_site": {
        "message": "\uc774 \uc6f9\uc0ac\uc774\ud2b8\uc5d0\uc11c \uad11\uace0 \ucc28\ub2e8"
    },
    "menu_report_abuse": {
        "message": "\uc774 \uc6f9\uc0ac\uc774\ud2b8\uc5d0 \uad00\ud55c \ubd88\ub9cc \uc0ac\ud56d \uc81c\ucd9c"
    },
    "menu_site_report": {
        "message": "\uc6f9\uc0ac\uc774\ud2b8 \ubcf4\uc548 \ubcf4\uace0"
    },
    "menu_settings": {
        "message": "Adguard \uc124\uc815"
    },
    "assistant_select_element": {
        "message": "\uc120\ud0dd \ubaa8\ub4dc"
    },
    "assistant_select_element_ext": {
        "message": "\ud398\uc774\uc9c0\uc5d0\uc11c \uc544\ubb34 \uc694\uc18c\ub098 \ud074\ub9ad\ud558\uac70\ub098"
    },
    "assistant_select_element_cancel": {
        "message": "\uc120\ud0dd \ubaa8\ub4dc \ucde8\uc18c"
    },
    "assistant_block_element": {
        "message": "\uc694\uc18c \ucc28\ub2e8"
    },
    "assistant_block_element_explain": {
        "message": "\uc694\uc18c \ucc28\ub2e8 \uaddc\uce59 \uc124\uc815"
    },
    "assistant_slider_explain": {
        "message": "\uc2ac\ub77c\uc774\ub354\ub85c \ucc28\ub2e8\ud560 \uc694\uc18c\uc758 \ubc94\uc704\ub97c \uc9c0\uc815\ud558\uc138\uc694."
    },
    "assistant_slider_min": {
        "message": "\uc791\uac8c"
    },
    "assistant_slider_max": {
        "message": "\ud06c\uac8c"
    },
    "assistant_extended_settings": {
        "message": "\uace0\uae09 \uc124\uc815..."
    },
    "assistant_apply_rule_to_all_sites": {
        "message": "\ubaa8\ub4e0 \uc6f9\uc0ac\uc774\ud2b8\uc5d0 \uc774 \uaddc\uce59 \uc801\uc6a9"
    },
    "assistant_block_by_reference": {
        "message": "\ucc38\uc870 \ub9c1\ud06c\uac00 \ucc28\ub2e8"
    },
    "assistant_block_similar": {
        "message": "\uc720\uc0ac\ud55c \uc694\uc18c \ucc28\ub2e8"
    },
    "assistant_another_element": {
        "message": "\ub2e4\ub978 \uc694\uc18c \uc120\ud0dd"
    },
    "assistant_preview": {
        "message": "\ubbf8\ub9ac \ubcf4\uae30"
    },
    "assistant_block": {
        "message": "\ucc28\ub2e8"
    },
    "assistant_settings": {
        "message": "\ub3c4\uc6b0\ubbf8 \uc124\uc815"
    },
    "assistant_preview_header": {
        "message": "\uc694\uc18c \ucc28\ub2e8 - \ubbf8\ub9ac \ubcf4\uae30"
    },
    "assistant_preview_header_info": {
        "message": "\uc758\ub3c4\ud55c \ub300\ub85c \uc694\uc18c\uac00 \ucc28\ub2e8\ub418\uc5c8\ub294\uc9c0 \ud655\uc778\ud558\uc138\uc694."
    },
    "assistant_preview_end": {
        "message": "\ubbf8\ub9ac \ubcf4\uae30 \uc885\ub8cc"
    },
    "wot_unknown_description": {
        "message": "\ud3c9\ud310\uc774 \ub4f1\ub85d\ub418\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4."
    },
    "wot_bad_description": {
        "message": "\uc774 \uc6f9\uc0ac\uc774\ud2b8\ub294 \uc544\uc8fc \ub098\uc05c \ud3c9\ud310\uc744 \uac16\uace0 \uc788\uc2b5\ub2c8\ub2e4.\n\uc81c\uacf5 "
    },
    "wot_poor_description": {
        "message": "\uc774 \uc6f9\uc0ac\uc774\ud2b8\ub294 \ub098\uc05c \ud3c9\ud310\uc744 \uac16\uace0 \uc788\uc2b5\ub2c8\ub2e4.\n\uc81c\uacf5 "
    },
    "wot_unsatisfactory_description": {
        "message": "\uc774 \uc6f9\uc0ac\uc774\ud2b8\ub294 \uc88b\uc9c0 \uc54a\uc740 \ud3c9\ud310\uc744 \uac16\uace0 \uc788\uc2b5\ub2c8\ub2e4.\n\uc81c\uacf5 "
    },
    "wot_good_description": {
        "message": "\uc774 \uc6f9\uc0ac\uc774\ud2b8\ub294 \uc88b\uc740 \ud3c9\ud310\uc744 \uac16\uace0 \uc788\uc2b5\ub2c8\ub2e4.\n\uc81c\uacf5 "
    },
    "wot_excellent_description": {
        "message": "\uc774 \uc6f9\uc0ac\uc774\ud2b8\ub294 \uc544\uc8fc \uc88b\uc740 \ud3c9\ud310\uc744 \uac16\uace0 \uc788\uc2b5\ub2c8\ub2e4.\n\uc81c\uacf5 "
    },
    "settings_choose_size_and_position": {
        "message": "AdGuard \ub3c4\uc6b0\ubbf8\uc758 \ud06c\uae30\uc640 \uc704\uce58\ub97c \uc870\uc815\ud569\ub2c8\ub2e4."
    },
    "settings_icon_size": {
        "message": "\uc544\uc774\ucf58 \ud06c\uae30:"
    },
    "settings_small": {
        "message": "\uc791\uac8c"
    },
    "settings_big": {
        "message": "\ud06c\uac8c"
    },
    "settings_position": {
        "message": "\uc704\uce58:"
    },
    "settings_left_top": {
        "message": "\uc67c\ucabd \uc704"
    },
    "settings_right_top": {
        "message": "\uc624\ub978\ucabd \uc704"
    },
    "settings_left_bottom": {
        "message": "\uc67c\ucabd \uc544\ub798"
    },
    "settings_right_bottom": {
        "message": "\uc624\ub978\ucabd \uc544\ub798"
    },
    "settings_cancel": {
        "message": "\ucde8\uc18c"
    },
    "settings_save": {
        "message": "\uc800\uc7a5"
    }
}
/**
 * Object that manages localizations
 * @returns {{getMessage: Function, translateElement: Function}}
 * @constructor
 */
/* global en, ru, uk, pl, de, zh, he, it, fa, tr, ja, ar, es_419, pt_BR, ko, AdguardSettings */

var Localization = function() { // jshint ignore:line
    var currentLocale = null, locale;
    var SupportedLocales = {
        'en': en,
        'ru': ru,
        'uk': uk,
        'pl': pl,
        'de': de,
        'zh': zh,
        'he': he,
        'it': it,
        'fa': fa,
        'tr': tr,
        'ja': ja,
        'ar': ar,
        'es': es_419,
        'pt': pt_BR,
        'ko': ko
    };

    if (typeof AdguardSettings !== 'undefined') {
        locale = AdguardSettings.locale;
    } else if (navigator.languages) {
        locale = navigator.languages[0];
    } else if (navigator.language) {
        locale = navigator.language.split('-')[0];
    }

    if (SupportedLocales[locale]) {
        currentLocale = locale;
    } else {
        currentLocale = 'en';
    }

    var getMessage = function (messageId) {
        var message = SupportedLocales[currentLocale][messageId];
        if (!message) {
            throw messageId + ' not localized';
        }
        return SupportedLocales[currentLocale][messageId].message;
    };

    var translateElement = function (element, message) {
        try {
            while (element.lastChild) {
                element.removeChild(element.lastChild);
            }
            processString(message, element);
        } catch (ex) {
            // Ignore exceptions
        }
    };

    var processString = function (str, element) {
        var el;

        var match1 = /^([^]*?)<(a|strong|span|i)([^>]*)>(.*?)<\/\2>([^]*)$/m.exec(str);
        var match2 = /^([^]*?)<(br|input)([^>]*)\/?>([^]*)$/m.exec(str);
        if (match1) {

            processString(match1[1], element);

            el = createElement(match1[2], match1[3]);

            processString(match1[4], el);
            element.appendChild(el);

            processString(match1[5], element);

        } else if (match2) {

            processString(match2[1], element);

            el = createElement(match2[2], match2[3]);
            element.appendChild(el);

            processString(match2[4], element);

        } else {
            element.appendChild(document.createTextNode(str.replace(/&nbsp;/g, '\u00A0')));
        }
    };

    var createElement = function (tagName, attributes) {

        var el = document.createElement(tagName);
        if (!attributes) {
            return el;
        }

        var attrs = attributes.split(/([a-z]+='[^']+')/);
        for (var i = 0; i < attrs.length; i++) {
            var attr = attrs[i].trim();
            if (!attr) {
                continue;
            }
            var index = attr.indexOf("=");
            var attrName;
            var attrValue;
            if (index > 0) {
                attrName = attr.substring(0, index);
                attrValue = attr.substring(index + 2, attr.length - 1);
            }
            if (attrName && attrValue) {
                el.setAttribute(attrName, attrValue);
            }
        }
        return el;
    };

    return {
        getMessage: getMessage,
        translateElement: translateElement
    };
};

/**
 * Main menu controller
 * @param $
 * @param wot
 * @param localization
 * @param gmApi
 * @returns {{init: init}}
 * @constructor
 */
/* global Ioc, StringUtils, punycode */
var DetailedMenuController = function($, wot, localization, gmApi, settings, log) { // jshint ignore:line
    var contentDocument = null;
    var iframeCtrl = null;
    var domain = null;
    var FILTERING_STATE_LS_PROPERTY = '__adfstate';

    /*
     Called from IframeController._showMenuItem to initialize view
     */
    var init = function(iframe) {
        contentDocument = iframe.contentDocument;
        iframeCtrl = Ioc.get('iframeController');
        setDomain();
        setWotData();
        bindEvents();
        setInitFilteringState();
    };

    var setDomain = function() {
        domain = punycode.toUnicode(location.hostname);
        contentDocument.getElementsByClassName('menu-head_name')[0].textContent = domain;
    };

    var bindEvents = function() {
        var menuEvents = {
            '.close': iframeCtrl.removeIframe,
            '#block-ad': startAdSelector,
            '#assistant-settings': iframeCtrl.showSettingsMenu,
            '#WotDescriptionText': goToWotUrl,
            '#do-not-block-30-sec': doNotBlock,
            '#report-abuse': reportAbuse,
            '#site-report': goToSiteReport,
            '#is-filter': onIsFilterChange
        };
        Object.keys(menuEvents).forEach(function(item) {
            $(contentDocument.querySelectorAll(item)).on('click', menuEvents[item]);
        });
    };

    var onIsFilterChange = function() {
        var isFilter = contentDocument.getElementById('is-filter').checked;

        // animate class for prevent animation while the state from the application is determined
        $(contentDocument.querySelectorAll(".menu-filter_label")).addClass("animate");

        showHideBlockAdButton(isFilter);
        setFilteringStateToStore(isFilter);
        gmApi.ADG_changeFilteringState(isFilter, function() {
            CommonUtils.reloadPageBypassCache();
        });
    };

    var setInitFilteringState = function() {
        var input = contentDocument.getElementById('is-filter');
        input.checked = getFilteringStateFromStore();
        gmApi.ADG_isFiltered(function(isFiltered) {
            input.checked = isFiltered;
            setFilteringStateToStore(isFiltered);
            showHideBlockAdButton(isFiltered);
        });
    };

    /**
     * Storing the filtering state for quick initialization
     *
     * @param {Boolean} state  on/off filtering state
     */
    var setFilteringStateToStore = function(state) {
        try {
            localStorage.setItem(FILTERING_STATE_LS_PROPERTY, JSON.stringify({
                "state": state
            }));
        } catch (ex) {
            log.error(ex);
            return null;
        }
    };

    /**
     * Getting the filtering state for quick initialization from the localStorage,
     * while the state from the application is determined
     *
     * @returns {Boolean} on/off filtering state
     */
    var getFilteringStateFromStore = function() {
        try {
            var state = localStorage.getItem(FILTERING_STATE_LS_PROPERTY);
            if (state) {
                return JSON.parse(state).state;
            } else {
                return false;
            }
        } catch (ex) {
            log.error(ex);
            return false;
        }
        return false;
    };

    var doNotBlock = function() {
        gmApi.ADG_temporaryDontBlock(30, function() {
            CommonUtils.reloadPageBypassCache();
        });
    };

    var reportAbuse = function() {
        gmApi.ADG_sendAbuse(function() {
            iframeCtrl.removeIframe();
        });
    };

    var goToSiteReport = function() {
        var url = StringUtils.format(settings.Constants.REPORT_URL, domain);
        window.open(url, '_blank');
    };

    var setWotData = function() {
        var wotData = wot.getWotData();
        var wotReputationSettings = getWotReputationSettings(wotData);

        if (wotReputationSettings) {
            var wotIndication = $(contentDocument.getElementById('WotIndication'));
            var wotDescriptionText = contentDocument.getElementById('WotDescriptionText');
            var confidenceIndication = $(contentDocument.getElementById('ConfidenceIndication'));

            contentDocument.getElementsByClassName('wot-indicator')[0].href = wot.getWotScorecardUrl(domain);
            wotIndication.addClass(wotReputationSettings.class);
            var wotLogo = $('<a id="WotLogo" href="#"><span class="wot-logo"></span></a>')[0];
            wotDescriptionText.textContent = wotReputationSettings.text;
            wotDescriptionText.appendChild(wotLogo);

            var wotConfidenceClass = getWotConfidenceClass(wotData);
            confidenceIndication.addClass(wotConfidenceClass);

            $(contentDocument.getElementsByClassName('wot-hide')).removeClass('wot-hide');
        }
    };

    var goToWotUrl = function() {
        window.open(wot.WOT_URL, '_blank');
    };

    var getWotReputationSettings = function(wotData) {
        if (!wotData) {
            return null;
        }
        var prefix = 'adg-wot-';
        var averageWot = wotData.reputation;
        var wotRatingText = null;
        var wotRating = null;
        if (averageWot === 0) {
            wotRatingText = localization.getMessage('wot_unknown_description');
            wotRating = prefix + 'unknown';
            return {
                text: wotRatingText,
                class: wotRating
            };
        }
        var wotSettings = {
            0: {
                color: 'red',
                string: localization.getMessage('wot_bad_description')
            },
            1: {
                color: 'lightRed',
                string: localization.getMessage('wot_poor_description')
            },
            2: {
                color: 'yellow',
                string: localization.getMessage('wot_unsatisfactory_description')
            },
            3: {
                color: 'lightGreen',
                string: localization.getMessage('wot_good_description')
            },
            4: {
                color: 'green',
                string: localization.getMessage('wot_excellent_description')
            },
            5: {
                color: 'green',
                string: localization.getMessage('wot_excellent_description')
            }
        };
        var current = wotSettings[truncateDecimals(averageWot / 20)];
        wotRatingText = current.string;
        wotRating = prefix + current.color;
        return {
            text: wotRatingText,
            class: wotRating
        };
    };

    var truncateDecimals = function(number) {
        return Math[number < 0 ? 'ceil' : 'floor'](number);
    };

    var getWotConfidenceClass = function(wotData) {
        if (!wotData) {
            return null;
        }
        var prefix = 'adg-wot-confidence-';
        var confidenceWot = wotData.confidence;
        if (confidenceWot >= 0 && confidenceWot < 6) {
            return prefix + '0';
        }
        if (confidenceWot >= 6 && confidenceWot < 12) {
            return prefix + '1';
        }
        if (confidenceWot >= 12 && confidenceWot < 23) {
            return prefix + '2';
        }
        if (confidenceWot >= 23 && confidenceWot < 34) {
            return prefix + '3';
        }
        if (confidenceWot >= 34 && confidenceWot < 45) {
            return prefix + '4';
        }
        if (confidenceWot >= 45) {
            return prefix + '5';
        }
    };

    var startAdSelector = function() {
        iframeCtrl.showSelectorMenu();
    };

    var showHideBlockAdButton = function(isFilter) {
        if (isFilter) {
            $(contentDocument.getElementById('block-ad')).removeClass('hidden');
        } else {
            $(contentDocument.getElementById('block-ad')).addClass('hidden');
        }
    };

    return {
        init: init
    };
};

/**
 * Selector menu controller
 * @param $
 * @param selector
 * @returns {{init: init}}
 * @constructor
 */
/* global Ioc */
var SelectorMenuController = function ($, selector) { // jshint ignore:line
    var contentDocument = null;
    var iframeCtrl = Ioc.get('iframeController');

    /*
     Called from IframeController._showMenuItem to initialize view
     */
    var init = function (iframe) {
        contentDocument = iframe.contentDocument;
        bindEvents();
        startSelector();
    };

    var close = function () {
        iframeCtrl.removeIframe();
    };

    var bindEvents = function () {
        var menuEvents = {
            '.close': close,
            '.btn-default': close
        };
        Object.keys(menuEvents).forEach(function (item) {
            $(contentDocument.querySelectorAll(item)).on('click', menuEvents[item]);
        });
    };
    var startSelector = function () {
        selector.reset();
        selector.init(onElementSelected);
    };

    var onElementSelected = function (element) {
        iframeCtrl.showSliderMenu(element);
    };

    iframeCtrl.onCloseMenu.attach(selector.close);

    return {
        init: init
    };
};

/**
 * Slider menu controller mobile
 * @param $
 * @param selector
 * @param sliderWidget
 * @param adguardRulesConstructor
 * @param localization
 * @param addRule
 * @returns {{init: init}}
 * @constructor
 */
/* global Ioc, CommonUtils */
var SliderMenuControllerMobile = function ($, selector, sliderWidget, adguardRulesConstructor, localization, addRule) { // jshint ignore:line
    var contentDocument = null;
    var selectedElement = null;
    var iframeCtrl = Ioc.get('iframeController');

    var nodeParentsCount = 0;
    var nodeChildsCount = 0;
    var parents, children;
    var nodeNumber = 0;

    /*
     Called from IframeController._showMenuItem to initialize view
     */
    var init = function (iframe, options) {
        selectedElement = options.element;
        contentDocument = iframe.contentDocument;
        bindEvents();
        createSlider();
        onScopeChange();
        selector.selectElement(selectedElement);

        children = CommonUtils.getAllChildren(selectedElement);
        parents = CommonUtils.getParentsLevel(selectedElement);

        parents.splice(0,0,selectedElement);

        nodeParentsCount = parents.length;
        nodeChildsCount = children.length;
    };

    var close = function () {
        iframeCtrl.removeIframe();
    };

    var plus = function() {
        (nodeNumber + 1) > nodeParentsCount ? nodeNumber = nodeNumber : nodeNumber++;

        if (nodeNumber >= 0) {
            if (parents[nodeNumber]) onSliderMove(parents[nodeNumber]);
        } else {
            if (children[~nodeNumber]) onSliderMove(children[~nodeNumber]);
        }
    };

    var minus = function() {
        nodeNumber <= -nodeChildsCount ? nodeNumber = nodeNumber : nodeNumber--;

        if (nodeNumber >= 0) {
            if (parents[nodeNumber]) onSliderMove(parents[nodeNumber]);
        } else {
            if (children[~nodeNumber]) onSliderMove(children[~nodeNumber]);
        }
    };

    var bindEvents = function () {
        var menuEvents = {
            '.close': close,
            '#ExtendedSettingsText': expandAdvanced,
            '#adv-settings': onScopeChange,
            '#adg-cancel': iframeCtrl.showSelectorMenu,
            '#adg-preview': showPreview,
            '#adg-accept': blockElement,
            '.adg-slide-btn--plus': plus,
            '.adg-slide-btn--minus': minus
        };
        Object.keys(menuEvents).forEach(function (item) {
            $(contentDocument.querySelectorAll(item)).on('click', menuEvents[item]);
        });

        window.addEventListener('resize', iframeCtrl.showSelectorMenu);
    };

    var blockElement = function () {
        addRule(getFilterRuleInputText());
        iframeCtrl.removeIframe();
    };

    var expandAdvanced = function () {
        var hidden = !$(contentDocument.getElementById('adv-settings')).hasClass("open");
        if (hidden) {
            iframeCtrl.resizeSliderMenuToAdvanced();
            $(contentDocument.getElementById('adv-settings')).addClass('open');
            $(contentDocument.getElementById('ExtendedSettingsText')).addClass('active');
        } else {
            iframeCtrl.resizeSliderMenuToNormal();
            $(contentDocument.getElementById('adv-settings')).removeClass('open');
            $(contentDocument.getElementById('ExtendedSettingsText')).removeClass('active');
        }
    };

    var showPreview = function () {
        iframeCtrl.showBlockPreview(selectedElement, getFilterRuleInputText());
    };

    var createSlider = function () {
        var parents = CommonUtils.getParentsLevel(selectedElement);
        var children = CommonUtils.getAllChildren(selectedElement);
        var value = Math.abs(parents.length + 1);
        var max = parents.length + children.length + 1;
        var min = 1;
        var options = {value: value, min: min, max: max};
        var slider = contentDocument.getElementById('slider');
        var sliderArea = contentDocument.getElementById('slider-area');
        if (min === max) {
            //hide slider text
            $(slider).hide();
            $(contentDocument.getElementsByClassName('element-rule_text')).hide();
            expandAdvanced();
        }

        options.onSliderMove = function (delta) {
            var elem;
            if (delta > 0) {
                elem = parents[delta - 1];
            }
            if (delta === 0) {
                elem = selectedElement;
            }
            if (delta < 0) {
                elem = children[Math.abs(delta + 1)];
            }
            onSliderMove(elem);
        };

        sliderWidget.init(slider, {
            min: options.min,
            max: options.max,
            value: options.value,
            onValueChanged: function (value) {
                var delta = options.value - value;
                options.onSliderMove(delta);
            },
            sliderArea: sliderArea
        });
    };

    var onSliderMove = function (element) {
        selectedElement = element;
        selector.selectElement(element);

        makeDefaultCheckboxesForDetailedMenu();
        onScopeChange();
        handleShowBlockSettings(haveUrlBlockParameter(element), haveClassAttribute(element));
    };

    var makeDefaultCheckboxesForDetailedMenu = function () {
        contentDocument.getElementById('block-by-url-checkbox').checked = false;
        contentDocument.getElementById('block-similar-checkbox').checked = false;
        contentDocument.getElementById('one-domain-checkbox').checked = false;
    };

    var onScopeChange = function () {

        var isBlockByUrl = contentDocument.getElementById('block-by-url-checkbox').checked;
        var isBlockSimilar = contentDocument.getElementById('block-similar-checkbox').checked;
        var isBlockOneDomain = contentDocument.getElementById('one-domain-checkbox').checked;

        handleShowBlockSettings(haveUrlBlockParameter(selectedElement) && !isBlockSimilar, haveClassAttribute(selectedElement) && !isBlockByUrl);

        var options = {
            urlMask: getUrlBlockAttribute(selectedElement),
            cssSelectorType: isBlockSimilar ? "SIMILAR" : "STRICT_FULL",
            isBlockOneDomain: isBlockOneDomain,
            url: document.location,
            ruleType: isBlockByUrl ? "URL" : "CSS"
        };

        var ruleText = adguardRulesConstructor.constructRuleText(selectedElement, options);
        setFilterRuleInputText(ruleText);
    };

    var haveUrlBlockParameter = function (element) {
        var value = getUrlBlockAttribute(element);
        return value && value !== '';
    };

    var getUrlBlockAttribute = function (element) {
        var urlBlockAttributes = ["src", "data"];
        for (var i = 0; i < urlBlockAttributes.length; i++) {
            var attr = urlBlockAttributes[i];
            var value = element.getAttribute(attr);
            if (value) {
                return value;
            }
        }
        return null;
    };

    var haveClassAttribute = function (element) {
        var className = element.getAttribute("class");
        return className && className.trim() !== '';
    };

    var handleShowBlockSettings = function (showBlockByUrl, showBlockSimilar) {
        var blockByUrlBlock = $(contentDocument.getElementById('block-by-url-checkbox-block'));
        var blockSimilarBlock = $(contentDocument.getElementById('block-similar-checkbox-block'));
        if (showBlockByUrl) {
            blockByUrlBlock.show();
        } else {
            contentDocument.getElementById('block-by-url-checkbox').checked = false;
            blockByUrlBlock.hide();
        }
        if (showBlockSimilar) {
            blockSimilarBlock.show();
        } else {
            contentDocument.getElementById('block-similar-checkbox').checked = false;
            blockSimilarBlock.hide();
        }
    };

    var setFilterRuleInputText = function (ruleText) {
        contentDocument.getElementById('filter-rule').value = ruleText;
    };

    var getFilterRuleInputText = function () {
        return contentDocument.getElementById('filter-rule').value;
    };

    return {
        init: init
    };
};

/**
 * Block preview controller
 * @param $
 * @param selector
 * @param gmApi
 * @returns {{init: init}}
 * @constructor
 */
/* global Ioc */
var BlockPreviewController = function ($, selector, gmApi) { // jshint ignore:line
    var contentDocument = null;
    var selectedElement = null;
    var selectedPath = null;
    var iframeCtrl = Ioc.get('iframeController');

    /*
     Called from IframeController.showMenuItem to initialize view
     */
    var init = function (iframe, options) {
        selectedElement = options.element;
        selectedPath = options.path;
        contentDocument = iframe.contentDocument;
        selector.reset();
        bindEvents();
        hideElement();
    };

    var close = function () {
        showElement();
        iframeCtrl.removeIframe();
    };

    var bindEvents = function () {
        var menuEvents = {
            '.close': close,
            '#select-another-element': selectAnotherElement,
            '#end-preview': showDetailedMenu,
            '#block-element': blockElement
        };
        Object.keys(menuEvents).forEach(function (item) {
            $(contentDocument.querySelectorAll(item)).on('click', menuEvents[item]);
        });
    };

    var hideElement = function () {
        if (!selectedElement) {
            return;
        }
        $(selectedElement).addClass('adguard-hide');
    };

    var showElement = function () {
        if (!selectedElement) {
            return;
        }
        $(selectedElement).removeClass('adguard-hide');
    };

    var selectAnotherElement = function () {
        showElement();
        iframeCtrl.showSelectorMenu();
    };

    var blockElement = function () {
        gmApi.ADG_addRule(selectedPath, function() {
            iframeCtrl.removeIframe();
            CommonUtils.reloadPageBypassCache();
        });
    };

    var showDetailedMenu = function () {
        showElement();
        iframeCtrl.showSliderMenu(selectedElement);
    };

    return {
        init: init
    };
};

/**
 * Adguard assistant mobile button
 * @param log Logger
 * @param settings User settings
 * @param uiValidationUtils Validation utils
 * @param $ balalaika
 * @param uiUtils UI Utils
 * @param iframeController Iframe controller
 * @param resources Resources that generates in compiler
 * @returns {{show: show, remove: remove}}
 * @constructor
 */
var UIButtonMobile = function(log, settings, uiValidationUtils, $, uiUtils, iframeController, resources) { // jshint ignore:line
    var button = null;
    var isFullScreenEventsRegistered = false;

    /**
     * Shows Adguard initial button
     */
    var show = function() {
        if (!checkRequirements()) {
            log.info("Environment doesn't satisfy requirements, so don't show Adguard");
            return;
        }
        if (button) {
            return;
        }
        log.debug("Requirements checked, all ok");
        button = $(resources.getResource('button.html'));

        var css = document.createElement('style');
        var styles = resources.getResource('button.css') + resources.getResource('selector.css');

        if (css.styleSheet) {
            css.styleSheet.cssText = styles;
        }else {
            css.appendChild(document.createTextNode(styles));
        }

        document.getElementsByTagName("head")[0].appendChild(css);

        setPositionSettingsToButton(button);
        var body = $('body')[0];
        if (!body) {
            log.error('Cant find body');
        }
        body.appendChild(button[0]);
        registerEvents(button);
    };

    /**
     * Checking browser and other requirements.
     * @private
     */
    var checkRequirements = function() {
        if (!uiValidationUtils.validateBrowser()) {
            log.error('Browser is unsupported');
            return false;
        }

        if (!uiValidationUtils.validatePage()) {
            log.error('Page is iframe or there is no body');
            return false;
        }

        if (!uiValidationUtils.checkVisibleAreaSize()) {
            log.error('Page is too small for button');
            return false;
        }

        if (isButtonAlreadyInDOM()) {
            log.error('Button is allready in DOM');
            return false;
        }
        return true;
    };

    var isButtonAlreadyInDOM = function() {
        return $('.adguard-alert').length > 0;
    };

    var setUserPositionIfExists = function(button) {
        var position = settings.getUserPositionForButton();

        // check if the browser stores old data without a anchor to prevent an error
        if (!position || !position.storedAnchor) {
            return false;
        }

        uiUtils.setAnchorPosition.positionY(button[0], position.storedAnchor.top);
        uiUtils.setAnchorPosition.positionX(button[0], position.storedAnchor.left);

        uiUtils.moveElementTo(button[0], position.x, position.y);

        // validate that button is in the viewport
        // with timeout for deferred execution
        setTimeout(function () {
            uiUtils.checkElementPosition(button[0], position);
        });

        return true;
    };

    var setPositionSettingsToButton = function(button) {
        var config = settings.getSettings();
        if (!config.largeIcon) {
            $(button[0].getElementsByClassName('adguard-a-logo')[0]).addClass('adguard-a-logo__small');
        }
        if (setUserPositionIfExists(button)) {
            return;
        }

        uiUtils.setAnchorPosition.positionY(button[0], config.buttonPositionTop);
        uiUtils.setAnchorPosition.positionX(button[0], config.buttonPositionLeft);

        respectPageElements(button[0]);
    };

    var registerEvents = function(button) {
        var onDragEnd = function(data) {
            settings.setUserPositionForButton(data);
        };

        var openMenu = function() {
            iframeController.setButtonPosition(getButtonPosition());
            iframeController.showSelectorMenu();
        };

        uiUtils.makeElementDraggable(button[0], onDragEnd, openMenu);
        hideRestoreOnFullScreen();
    };

    /**
     * Get center button position
     * @returns {{left: *, top: *}}
     * @private
     */
    var getButtonPosition = function() {
        var box = button[0].getBoundingClientRect();
        return {
            top: box.top + button[0].offsetHeight / 2,
            left: box.left + button[0].offsetWidth / 2
        };
    };

    var hideRestoreOnFullScreen = function() {
        if (isFullScreenEventsRegistered) {
            return;
        }
        $(document).on('webkitfullscreenchange mozfullscreenchange fullscreenchange', function() {
            if (uiUtils.tryFullScreenPrefix(document, "FullScreen") || uiUtils.tryFullScreenPrefix(document, "IsFullScreen")) {
                hideButton();
            } else {
                showButton();
            }
        });
        isFullScreenEventsRegistered = true;
    };

    var hideButton = function() {
        if (!button) {
            return;
        }
        button.addClass('adguard-hide');
    };

    var showButton = function() {
        if (!button) {
            return;
        }
        button.removeClass('adguard-hide');
    };

    var removeButton = function() {
        if (!button) {
            return;
        }
        $('body')[0].removeChild(button[0]);
        button = null;
    };

    /**
     * Set a special classes for the pages on which
     * under the button there are important elements
     * issue: https://github.com/AdguardTeam/AdguardAssistant/issues/32
     */
    var respectPageElements = function(element) {
        var buttonInRightBottom =
            $(element).hasClass('adguard-assistant-button-bottom') &&
            $(element).hasClass('adguard-assistant-button-right');

        if (buttonInRightBottom && document.location.hostname.indexOf('vk.com') >= 0) {
            $(element).addClass('adguard-assistant-button-respect adguard-assistant-button-respect-vk');
        }
        if (buttonInRightBottom && document.location.hostname.indexOf('facebook.com') >= 0) {
            $(element).addClass('adguard-assistant-button-respect adguard-assistant-button-respect-fb');
        }
        return false;
    };

    iframeController.onCloseMenu.attach(showButton);
    iframeController.onShowMenuItem.attach(hideButton);

    return {
        show: show,
        remove: removeButton
    };
};

/* global Ioc, Log, Resources, Settings, UIValidationUtils, balalaika, UIUtils, Localization, IframeControllerMobile, SliderWidget, AdguardRulesConstructorLib, AdguardSelectorLib, UIButtonMobile */

this.adguardAssistant = (function() {
    return {
        start: function(callback) {
            Ioc.register('log', new Log());
            Ioc.register('addRule', callback.bind(this));

            Ioc.register('resources', new Resources());
            Ioc.register('$', balalaika);
            Ioc.register('selector', new AdguardSelectorLib({}, balalaika));
            Ioc.register('uiUtils', Ioc.get(UIUtils));
            Ioc.register('localization', Ioc.get(Localization));
            var iframeController = Ioc.get(IframeControllerMobile);
            Ioc.register('iframeController', iframeController);
            Ioc.register('sliderWidget', new SliderWidget({}, balalaika));
            Ioc.register('adguardRulesConstructor', new AdguardRulesConstructorLib({}));

            iframeController.showSelectorMenu();
        }
    };
})();

})();